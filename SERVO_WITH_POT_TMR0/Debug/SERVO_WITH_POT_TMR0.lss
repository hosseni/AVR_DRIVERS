
SERVO_WITH_POT_TMR0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000848  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000bc4  00000000  00000000  0000089c  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000a08  00000000  00000000  00001460  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 93 03 	call	0x726	; 0x726 <main>
  64:	0c 94 22 04 	jmp	0x844	; 0x844 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <ADC_INIT>:
#include "ADC_INT.h"
#include "ADC_REG.h"
#include "Utilities.h"
#include "Std_Types.h"

void ADC_INIT() {
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
	// select v reference
	// external capacitor at AREF pin
	SET_BIT(ADMUX, 6);
  74:	a7 e2       	ldi	r26, 0x27	; 39
  76:	b0 e0       	ldi	r27, 0x00	; 0
  78:	e7 e2       	ldi	r30, 0x27	; 39
  7a:	f0 e0       	ldi	r31, 0x00	; 0
  7c:	80 81       	ld	r24, Z
  7e:	80 64       	ori	r24, 0x40	; 64
  80:	8c 93       	st	X, r24
	CLR_BIT(ADMUX, 7);
  82:	a7 e2       	ldi	r26, 0x27	; 39
  84:	b0 e0       	ldi	r27, 0x00	; 0
  86:	e7 e2       	ldi	r30, 0x27	; 39
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	80 81       	ld	r24, Z
  8c:	8f 77       	andi	r24, 0x7F	; 127
  8e:	8c 93       	st	X, r24

	//right adjust
	CLR_BIT(ADMUX, 5);
  90:	a7 e2       	ldi	r26, 0x27	; 39
  92:	b0 e0       	ldi	r27, 0x00	; 0
  94:	e7 e2       	ldi	r30, 0x27	; 39
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	80 81       	ld	r24, Z
  9a:	8f 7d       	andi	r24, 0xDF	; 223
  9c:	8c 93       	st	X, r24

	// channel 1
	SET_BIT(ADMUX, 0);
  9e:	a7 e2       	ldi	r26, 0x27	; 39
  a0:	b0 e0       	ldi	r27, 0x00	; 0
  a2:	e7 e2       	ldi	r30, 0x27	; 39
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	80 81       	ld	r24, Z
  a8:	81 60       	ori	r24, 0x01	; 1
  aa:	8c 93       	st	X, r24
	CLR_BIT(ADMUX, 1);
  ac:	a7 e2       	ldi	r26, 0x27	; 39
  ae:	b0 e0       	ldi	r27, 0x00	; 0
  b0:	e7 e2       	ldi	r30, 0x27	; 39
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	8d 7f       	andi	r24, 0xFD	; 253
  b8:	8c 93       	st	X, r24
	CLR_BIT(ADMUX, 2);
  ba:	a7 e2       	ldi	r26, 0x27	; 39
  bc:	b0 e0       	ldi	r27, 0x00	; 0
  be:	e7 e2       	ldi	r30, 0x27	; 39
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	8b 7f       	andi	r24, 0xFB	; 251
  c6:	8c 93       	st	X, r24
	CLR_BIT(ADMUX, 3);
  c8:	a7 e2       	ldi	r26, 0x27	; 39
  ca:	b0 e0       	ldi	r27, 0x00	; 0
  cc:	e7 e2       	ldi	r30, 0x27	; 39
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	87 7f       	andi	r24, 0xF7	; 247
  d4:	8c 93       	st	X, r24
	CLR_BIT(ADMUX, 4);
  d6:	a7 e2       	ldi	r26, 0x27	; 39
  d8:	b0 e0       	ldi	r27, 0x00	; 0
  da:	e7 e2       	ldi	r30, 0x27	; 39
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	8f 7e       	andi	r24, 0xEF	; 239
  e2:	8c 93       	st	X, r24
	//Enable ADC
	SET_BIT(ADCSRA, 7);
  e4:	a6 e2       	ldi	r26, 0x26	; 38
  e6:	b0 e0       	ldi	r27, 0x00	; 0
  e8:	e6 e2       	ldi	r30, 0x26	; 38
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	80 81       	ld	r24, Z
  ee:	80 68       	ori	r24, 0x80	; 128
  f0:	8c 93       	st	X, r24

	//ADC prescaler 8
	SET_BIT(ADCSRA, 0);
  f2:	a6 e2       	ldi	r26, 0x26	; 38
  f4:	b0 e0       	ldi	r27, 0x00	; 0
  f6:	e6 e2       	ldi	r30, 0x26	; 38
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 81       	ld	r24, Z
  fc:	81 60       	ori	r24, 0x01	; 1
  fe:	8c 93       	st	X, r24
	SET_BIT(ADCSRA, 1);
 100:	a6 e2       	ldi	r26, 0x26	; 38
 102:	b0 e0       	ldi	r27, 0x00	; 0
 104:	e6 e2       	ldi	r30, 0x26	; 38
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	82 60       	ori	r24, 0x02	; 2
 10c:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA, 2);
 10e:	a6 e2       	ldi	r26, 0x26	; 38
 110:	b0 e0       	ldi	r27, 0x00	; 0
 112:	e6 e2       	ldi	r30, 0x26	; 38
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	80 81       	ld	r24, Z
 118:	8b 7f       	andi	r24, 0xFB	; 251
 11a:	8c 93       	st	X, r24

}
 11c:	cf 91       	pop	r28
 11e:	df 91       	pop	r29
 120:	08 95       	ret

00000122 <ADC_Read>:

u16 ADC_Read(void) {
 122:	df 93       	push	r29
 124:	cf 93       	push	r28
 126:	00 d0       	rcall	.+0      	; 0x128 <ADC_Read+0x6>
 128:	cd b7       	in	r28, 0x3d	; 61
 12a:	de b7       	in	r29, 0x3e	; 62

	u16 readValue = 0;
 12c:	1a 82       	std	Y+2, r1	; 0x02
 12e:	19 82       	std	Y+1, r1	; 0x01

	// start conversion
	SET_BIT(ADCSRA, 6);
 130:	a6 e2       	ldi	r26, 0x26	; 38
 132:	b0 e0       	ldi	r27, 0x00	; 0
 134:	e6 e2       	ldi	r30, 0x26	; 38
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	80 81       	ld	r24, Z
 13a:	80 64       	ori	r24, 0x40	; 64
 13c:	8c 93       	st	X, r24

	// looping until conversion complete
	while ((GET_BIT(ADCSRA, 4)) == 0);
 13e:	e6 e2       	ldi	r30, 0x26	; 38
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	80 81       	ld	r24, Z
 144:	82 95       	swap	r24
 146:	8f 70       	andi	r24, 0x0F	; 15
 148:	88 2f       	mov	r24, r24
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	81 70       	andi	r24, 0x01	; 1
 14e:	90 70       	andi	r25, 0x00	; 0
 150:	00 97       	sbiw	r24, 0x00	; 0
 152:	a9 f3       	breq	.-22     	; 0x13e <ADC_Read+0x1c>

	SET_BIT(ADCSRA, 4); // to disable flag : set it bit
 154:	a6 e2       	ldi	r26, 0x26	; 38
 156:	b0 e0       	ldi	r27, 0x00	; 0
 158:	e6 e2       	ldi	r30, 0x26	; 38
 15a:	f0 e0       	ldi	r31, 0x00	; 0
 15c:	80 81       	ld	r24, Z
 15e:	80 61       	ori	r24, 0x10	; 16
 160:	8c 93       	st	X, r24

	readValue = (u16) ADCL;
 162:	e4 e2       	ldi	r30, 0x24	; 36
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	80 81       	ld	r24, Z
 168:	88 2f       	mov	r24, r24
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	9a 83       	std	Y+2, r25	; 0x02
 16e:	89 83       	std	Y+1, r24	; 0x01

	return ((ADCH << 8) | readValue);
 170:	e5 e2       	ldi	r30, 0x25	; 37
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	80 81       	ld	r24, Z
 176:	88 2f       	mov	r24, r24
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	98 2f       	mov	r25, r24
 17c:	88 27       	eor	r24, r24
 17e:	9c 01       	movw	r18, r24
 180:	89 81       	ldd	r24, Y+1	; 0x01
 182:	9a 81       	ldd	r25, Y+2	; 0x02
 184:	82 2b       	or	r24, r18
 186:	93 2b       	or	r25, r19
}
 188:	0f 90       	pop	r0
 18a:	0f 90       	pop	r0
 18c:	cf 91       	pop	r28
 18e:	df 91       	pop	r29
 190:	08 95       	ret

00000192 <Dio_SetPinDirection>:
#include "Dio_Reg.h"
#include "Dio_Int.h"
#include "Utilities.h"

void Dio_SetPinDirection(u8 GroupNo, u8 PinNo, u8 Direction)
{
 192:	df 93       	push	r29
 194:	cf 93       	push	r28
 196:	cd b7       	in	r28, 0x3d	; 61
 198:	de b7       	in	r29, 0x3e	; 62
 19a:	27 97       	sbiw	r28, 0x07	; 7
 19c:	0f b6       	in	r0, 0x3f	; 63
 19e:	f8 94       	cli
 1a0:	de bf       	out	0x3e, r29	; 62
 1a2:	0f be       	out	0x3f, r0	; 63
 1a4:	cd bf       	out	0x3d, r28	; 61
 1a6:	89 83       	std	Y+1, r24	; 0x01
 1a8:	6a 83       	std	Y+2, r22	; 0x02
 1aa:	4b 83       	std	Y+3, r20	; 0x03
	if((GroupNo<=GroupD)&&(PinNo<=PIN7))
 1ac:	89 81       	ldd	r24, Y+1	; 0x01
 1ae:	84 30       	cpi	r24, 0x04	; 4
 1b0:	08 f0       	brcs	.+2      	; 0x1b4 <Dio_SetPinDirection+0x22>
 1b2:	ed c0       	rjmp	.+474    	; 0x38e <Dio_SetPinDirection+0x1fc>
 1b4:	8a 81       	ldd	r24, Y+2	; 0x02
 1b6:	88 30       	cpi	r24, 0x08	; 8
 1b8:	08 f0       	brcs	.+2      	; 0x1bc <Dio_SetPinDirection+0x2a>
 1ba:	e9 c0       	rjmp	.+466    	; 0x38e <Dio_SetPinDirection+0x1fc>
	{
	if(Direction==INPUT)
 1bc:	8b 81       	ldd	r24, Y+3	; 0x03
 1be:	88 23       	and	r24, r24
 1c0:	09 f0       	breq	.+2      	; 0x1c4 <Dio_SetPinDirection+0x32>
 1c2:	73 c0       	rjmp	.+230    	; 0x2aa <Dio_SetPinDirection+0x118>
	{
		switch(GroupNo)
 1c4:	89 81       	ldd	r24, Y+1	; 0x01
 1c6:	28 2f       	mov	r18, r24
 1c8:	30 e0       	ldi	r19, 0x00	; 0
 1ca:	3f 83       	std	Y+7, r19	; 0x07
 1cc:	2e 83       	std	Y+6, r18	; 0x06
 1ce:	8e 81       	ldd	r24, Y+6	; 0x06
 1d0:	9f 81       	ldd	r25, Y+7	; 0x07
 1d2:	81 30       	cpi	r24, 0x01	; 1
 1d4:	91 05       	cpc	r25, r1
 1d6:	59 f1       	breq	.+86     	; 0x22e <Dio_SetPinDirection+0x9c>
 1d8:	2e 81       	ldd	r18, Y+6	; 0x06
 1da:	3f 81       	ldd	r19, Y+7	; 0x07
 1dc:	22 30       	cpi	r18, 0x02	; 2
 1de:	31 05       	cpc	r19, r1
 1e0:	2c f4       	brge	.+10     	; 0x1ec <Dio_SetPinDirection+0x5a>
 1e2:	8e 81       	ldd	r24, Y+6	; 0x06
 1e4:	9f 81       	ldd	r25, Y+7	; 0x07
 1e6:	00 97       	sbiw	r24, 0x00	; 0
 1e8:	69 f0       	breq	.+26     	; 0x204 <Dio_SetPinDirection+0x72>
 1ea:	5f c0       	rjmp	.+190    	; 0x2aa <Dio_SetPinDirection+0x118>
 1ec:	2e 81       	ldd	r18, Y+6	; 0x06
 1ee:	3f 81       	ldd	r19, Y+7	; 0x07
 1f0:	22 30       	cpi	r18, 0x02	; 2
 1f2:	31 05       	cpc	r19, r1
 1f4:	89 f1       	breq	.+98     	; 0x258 <Dio_SetPinDirection+0xc6>
 1f6:	8e 81       	ldd	r24, Y+6	; 0x06
 1f8:	9f 81       	ldd	r25, Y+7	; 0x07
 1fa:	83 30       	cpi	r24, 0x03	; 3
 1fc:	91 05       	cpc	r25, r1
 1fe:	09 f4       	brne	.+2      	; 0x202 <Dio_SetPinDirection+0x70>
 200:	40 c0       	rjmp	.+128    	; 0x282 <Dio_SetPinDirection+0xf0>
 202:	53 c0       	rjmp	.+166    	; 0x2aa <Dio_SetPinDirection+0x118>
		{
		case GroupA: CLR_BIT(DDRA, PinNo); break;
 204:	aa e3       	ldi	r26, 0x3A	; 58
 206:	b0 e0       	ldi	r27, 0x00	; 0
 208:	ea e3       	ldi	r30, 0x3A	; 58
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	80 81       	ld	r24, Z
 20e:	48 2f       	mov	r20, r24
 210:	8a 81       	ldd	r24, Y+2	; 0x02
 212:	28 2f       	mov	r18, r24
 214:	30 e0       	ldi	r19, 0x00	; 0
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	02 2e       	mov	r0, r18
 21c:	02 c0       	rjmp	.+4      	; 0x222 <Dio_SetPinDirection+0x90>
 21e:	88 0f       	add	r24, r24
 220:	99 1f       	adc	r25, r25
 222:	0a 94       	dec	r0
 224:	e2 f7       	brpl	.-8      	; 0x21e <Dio_SetPinDirection+0x8c>
 226:	80 95       	com	r24
 228:	84 23       	and	r24, r20
 22a:	8c 93       	st	X, r24
 22c:	3e c0       	rjmp	.+124    	; 0x2aa <Dio_SetPinDirection+0x118>
		case GroupB: CLR_BIT(DDRB, PinNo); break;
 22e:	a7 e3       	ldi	r26, 0x37	; 55
 230:	b0 e0       	ldi	r27, 0x00	; 0
 232:	e7 e3       	ldi	r30, 0x37	; 55
 234:	f0 e0       	ldi	r31, 0x00	; 0
 236:	80 81       	ld	r24, Z
 238:	48 2f       	mov	r20, r24
 23a:	8a 81       	ldd	r24, Y+2	; 0x02
 23c:	28 2f       	mov	r18, r24
 23e:	30 e0       	ldi	r19, 0x00	; 0
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	02 2e       	mov	r0, r18
 246:	02 c0       	rjmp	.+4      	; 0x24c <Dio_SetPinDirection+0xba>
 248:	88 0f       	add	r24, r24
 24a:	99 1f       	adc	r25, r25
 24c:	0a 94       	dec	r0
 24e:	e2 f7       	brpl	.-8      	; 0x248 <Dio_SetPinDirection+0xb6>
 250:	80 95       	com	r24
 252:	84 23       	and	r24, r20
 254:	8c 93       	st	X, r24
 256:	29 c0       	rjmp	.+82     	; 0x2aa <Dio_SetPinDirection+0x118>
		case GroupC: CLR_BIT(DDRC, PinNo); break;
 258:	a4 e3       	ldi	r26, 0x34	; 52
 25a:	b0 e0       	ldi	r27, 0x00	; 0
 25c:	e4 e3       	ldi	r30, 0x34	; 52
 25e:	f0 e0       	ldi	r31, 0x00	; 0
 260:	80 81       	ld	r24, Z
 262:	48 2f       	mov	r20, r24
 264:	8a 81       	ldd	r24, Y+2	; 0x02
 266:	28 2f       	mov	r18, r24
 268:	30 e0       	ldi	r19, 0x00	; 0
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	02 2e       	mov	r0, r18
 270:	02 c0       	rjmp	.+4      	; 0x276 <Dio_SetPinDirection+0xe4>
 272:	88 0f       	add	r24, r24
 274:	99 1f       	adc	r25, r25
 276:	0a 94       	dec	r0
 278:	e2 f7       	brpl	.-8      	; 0x272 <Dio_SetPinDirection+0xe0>
 27a:	80 95       	com	r24
 27c:	84 23       	and	r24, r20
 27e:	8c 93       	st	X, r24
 280:	14 c0       	rjmp	.+40     	; 0x2aa <Dio_SetPinDirection+0x118>
		case GroupD: CLR_BIT(DDRD, PinNo); break;
 282:	a1 e3       	ldi	r26, 0x31	; 49
 284:	b0 e0       	ldi	r27, 0x00	; 0
 286:	e1 e3       	ldi	r30, 0x31	; 49
 288:	f0 e0       	ldi	r31, 0x00	; 0
 28a:	80 81       	ld	r24, Z
 28c:	48 2f       	mov	r20, r24
 28e:	8a 81       	ldd	r24, Y+2	; 0x02
 290:	28 2f       	mov	r18, r24
 292:	30 e0       	ldi	r19, 0x00	; 0
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	02 2e       	mov	r0, r18
 29a:	02 c0       	rjmp	.+4      	; 0x2a0 <Dio_SetPinDirection+0x10e>
 29c:	88 0f       	add	r24, r24
 29e:	99 1f       	adc	r25, r25
 2a0:	0a 94       	dec	r0
 2a2:	e2 f7       	brpl	.-8      	; 0x29c <Dio_SetPinDirection+0x10a>
 2a4:	80 95       	com	r24
 2a6:	84 23       	and	r24, r20
 2a8:	8c 93       	st	X, r24
		}
	}
	if(Direction==OUTPUT)
 2aa:	8b 81       	ldd	r24, Y+3	; 0x03
 2ac:	81 30       	cpi	r24, 0x01	; 1
 2ae:	09 f0       	breq	.+2      	; 0x2b2 <Dio_SetPinDirection+0x120>
 2b0:	6e c0       	rjmp	.+220    	; 0x38e <Dio_SetPinDirection+0x1fc>
	{
		switch(GroupNo)
 2b2:	89 81       	ldd	r24, Y+1	; 0x01
 2b4:	28 2f       	mov	r18, r24
 2b6:	30 e0       	ldi	r19, 0x00	; 0
 2b8:	3d 83       	std	Y+5, r19	; 0x05
 2ba:	2c 83       	std	Y+4, r18	; 0x04
 2bc:	8c 81       	ldd	r24, Y+4	; 0x04
 2be:	9d 81       	ldd	r25, Y+5	; 0x05
 2c0:	81 30       	cpi	r24, 0x01	; 1
 2c2:	91 05       	cpc	r25, r1
 2c4:	49 f1       	breq	.+82     	; 0x318 <Dio_SetPinDirection+0x186>
 2c6:	2c 81       	ldd	r18, Y+4	; 0x04
 2c8:	3d 81       	ldd	r19, Y+5	; 0x05
 2ca:	22 30       	cpi	r18, 0x02	; 2
 2cc:	31 05       	cpc	r19, r1
 2ce:	2c f4       	brge	.+10     	; 0x2da <Dio_SetPinDirection+0x148>
 2d0:	8c 81       	ldd	r24, Y+4	; 0x04
 2d2:	9d 81       	ldd	r25, Y+5	; 0x05
 2d4:	00 97       	sbiw	r24, 0x00	; 0
 2d6:	61 f0       	breq	.+24     	; 0x2f0 <Dio_SetPinDirection+0x15e>
 2d8:	5a c0       	rjmp	.+180    	; 0x38e <Dio_SetPinDirection+0x1fc>
 2da:	2c 81       	ldd	r18, Y+4	; 0x04
 2dc:	3d 81       	ldd	r19, Y+5	; 0x05
 2de:	22 30       	cpi	r18, 0x02	; 2
 2e0:	31 05       	cpc	r19, r1
 2e2:	71 f1       	breq	.+92     	; 0x340 <Dio_SetPinDirection+0x1ae>
 2e4:	8c 81       	ldd	r24, Y+4	; 0x04
 2e6:	9d 81       	ldd	r25, Y+5	; 0x05
 2e8:	83 30       	cpi	r24, 0x03	; 3
 2ea:	91 05       	cpc	r25, r1
 2ec:	e9 f1       	breq	.+122    	; 0x368 <Dio_SetPinDirection+0x1d6>
 2ee:	4f c0       	rjmp	.+158    	; 0x38e <Dio_SetPinDirection+0x1fc>
		{
		case GroupA: SET_BIT(DDRA, PinNo); break;
 2f0:	aa e3       	ldi	r26, 0x3A	; 58
 2f2:	b0 e0       	ldi	r27, 0x00	; 0
 2f4:	ea e3       	ldi	r30, 0x3A	; 58
 2f6:	f0 e0       	ldi	r31, 0x00	; 0
 2f8:	80 81       	ld	r24, Z
 2fa:	48 2f       	mov	r20, r24
 2fc:	8a 81       	ldd	r24, Y+2	; 0x02
 2fe:	28 2f       	mov	r18, r24
 300:	30 e0       	ldi	r19, 0x00	; 0
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	02 2e       	mov	r0, r18
 308:	02 c0       	rjmp	.+4      	; 0x30e <Dio_SetPinDirection+0x17c>
 30a:	88 0f       	add	r24, r24
 30c:	99 1f       	adc	r25, r25
 30e:	0a 94       	dec	r0
 310:	e2 f7       	brpl	.-8      	; 0x30a <Dio_SetPinDirection+0x178>
 312:	84 2b       	or	r24, r20
 314:	8c 93       	st	X, r24
 316:	3b c0       	rjmp	.+118    	; 0x38e <Dio_SetPinDirection+0x1fc>
		case GroupB: SET_BIT(DDRB, PinNo); break;
 318:	a7 e3       	ldi	r26, 0x37	; 55
 31a:	b0 e0       	ldi	r27, 0x00	; 0
 31c:	e7 e3       	ldi	r30, 0x37	; 55
 31e:	f0 e0       	ldi	r31, 0x00	; 0
 320:	80 81       	ld	r24, Z
 322:	48 2f       	mov	r20, r24
 324:	8a 81       	ldd	r24, Y+2	; 0x02
 326:	28 2f       	mov	r18, r24
 328:	30 e0       	ldi	r19, 0x00	; 0
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	02 2e       	mov	r0, r18
 330:	02 c0       	rjmp	.+4      	; 0x336 <Dio_SetPinDirection+0x1a4>
 332:	88 0f       	add	r24, r24
 334:	99 1f       	adc	r25, r25
 336:	0a 94       	dec	r0
 338:	e2 f7       	brpl	.-8      	; 0x332 <Dio_SetPinDirection+0x1a0>
 33a:	84 2b       	or	r24, r20
 33c:	8c 93       	st	X, r24
 33e:	27 c0       	rjmp	.+78     	; 0x38e <Dio_SetPinDirection+0x1fc>
		case GroupC: SET_BIT(DDRC, PinNo); break;
 340:	a4 e3       	ldi	r26, 0x34	; 52
 342:	b0 e0       	ldi	r27, 0x00	; 0
 344:	e4 e3       	ldi	r30, 0x34	; 52
 346:	f0 e0       	ldi	r31, 0x00	; 0
 348:	80 81       	ld	r24, Z
 34a:	48 2f       	mov	r20, r24
 34c:	8a 81       	ldd	r24, Y+2	; 0x02
 34e:	28 2f       	mov	r18, r24
 350:	30 e0       	ldi	r19, 0x00	; 0
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	02 2e       	mov	r0, r18
 358:	02 c0       	rjmp	.+4      	; 0x35e <Dio_SetPinDirection+0x1cc>
 35a:	88 0f       	add	r24, r24
 35c:	99 1f       	adc	r25, r25
 35e:	0a 94       	dec	r0
 360:	e2 f7       	brpl	.-8      	; 0x35a <Dio_SetPinDirection+0x1c8>
 362:	84 2b       	or	r24, r20
 364:	8c 93       	st	X, r24
 366:	13 c0       	rjmp	.+38     	; 0x38e <Dio_SetPinDirection+0x1fc>
		case GroupD: SET_BIT(DDRD, PinNo); break;
 368:	a1 e3       	ldi	r26, 0x31	; 49
 36a:	b0 e0       	ldi	r27, 0x00	; 0
 36c:	e1 e3       	ldi	r30, 0x31	; 49
 36e:	f0 e0       	ldi	r31, 0x00	; 0
 370:	80 81       	ld	r24, Z
 372:	48 2f       	mov	r20, r24
 374:	8a 81       	ldd	r24, Y+2	; 0x02
 376:	28 2f       	mov	r18, r24
 378:	30 e0       	ldi	r19, 0x00	; 0
 37a:	81 e0       	ldi	r24, 0x01	; 1
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	02 2e       	mov	r0, r18
 380:	02 c0       	rjmp	.+4      	; 0x386 <Dio_SetPinDirection+0x1f4>
 382:	88 0f       	add	r24, r24
 384:	99 1f       	adc	r25, r25
 386:	0a 94       	dec	r0
 388:	e2 f7       	brpl	.-8      	; 0x382 <Dio_SetPinDirection+0x1f0>
 38a:	84 2b       	or	r24, r20
 38c:	8c 93       	st	X, r24
	else
	{
		//not reachable
	}

}
 38e:	27 96       	adiw	r28, 0x07	; 7
 390:	0f b6       	in	r0, 0x3f	; 63
 392:	f8 94       	cli
 394:	de bf       	out	0x3e, r29	; 62
 396:	0f be       	out	0x3f, r0	; 63
 398:	cd bf       	out	0x3d, r28	; 61
 39a:	cf 91       	pop	r28
 39c:	df 91       	pop	r29
 39e:	08 95       	ret

000003a0 <Dio_SetPinValue>:
void Dio_SetPinValue(u8 GroupNo, u8 PinNo, u8 Value)
{
 3a0:	df 93       	push	r29
 3a2:	cf 93       	push	r28
 3a4:	cd b7       	in	r28, 0x3d	; 61
 3a6:	de b7       	in	r29, 0x3e	; 62
 3a8:	27 97       	sbiw	r28, 0x07	; 7
 3aa:	0f b6       	in	r0, 0x3f	; 63
 3ac:	f8 94       	cli
 3ae:	de bf       	out	0x3e, r29	; 62
 3b0:	0f be       	out	0x3f, r0	; 63
 3b2:	cd bf       	out	0x3d, r28	; 61
 3b4:	89 83       	std	Y+1, r24	; 0x01
 3b6:	6a 83       	std	Y+2, r22	; 0x02
 3b8:	4b 83       	std	Y+3, r20	; 0x03
	if(Value==LOW)
 3ba:	8b 81       	ldd	r24, Y+3	; 0x03
 3bc:	88 23       	and	r24, r24
 3be:	09 f0       	breq	.+2      	; 0x3c2 <Dio_SetPinValue+0x22>
 3c0:	73 c0       	rjmp	.+230    	; 0x4a8 <Dio_SetPinValue+0x108>
		{
			switch(GroupNo)
 3c2:	89 81       	ldd	r24, Y+1	; 0x01
 3c4:	28 2f       	mov	r18, r24
 3c6:	30 e0       	ldi	r19, 0x00	; 0
 3c8:	3f 83       	std	Y+7, r19	; 0x07
 3ca:	2e 83       	std	Y+6, r18	; 0x06
 3cc:	8e 81       	ldd	r24, Y+6	; 0x06
 3ce:	9f 81       	ldd	r25, Y+7	; 0x07
 3d0:	81 30       	cpi	r24, 0x01	; 1
 3d2:	91 05       	cpc	r25, r1
 3d4:	59 f1       	breq	.+86     	; 0x42c <Dio_SetPinValue+0x8c>
 3d6:	2e 81       	ldd	r18, Y+6	; 0x06
 3d8:	3f 81       	ldd	r19, Y+7	; 0x07
 3da:	22 30       	cpi	r18, 0x02	; 2
 3dc:	31 05       	cpc	r19, r1
 3de:	2c f4       	brge	.+10     	; 0x3ea <Dio_SetPinValue+0x4a>
 3e0:	8e 81       	ldd	r24, Y+6	; 0x06
 3e2:	9f 81       	ldd	r25, Y+7	; 0x07
 3e4:	00 97       	sbiw	r24, 0x00	; 0
 3e6:	69 f0       	breq	.+26     	; 0x402 <Dio_SetPinValue+0x62>
 3e8:	5f c0       	rjmp	.+190    	; 0x4a8 <Dio_SetPinValue+0x108>
 3ea:	2e 81       	ldd	r18, Y+6	; 0x06
 3ec:	3f 81       	ldd	r19, Y+7	; 0x07
 3ee:	22 30       	cpi	r18, 0x02	; 2
 3f0:	31 05       	cpc	r19, r1
 3f2:	89 f1       	breq	.+98     	; 0x456 <Dio_SetPinValue+0xb6>
 3f4:	8e 81       	ldd	r24, Y+6	; 0x06
 3f6:	9f 81       	ldd	r25, Y+7	; 0x07
 3f8:	83 30       	cpi	r24, 0x03	; 3
 3fa:	91 05       	cpc	r25, r1
 3fc:	09 f4       	brne	.+2      	; 0x400 <Dio_SetPinValue+0x60>
 3fe:	40 c0       	rjmp	.+128    	; 0x480 <Dio_SetPinValue+0xe0>
 400:	53 c0       	rjmp	.+166    	; 0x4a8 <Dio_SetPinValue+0x108>
			{
			case GroupA: CLR_BIT(PORTA, PinNo); break;
 402:	ab e3       	ldi	r26, 0x3B	; 59
 404:	b0 e0       	ldi	r27, 0x00	; 0
 406:	eb e3       	ldi	r30, 0x3B	; 59
 408:	f0 e0       	ldi	r31, 0x00	; 0
 40a:	80 81       	ld	r24, Z
 40c:	48 2f       	mov	r20, r24
 40e:	8a 81       	ldd	r24, Y+2	; 0x02
 410:	28 2f       	mov	r18, r24
 412:	30 e0       	ldi	r19, 0x00	; 0
 414:	81 e0       	ldi	r24, 0x01	; 1
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	02 2e       	mov	r0, r18
 41a:	02 c0       	rjmp	.+4      	; 0x420 <Dio_SetPinValue+0x80>
 41c:	88 0f       	add	r24, r24
 41e:	99 1f       	adc	r25, r25
 420:	0a 94       	dec	r0
 422:	e2 f7       	brpl	.-8      	; 0x41c <Dio_SetPinValue+0x7c>
 424:	80 95       	com	r24
 426:	84 23       	and	r24, r20
 428:	8c 93       	st	X, r24
 42a:	3e c0       	rjmp	.+124    	; 0x4a8 <Dio_SetPinValue+0x108>
			case GroupB: CLR_BIT(PORTB, PinNo); break;
 42c:	a8 e3       	ldi	r26, 0x38	; 56
 42e:	b0 e0       	ldi	r27, 0x00	; 0
 430:	e8 e3       	ldi	r30, 0x38	; 56
 432:	f0 e0       	ldi	r31, 0x00	; 0
 434:	80 81       	ld	r24, Z
 436:	48 2f       	mov	r20, r24
 438:	8a 81       	ldd	r24, Y+2	; 0x02
 43a:	28 2f       	mov	r18, r24
 43c:	30 e0       	ldi	r19, 0x00	; 0
 43e:	81 e0       	ldi	r24, 0x01	; 1
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	02 2e       	mov	r0, r18
 444:	02 c0       	rjmp	.+4      	; 0x44a <Dio_SetPinValue+0xaa>
 446:	88 0f       	add	r24, r24
 448:	99 1f       	adc	r25, r25
 44a:	0a 94       	dec	r0
 44c:	e2 f7       	brpl	.-8      	; 0x446 <Dio_SetPinValue+0xa6>
 44e:	80 95       	com	r24
 450:	84 23       	and	r24, r20
 452:	8c 93       	st	X, r24
 454:	29 c0       	rjmp	.+82     	; 0x4a8 <Dio_SetPinValue+0x108>
			case GroupC: CLR_BIT(PORTC, PinNo); break;
 456:	a5 e3       	ldi	r26, 0x35	; 53
 458:	b0 e0       	ldi	r27, 0x00	; 0
 45a:	e5 e3       	ldi	r30, 0x35	; 53
 45c:	f0 e0       	ldi	r31, 0x00	; 0
 45e:	80 81       	ld	r24, Z
 460:	48 2f       	mov	r20, r24
 462:	8a 81       	ldd	r24, Y+2	; 0x02
 464:	28 2f       	mov	r18, r24
 466:	30 e0       	ldi	r19, 0x00	; 0
 468:	81 e0       	ldi	r24, 0x01	; 1
 46a:	90 e0       	ldi	r25, 0x00	; 0
 46c:	02 2e       	mov	r0, r18
 46e:	02 c0       	rjmp	.+4      	; 0x474 <Dio_SetPinValue+0xd4>
 470:	88 0f       	add	r24, r24
 472:	99 1f       	adc	r25, r25
 474:	0a 94       	dec	r0
 476:	e2 f7       	brpl	.-8      	; 0x470 <Dio_SetPinValue+0xd0>
 478:	80 95       	com	r24
 47a:	84 23       	and	r24, r20
 47c:	8c 93       	st	X, r24
 47e:	14 c0       	rjmp	.+40     	; 0x4a8 <Dio_SetPinValue+0x108>
			case GroupD: CLR_BIT(PORTD, PinNo); break;
 480:	a2 e3       	ldi	r26, 0x32	; 50
 482:	b0 e0       	ldi	r27, 0x00	; 0
 484:	e2 e3       	ldi	r30, 0x32	; 50
 486:	f0 e0       	ldi	r31, 0x00	; 0
 488:	80 81       	ld	r24, Z
 48a:	48 2f       	mov	r20, r24
 48c:	8a 81       	ldd	r24, Y+2	; 0x02
 48e:	28 2f       	mov	r18, r24
 490:	30 e0       	ldi	r19, 0x00	; 0
 492:	81 e0       	ldi	r24, 0x01	; 1
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	02 2e       	mov	r0, r18
 498:	02 c0       	rjmp	.+4      	; 0x49e <Dio_SetPinValue+0xfe>
 49a:	88 0f       	add	r24, r24
 49c:	99 1f       	adc	r25, r25
 49e:	0a 94       	dec	r0
 4a0:	e2 f7       	brpl	.-8      	; 0x49a <Dio_SetPinValue+0xfa>
 4a2:	80 95       	com	r24
 4a4:	84 23       	and	r24, r20
 4a6:	8c 93       	st	X, r24
			}
		}
		if(Value==HIGH)
 4a8:	8b 81       	ldd	r24, Y+3	; 0x03
 4aa:	81 30       	cpi	r24, 0x01	; 1
 4ac:	09 f0       	breq	.+2      	; 0x4b0 <Dio_SetPinValue+0x110>
 4ae:	6e c0       	rjmp	.+220    	; 0x58c <Dio_SetPinValue+0x1ec>
		{
			switch(GroupNo)
 4b0:	89 81       	ldd	r24, Y+1	; 0x01
 4b2:	28 2f       	mov	r18, r24
 4b4:	30 e0       	ldi	r19, 0x00	; 0
 4b6:	3d 83       	std	Y+5, r19	; 0x05
 4b8:	2c 83       	std	Y+4, r18	; 0x04
 4ba:	8c 81       	ldd	r24, Y+4	; 0x04
 4bc:	9d 81       	ldd	r25, Y+5	; 0x05
 4be:	81 30       	cpi	r24, 0x01	; 1
 4c0:	91 05       	cpc	r25, r1
 4c2:	49 f1       	breq	.+82     	; 0x516 <Dio_SetPinValue+0x176>
 4c4:	2c 81       	ldd	r18, Y+4	; 0x04
 4c6:	3d 81       	ldd	r19, Y+5	; 0x05
 4c8:	22 30       	cpi	r18, 0x02	; 2
 4ca:	31 05       	cpc	r19, r1
 4cc:	2c f4       	brge	.+10     	; 0x4d8 <Dio_SetPinValue+0x138>
 4ce:	8c 81       	ldd	r24, Y+4	; 0x04
 4d0:	9d 81       	ldd	r25, Y+5	; 0x05
 4d2:	00 97       	sbiw	r24, 0x00	; 0
 4d4:	61 f0       	breq	.+24     	; 0x4ee <Dio_SetPinValue+0x14e>
 4d6:	5a c0       	rjmp	.+180    	; 0x58c <Dio_SetPinValue+0x1ec>
 4d8:	2c 81       	ldd	r18, Y+4	; 0x04
 4da:	3d 81       	ldd	r19, Y+5	; 0x05
 4dc:	22 30       	cpi	r18, 0x02	; 2
 4de:	31 05       	cpc	r19, r1
 4e0:	71 f1       	breq	.+92     	; 0x53e <Dio_SetPinValue+0x19e>
 4e2:	8c 81       	ldd	r24, Y+4	; 0x04
 4e4:	9d 81       	ldd	r25, Y+5	; 0x05
 4e6:	83 30       	cpi	r24, 0x03	; 3
 4e8:	91 05       	cpc	r25, r1
 4ea:	e9 f1       	breq	.+122    	; 0x566 <Dio_SetPinValue+0x1c6>
 4ec:	4f c0       	rjmp	.+158    	; 0x58c <Dio_SetPinValue+0x1ec>
			{
			case GroupA: SET_BIT(PORTA, PinNo); break;
 4ee:	ab e3       	ldi	r26, 0x3B	; 59
 4f0:	b0 e0       	ldi	r27, 0x00	; 0
 4f2:	eb e3       	ldi	r30, 0x3B	; 59
 4f4:	f0 e0       	ldi	r31, 0x00	; 0
 4f6:	80 81       	ld	r24, Z
 4f8:	48 2f       	mov	r20, r24
 4fa:	8a 81       	ldd	r24, Y+2	; 0x02
 4fc:	28 2f       	mov	r18, r24
 4fe:	30 e0       	ldi	r19, 0x00	; 0
 500:	81 e0       	ldi	r24, 0x01	; 1
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	02 2e       	mov	r0, r18
 506:	02 c0       	rjmp	.+4      	; 0x50c <Dio_SetPinValue+0x16c>
 508:	88 0f       	add	r24, r24
 50a:	99 1f       	adc	r25, r25
 50c:	0a 94       	dec	r0
 50e:	e2 f7       	brpl	.-8      	; 0x508 <Dio_SetPinValue+0x168>
 510:	84 2b       	or	r24, r20
 512:	8c 93       	st	X, r24
 514:	3b c0       	rjmp	.+118    	; 0x58c <Dio_SetPinValue+0x1ec>
			case GroupB: SET_BIT(PORTB, PinNo); break;
 516:	a8 e3       	ldi	r26, 0x38	; 56
 518:	b0 e0       	ldi	r27, 0x00	; 0
 51a:	e8 e3       	ldi	r30, 0x38	; 56
 51c:	f0 e0       	ldi	r31, 0x00	; 0
 51e:	80 81       	ld	r24, Z
 520:	48 2f       	mov	r20, r24
 522:	8a 81       	ldd	r24, Y+2	; 0x02
 524:	28 2f       	mov	r18, r24
 526:	30 e0       	ldi	r19, 0x00	; 0
 528:	81 e0       	ldi	r24, 0x01	; 1
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	02 2e       	mov	r0, r18
 52e:	02 c0       	rjmp	.+4      	; 0x534 <Dio_SetPinValue+0x194>
 530:	88 0f       	add	r24, r24
 532:	99 1f       	adc	r25, r25
 534:	0a 94       	dec	r0
 536:	e2 f7       	brpl	.-8      	; 0x530 <Dio_SetPinValue+0x190>
 538:	84 2b       	or	r24, r20
 53a:	8c 93       	st	X, r24
 53c:	27 c0       	rjmp	.+78     	; 0x58c <Dio_SetPinValue+0x1ec>
			case GroupC: SET_BIT(PORTC, PinNo); break;
 53e:	a5 e3       	ldi	r26, 0x35	; 53
 540:	b0 e0       	ldi	r27, 0x00	; 0
 542:	e5 e3       	ldi	r30, 0x35	; 53
 544:	f0 e0       	ldi	r31, 0x00	; 0
 546:	80 81       	ld	r24, Z
 548:	48 2f       	mov	r20, r24
 54a:	8a 81       	ldd	r24, Y+2	; 0x02
 54c:	28 2f       	mov	r18, r24
 54e:	30 e0       	ldi	r19, 0x00	; 0
 550:	81 e0       	ldi	r24, 0x01	; 1
 552:	90 e0       	ldi	r25, 0x00	; 0
 554:	02 2e       	mov	r0, r18
 556:	02 c0       	rjmp	.+4      	; 0x55c <Dio_SetPinValue+0x1bc>
 558:	88 0f       	add	r24, r24
 55a:	99 1f       	adc	r25, r25
 55c:	0a 94       	dec	r0
 55e:	e2 f7       	brpl	.-8      	; 0x558 <Dio_SetPinValue+0x1b8>
 560:	84 2b       	or	r24, r20
 562:	8c 93       	st	X, r24
 564:	13 c0       	rjmp	.+38     	; 0x58c <Dio_SetPinValue+0x1ec>
			case GroupD: SET_BIT(PORTD, PinNo); break;
 566:	a2 e3       	ldi	r26, 0x32	; 50
 568:	b0 e0       	ldi	r27, 0x00	; 0
 56a:	e2 e3       	ldi	r30, 0x32	; 50
 56c:	f0 e0       	ldi	r31, 0x00	; 0
 56e:	80 81       	ld	r24, Z
 570:	48 2f       	mov	r20, r24
 572:	8a 81       	ldd	r24, Y+2	; 0x02
 574:	28 2f       	mov	r18, r24
 576:	30 e0       	ldi	r19, 0x00	; 0
 578:	81 e0       	ldi	r24, 0x01	; 1
 57a:	90 e0       	ldi	r25, 0x00	; 0
 57c:	02 2e       	mov	r0, r18
 57e:	02 c0       	rjmp	.+4      	; 0x584 <Dio_SetPinValue+0x1e4>
 580:	88 0f       	add	r24, r24
 582:	99 1f       	adc	r25, r25
 584:	0a 94       	dec	r0
 586:	e2 f7       	brpl	.-8      	; 0x580 <Dio_SetPinValue+0x1e0>
 588:	84 2b       	or	r24, r20
 58a:	8c 93       	st	X, r24
			}
		}
}
 58c:	27 96       	adiw	r28, 0x07	; 7
 58e:	0f b6       	in	r0, 0x3f	; 63
 590:	f8 94       	cli
 592:	de bf       	out	0x3e, r29	; 62
 594:	0f be       	out	0x3f, r0	; 63
 596:	cd bf       	out	0x3d, r28	; 61
 598:	cf 91       	pop	r28
 59a:	df 91       	pop	r29
 59c:	08 95       	ret

0000059e <Dio_GetPinValue>:
u8 Dio_GetPinValue(u8 GroupNo, u8 PinNo)
{
 59e:	df 93       	push	r29
 5a0:	cf 93       	push	r28
 5a2:	00 d0       	rcall	.+0      	; 0x5a4 <Dio_GetPinValue+0x6>
 5a4:	00 d0       	rcall	.+0      	; 0x5a6 <Dio_GetPinValue+0x8>
 5a6:	0f 92       	push	r0
 5a8:	cd b7       	in	r28, 0x3d	; 61
 5aa:	de b7       	in	r29, 0x3e	; 62
 5ac:	8a 83       	std	Y+2, r24	; 0x02
 5ae:	6b 83       	std	Y+3, r22	; 0x03
	u8 ret_value;
	switch(GroupNo)
 5b0:	8a 81       	ldd	r24, Y+2	; 0x02
 5b2:	28 2f       	mov	r18, r24
 5b4:	30 e0       	ldi	r19, 0x00	; 0
 5b6:	3d 83       	std	Y+5, r19	; 0x05
 5b8:	2c 83       	std	Y+4, r18	; 0x04
 5ba:	4c 81       	ldd	r20, Y+4	; 0x04
 5bc:	5d 81       	ldd	r21, Y+5	; 0x05
 5be:	41 30       	cpi	r20, 0x01	; 1
 5c0:	51 05       	cpc	r21, r1
 5c2:	41 f1       	breq	.+80     	; 0x614 <Dio_GetPinValue+0x76>
 5c4:	8c 81       	ldd	r24, Y+4	; 0x04
 5c6:	9d 81       	ldd	r25, Y+5	; 0x05
 5c8:	82 30       	cpi	r24, 0x02	; 2
 5ca:	91 05       	cpc	r25, r1
 5cc:	34 f4       	brge	.+12     	; 0x5da <Dio_GetPinValue+0x3c>
 5ce:	2c 81       	ldd	r18, Y+4	; 0x04
 5d0:	3d 81       	ldd	r19, Y+5	; 0x05
 5d2:	21 15       	cp	r18, r1
 5d4:	31 05       	cpc	r19, r1
 5d6:	61 f0       	breq	.+24     	; 0x5f0 <Dio_GetPinValue+0x52>
 5d8:	52 c0       	rjmp	.+164    	; 0x67e <Dio_GetPinValue+0xe0>
 5da:	4c 81       	ldd	r20, Y+4	; 0x04
 5dc:	5d 81       	ldd	r21, Y+5	; 0x05
 5de:	42 30       	cpi	r20, 0x02	; 2
 5e0:	51 05       	cpc	r21, r1
 5e2:	51 f1       	breq	.+84     	; 0x638 <Dio_GetPinValue+0x9a>
 5e4:	8c 81       	ldd	r24, Y+4	; 0x04
 5e6:	9d 81       	ldd	r25, Y+5	; 0x05
 5e8:	83 30       	cpi	r24, 0x03	; 3
 5ea:	91 05       	cpc	r25, r1
 5ec:	b9 f1       	breq	.+110    	; 0x65c <Dio_GetPinValue+0xbe>
 5ee:	47 c0       	rjmp	.+142    	; 0x67e <Dio_GetPinValue+0xe0>
	{
	case GroupA: ret_value=GET_BIT(PINA, PinNo); break;
 5f0:	e9 e3       	ldi	r30, 0x39	; 57
 5f2:	f0 e0       	ldi	r31, 0x00	; 0
 5f4:	80 81       	ld	r24, Z
 5f6:	28 2f       	mov	r18, r24
 5f8:	30 e0       	ldi	r19, 0x00	; 0
 5fa:	8b 81       	ldd	r24, Y+3	; 0x03
 5fc:	88 2f       	mov	r24, r24
 5fe:	90 e0       	ldi	r25, 0x00	; 0
 600:	a9 01       	movw	r20, r18
 602:	02 c0       	rjmp	.+4      	; 0x608 <Dio_GetPinValue+0x6a>
 604:	55 95       	asr	r21
 606:	47 95       	ror	r20
 608:	8a 95       	dec	r24
 60a:	e2 f7       	brpl	.-8      	; 0x604 <Dio_GetPinValue+0x66>
 60c:	ca 01       	movw	r24, r20
 60e:	81 70       	andi	r24, 0x01	; 1
 610:	89 83       	std	Y+1, r24	; 0x01
 612:	35 c0       	rjmp	.+106    	; 0x67e <Dio_GetPinValue+0xe0>
	case GroupB: ret_value=GET_BIT(PINB, PinNo); break;
 614:	e6 e3       	ldi	r30, 0x36	; 54
 616:	f0 e0       	ldi	r31, 0x00	; 0
 618:	80 81       	ld	r24, Z
 61a:	28 2f       	mov	r18, r24
 61c:	30 e0       	ldi	r19, 0x00	; 0
 61e:	8b 81       	ldd	r24, Y+3	; 0x03
 620:	88 2f       	mov	r24, r24
 622:	90 e0       	ldi	r25, 0x00	; 0
 624:	a9 01       	movw	r20, r18
 626:	02 c0       	rjmp	.+4      	; 0x62c <Dio_GetPinValue+0x8e>
 628:	55 95       	asr	r21
 62a:	47 95       	ror	r20
 62c:	8a 95       	dec	r24
 62e:	e2 f7       	brpl	.-8      	; 0x628 <Dio_GetPinValue+0x8a>
 630:	ca 01       	movw	r24, r20
 632:	81 70       	andi	r24, 0x01	; 1
 634:	89 83       	std	Y+1, r24	; 0x01
 636:	23 c0       	rjmp	.+70     	; 0x67e <Dio_GetPinValue+0xe0>
	case GroupC: ret_value=GET_BIT(PINC, PinNo); break;
 638:	e3 e3       	ldi	r30, 0x33	; 51
 63a:	f0 e0       	ldi	r31, 0x00	; 0
 63c:	80 81       	ld	r24, Z
 63e:	28 2f       	mov	r18, r24
 640:	30 e0       	ldi	r19, 0x00	; 0
 642:	8b 81       	ldd	r24, Y+3	; 0x03
 644:	88 2f       	mov	r24, r24
 646:	90 e0       	ldi	r25, 0x00	; 0
 648:	a9 01       	movw	r20, r18
 64a:	02 c0       	rjmp	.+4      	; 0x650 <Dio_GetPinValue+0xb2>
 64c:	55 95       	asr	r21
 64e:	47 95       	ror	r20
 650:	8a 95       	dec	r24
 652:	e2 f7       	brpl	.-8      	; 0x64c <Dio_GetPinValue+0xae>
 654:	ca 01       	movw	r24, r20
 656:	81 70       	andi	r24, 0x01	; 1
 658:	89 83       	std	Y+1, r24	; 0x01
 65a:	11 c0       	rjmp	.+34     	; 0x67e <Dio_GetPinValue+0xe0>
	case GroupD: ret_value=GET_BIT(PIND, PinNo); break;
 65c:	e0 e3       	ldi	r30, 0x30	; 48
 65e:	f0 e0       	ldi	r31, 0x00	; 0
 660:	80 81       	ld	r24, Z
 662:	28 2f       	mov	r18, r24
 664:	30 e0       	ldi	r19, 0x00	; 0
 666:	8b 81       	ldd	r24, Y+3	; 0x03
 668:	88 2f       	mov	r24, r24
 66a:	90 e0       	ldi	r25, 0x00	; 0
 66c:	a9 01       	movw	r20, r18
 66e:	02 c0       	rjmp	.+4      	; 0x674 <Dio_GetPinValue+0xd6>
 670:	55 95       	asr	r21
 672:	47 95       	ror	r20
 674:	8a 95       	dec	r24
 676:	e2 f7       	brpl	.-8      	; 0x670 <Dio_GetPinValue+0xd2>
 678:	ca 01       	movw	r24, r20
 67a:	81 70       	andi	r24, 0x01	; 1
 67c:	89 83       	std	Y+1, r24	; 0x01
	}

return ret_value;
 67e:	89 81       	ldd	r24, Y+1	; 0x01
}
 680:	0f 90       	pop	r0
 682:	0f 90       	pop	r0
 684:	0f 90       	pop	r0
 686:	0f 90       	pop	r0
 688:	0f 90       	pop	r0
 68a:	cf 91       	pop	r28
 68c:	df 91       	pop	r29
 68e:	08 95       	ret

00000690 <Timer_PWM_init>:
#include "PWM_TIMER_MODE_INIT.h"
#include "Dio_Int.h"
#include "Dio_Reg.h"
#include "Utilities.h"
void Timer_PWM_init(void)   {
 690:	df 93       	push	r29
 692:	cf 93       	push	r28
 694:	cd b7       	in	r28, 0x3d	; 61
 696:	de b7       	in	r29, 0x3e	; 62

	// prescalar 1024
	SET_BIT(TCCR0, 0);
 698:	a3 e5       	ldi	r26, 0x53	; 83
 69a:	b0 e0       	ldi	r27, 0x00	; 0
 69c:	e3 e5       	ldi	r30, 0x53	; 83
 69e:	f0 e0       	ldi	r31, 0x00	; 0
 6a0:	80 81       	ld	r24, Z
 6a2:	81 60       	ori	r24, 0x01	; 1
 6a4:	8c 93       	st	X, r24
	CLR_BIT(TCCR0, 1);
 6a6:	a3 e5       	ldi	r26, 0x53	; 83
 6a8:	b0 e0       	ldi	r27, 0x00	; 0
 6aa:	e3 e5       	ldi	r30, 0x53	; 83
 6ac:	f0 e0       	ldi	r31, 0x00	; 0
 6ae:	80 81       	ld	r24, Z
 6b0:	8d 7f       	andi	r24, 0xFD	; 253
 6b2:	8c 93       	st	X, r24
	SET_BIT(TCCR0, 2);
 6b4:	a3 e5       	ldi	r26, 0x53	; 83
 6b6:	b0 e0       	ldi	r27, 0x00	; 0
 6b8:	e3 e5       	ldi	r30, 0x53	; 83
 6ba:	f0 e0       	ldi	r31, 0x00	; 0
 6bc:	80 81       	ld	r24, Z
 6be:	84 60       	ori	r24, 0x04	; 4
 6c0:	8c 93       	st	X, r24

	// PWM mode
	SET_BIT(TCCR0, 3);
 6c2:	a3 e5       	ldi	r26, 0x53	; 83
 6c4:	b0 e0       	ldi	r27, 0x00	; 0
 6c6:	e3 e5       	ldi	r30, 0x53	; 83
 6c8:	f0 e0       	ldi	r31, 0x00	; 0
 6ca:	80 81       	ld	r24, Z
 6cc:	88 60       	ori	r24, 0x08	; 8
 6ce:	8c 93       	st	X, r24
	SET_BIT(TCCR0, 6);
 6d0:	a3 e5       	ldi	r26, 0x53	; 83
 6d2:	b0 e0       	ldi	r27, 0x00	; 0
 6d4:	e3 e5       	ldi	r30, 0x53	; 83
 6d6:	f0 e0       	ldi	r31, 0x00	; 0
 6d8:	80 81       	ld	r24, Z
 6da:	80 64       	ori	r24, 0x40	; 64
 6dc:	8c 93       	st	X, r24

	// to select inverting mode
	CLR_BIT(TCCR0, 4);
 6de:	a3 e5       	ldi	r26, 0x53	; 83
 6e0:	b0 e0       	ldi	r27, 0x00	; 0
 6e2:	e3 e5       	ldi	r30, 0x53	; 83
 6e4:	f0 e0       	ldi	r31, 0x00	; 0
 6e6:	80 81       	ld	r24, Z
 6e8:	8f 7e       	andi	r24, 0xEF	; 239
 6ea:	8c 93       	st	X, r24
	SET_BIT(TCCR0, 5);
 6ec:	a3 e5       	ldi	r26, 0x53	; 83
 6ee:	b0 e0       	ldi	r27, 0x00	; 0
 6f0:	e3 e5       	ldi	r30, 0x53	; 83
 6f2:	f0 e0       	ldi	r31, 0x00	; 0
 6f4:	80 81       	ld	r24, Z
 6f6:	80 62       	ori	r24, 0x20	; 32
 6f8:	8c 93       	st	X, r24

	// set pin 3 at portb as output
	Dio_SetPinDirection(GroupB, PIN3, OUTPUT);
 6fa:	81 e0       	ldi	r24, 0x01	; 1
 6fc:	63 e0       	ldi	r22, 0x03	; 3
 6fe:	41 e0       	ldi	r20, 0x01	; 1
 700:	0e 94 c9 00 	call	0x192	; 0x192 <Dio_SetPinDirection>
}
 704:	cf 91       	pop	r28
 706:	df 91       	pop	r29
 708:	08 95       	ret

0000070a <Timer_PWM_SetDuty>:

void Timer_PWM_SetDuty(u8 Duty)  {
 70a:	df 93       	push	r29
 70c:	cf 93       	push	r28
 70e:	0f 92       	push	r0
 710:	cd b7       	in	r28, 0x3d	; 61
 712:	de b7       	in	r29, 0x3e	; 62
 714:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Duty;
 716:	ec e5       	ldi	r30, 0x5C	; 92
 718:	f0 e0       	ldi	r31, 0x00	; 0
 71a:	89 81       	ldd	r24, Y+1	; 0x01
 71c:	80 83       	st	Z, r24
}
 71e:	0f 90       	pop	r0
 720:	cf 91       	pop	r28
 722:	df 91       	pop	r29
 724:	08 95       	ret

00000726 <main>:
#include "Utilities.h"
#include <stdlib.h>
#include "Dio_Int.h"
#include "Dio_Reg.h"

int main(void) {
 726:	df 93       	push	r29
 728:	cf 93       	push	r28
 72a:	cd b7       	in	r28, 0x3d	; 61
 72c:	de b7       	in	r29, 0x3e	; 62
 72e:	28 97       	sbiw	r28, 0x08	; 8
 730:	0f b6       	in	r0, 0x3f	; 63
 732:	f8 94       	cli
 734:	de bf       	out	0x3e, r29	; 62
 736:	0f be       	out	0x3f, r0	; 63
 738:	cd bf       	out	0x3d, r28	; 61

	u32 Digital_vlue, Analog_value;

	ADC_INIT();
 73a:	0e 94 36 00 	call	0x6c	; 0x6c <ADC_INIT>
	Timer_PWM_init();
 73e:	0e 94 48 03 	call	0x690	; 0x690 <Timer_PWM_init>
	Dio_SetPinDirection(GroupB, PIN7, OUTPUT);
 742:	81 e0       	ldi	r24, 0x01	; 1
 744:	67 e0       	ldi	r22, 0x07	; 7
 746:	41 e0       	ldi	r20, 0x01	; 1
 748:	0e 94 c9 00 	call	0x192	; 0x192 <Dio_SetPinDirection>
	while (1) {
		Dio_SetPinValue(GroupB, PIN7, HIGH);
 74c:	81 e0       	ldi	r24, 0x01	; 1
 74e:	67 e0       	ldi	r22, 0x07	; 7
 750:	41 e0       	ldi	r20, 0x01	; 1
 752:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <Dio_SetPinValue>
		Digital_vlue = ADC_Read();
 756:	0e 94 91 00 	call	0x122	; 0x122 <ADC_Read>
 75a:	cc 01       	movw	r24, r24
 75c:	a0 e0       	ldi	r26, 0x00	; 0
 75e:	b0 e0       	ldi	r27, 0x00	; 0
 760:	8d 83       	std	Y+5, r24	; 0x05
 762:	9e 83       	std	Y+6, r25	; 0x06
 764:	af 83       	std	Y+7, r26	; 0x07
 766:	b8 87       	std	Y+8, r27	; 0x08

		Analog_value = ((Digital_vlue * 5 * 1000) / 1023);
 768:	8d 81       	ldd	r24, Y+5	; 0x05
 76a:	9e 81       	ldd	r25, Y+6	; 0x06
 76c:	af 81       	ldd	r26, Y+7	; 0x07
 76e:	b8 85       	ldd	r27, Y+8	; 0x08
 770:	28 e8       	ldi	r18, 0x88	; 136
 772:	33 e1       	ldi	r19, 0x13	; 19
 774:	40 e0       	ldi	r20, 0x00	; 0
 776:	50 e0       	ldi	r21, 0x00	; 0
 778:	bc 01       	movw	r22, r24
 77a:	cd 01       	movw	r24, r26
 77c:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <__mulsi3>
 780:	dc 01       	movw	r26, r24
 782:	cb 01       	movw	r24, r22
 784:	2f ef       	ldi	r18, 0xFF	; 255
 786:	33 e0       	ldi	r19, 0x03	; 3
 788:	40 e0       	ldi	r20, 0x00	; 0
 78a:	50 e0       	ldi	r21, 0x00	; 0
 78c:	bc 01       	movw	r22, r24
 78e:	cd 01       	movw	r24, r26
 790:	0e 94 00 04 	call	0x800	; 0x800 <__udivmodsi4>
 794:	da 01       	movw	r26, r20
 796:	c9 01       	movw	r24, r18
 798:	89 83       	std	Y+1, r24	; 0x01
 79a:	9a 83       	std	Y+2, r25	; 0x02
 79c:	ab 83       	std	Y+3, r26	; 0x03
 79e:	bc 83       	std	Y+4, r27	; 0x04

		Timer_PWM_SetDuty(Analog_value/100 );
 7a0:	89 81       	ldd	r24, Y+1	; 0x01
 7a2:	9a 81       	ldd	r25, Y+2	; 0x02
 7a4:	ab 81       	ldd	r26, Y+3	; 0x03
 7a6:	bc 81       	ldd	r27, Y+4	; 0x04
 7a8:	24 e6       	ldi	r18, 0x64	; 100
 7aa:	30 e0       	ldi	r19, 0x00	; 0
 7ac:	40 e0       	ldi	r20, 0x00	; 0
 7ae:	50 e0       	ldi	r21, 0x00	; 0
 7b0:	bc 01       	movw	r22, r24
 7b2:	cd 01       	movw	r24, r26
 7b4:	0e 94 00 04 	call	0x800	; 0x800 <__udivmodsi4>
 7b8:	da 01       	movw	r26, r20
 7ba:	c9 01       	movw	r24, r18
 7bc:	0e 94 85 03 	call	0x70a	; 0x70a <Timer_PWM_SetDuty>
 7c0:	c5 cf       	rjmp	.-118    	; 0x74c <main+0x26>

000007c2 <__mulsi3>:
 7c2:	62 9f       	mul	r22, r18
 7c4:	d0 01       	movw	r26, r0
 7c6:	73 9f       	mul	r23, r19
 7c8:	f0 01       	movw	r30, r0
 7ca:	82 9f       	mul	r24, r18
 7cc:	e0 0d       	add	r30, r0
 7ce:	f1 1d       	adc	r31, r1
 7d0:	64 9f       	mul	r22, r20
 7d2:	e0 0d       	add	r30, r0
 7d4:	f1 1d       	adc	r31, r1
 7d6:	92 9f       	mul	r25, r18
 7d8:	f0 0d       	add	r31, r0
 7da:	83 9f       	mul	r24, r19
 7dc:	f0 0d       	add	r31, r0
 7de:	74 9f       	mul	r23, r20
 7e0:	f0 0d       	add	r31, r0
 7e2:	65 9f       	mul	r22, r21
 7e4:	f0 0d       	add	r31, r0
 7e6:	99 27       	eor	r25, r25
 7e8:	72 9f       	mul	r23, r18
 7ea:	b0 0d       	add	r27, r0
 7ec:	e1 1d       	adc	r30, r1
 7ee:	f9 1f       	adc	r31, r25
 7f0:	63 9f       	mul	r22, r19
 7f2:	b0 0d       	add	r27, r0
 7f4:	e1 1d       	adc	r30, r1
 7f6:	f9 1f       	adc	r31, r25
 7f8:	bd 01       	movw	r22, r26
 7fa:	cf 01       	movw	r24, r30
 7fc:	11 24       	eor	r1, r1
 7fe:	08 95       	ret

00000800 <__udivmodsi4>:
 800:	a1 e2       	ldi	r26, 0x21	; 33
 802:	1a 2e       	mov	r1, r26
 804:	aa 1b       	sub	r26, r26
 806:	bb 1b       	sub	r27, r27
 808:	fd 01       	movw	r30, r26
 80a:	0d c0       	rjmp	.+26     	; 0x826 <__udivmodsi4_ep>

0000080c <__udivmodsi4_loop>:
 80c:	aa 1f       	adc	r26, r26
 80e:	bb 1f       	adc	r27, r27
 810:	ee 1f       	adc	r30, r30
 812:	ff 1f       	adc	r31, r31
 814:	a2 17       	cp	r26, r18
 816:	b3 07       	cpc	r27, r19
 818:	e4 07       	cpc	r30, r20
 81a:	f5 07       	cpc	r31, r21
 81c:	20 f0       	brcs	.+8      	; 0x826 <__udivmodsi4_ep>
 81e:	a2 1b       	sub	r26, r18
 820:	b3 0b       	sbc	r27, r19
 822:	e4 0b       	sbc	r30, r20
 824:	f5 0b       	sbc	r31, r21

00000826 <__udivmodsi4_ep>:
 826:	66 1f       	adc	r22, r22
 828:	77 1f       	adc	r23, r23
 82a:	88 1f       	adc	r24, r24
 82c:	99 1f       	adc	r25, r25
 82e:	1a 94       	dec	r1
 830:	69 f7       	brne	.-38     	; 0x80c <__udivmodsi4_loop>
 832:	60 95       	com	r22
 834:	70 95       	com	r23
 836:	80 95       	com	r24
 838:	90 95       	com	r25
 83a:	9b 01       	movw	r18, r22
 83c:	ac 01       	movw	r20, r24
 83e:	bd 01       	movw	r22, r26
 840:	cf 01       	movw	r24, r30
 842:	08 95       	ret

00000844 <_exit>:
 844:	f8 94       	cli

00000846 <__stop_program>:
 846:	ff cf       	rjmp	.-2      	; 0x846 <__stop_program>
