
1AVR_Leds.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000026e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000004d4  00000000  00000000  000002c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      000006ea  00000000  00000000  00000798  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 35 01 	jmp	0x26a	; 0x26a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include "Std_Types.h"
#include "DIO.h"
#include "Utilities.h"
#include <AVR/delay.h>

int main()  {
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	00 d0       	rcall	.+0      	; 0x72 <main+0x6>
  72:	00 d0       	rcall	.+0      	; 0x74 <main+0x8>
  74:	0f 92       	push	r0
  76:	cd b7       	in	r28, 0x3d	; 61
  78:	de b7       	in	r29, 0x3e	; 62

	// set output pins
	set_bit(DDRC, 7);
  7a:	a4 e3       	ldi	r26, 0x34	; 52
  7c:	b0 e0       	ldi	r27, 0x00	; 0
  7e:	e4 e3       	ldi	r30, 0x34	; 52
  80:	f0 e0       	ldi	r31, 0x00	; 0
  82:	80 81       	ld	r24, Z
  84:	80 68       	ori	r24, 0x80	; 128
  86:	8c 93       	st	X, r24
	set_bit(DDRC, 2);
  88:	a4 e3       	ldi	r26, 0x34	; 52
  8a:	b0 e0       	ldi	r27, 0x00	; 0
  8c:	e4 e3       	ldi	r30, 0x34	; 52
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	80 81       	ld	r24, Z
  92:	84 60       	ori	r24, 0x04	; 4
  94:	8c 93       	st	X, r24
	set_bit(DDRD, 3);
  96:	a1 e3       	ldi	r26, 0x31	; 49
  98:	b0 e0       	ldi	r27, 0x00	; 0
  9a:	e1 e3       	ldi	r30, 0x31	; 49
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	88 60       	ori	r24, 0x08	; 8
  a2:	8c 93       	st	X, r24

	// set input pins
	clear_bit(DDRD, 6);
  a4:	a1 e3       	ldi	r26, 0x31	; 49
  a6:	b0 e0       	ldi	r27, 0x00	; 0
  a8:	e1 e3       	ldi	r30, 0x31	; 49
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	80 81       	ld	r24, Z
  ae:	8f 7b       	andi	r24, 0xBF	; 191
  b0:	8c 93       	st	X, r24
	clear_bit(DDRD, 2);
  b2:	a1 e3       	ldi	r26, 0x31	; 49
  b4:	b0 e0       	ldi	r27, 0x00	; 0
  b6:	e1 e3       	ldi	r30, 0x31	; 49
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	8b 7f       	andi	r24, 0xFB	; 251
  be:	8c 93       	st	X, r24

	U8 counter = 0;
  c0:	19 82       	std	Y+1, r1	; 0x01

	while (1) {

		if (((get_bit(PIND, 2)) == 1) && (counter++ < 7)) {
  c2:	e0 e3       	ldi	r30, 0x30	; 48
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	86 95       	lsr	r24
  ca:	86 95       	lsr	r24
  cc:	88 2f       	mov	r24, r24
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	81 70       	andi	r24, 0x01	; 1
  d2:	90 70       	andi	r25, 0x00	; 0
  d4:	88 23       	and	r24, r24
  d6:	09 f4       	brne	.+2      	; 0xda <main+0x6e>
  d8:	5b c0       	rjmp	.+182    	; 0x190 <main+0x124>
  da:	1c 82       	std	Y+4, r1	; 0x04
  dc:	89 81       	ldd	r24, Y+1	; 0x01
  de:	87 30       	cpi	r24, 0x07	; 7
  e0:	10 f4       	brcc	.+4      	; 0xe6 <main+0x7a>
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	8c 83       	std	Y+4, r24	; 0x04
  e6:	89 81       	ldd	r24, Y+1	; 0x01
  e8:	8f 5f       	subi	r24, 0xFF	; 255
  ea:	89 83       	std	Y+1, r24	; 0x01
  ec:	8c 81       	ldd	r24, Y+4	; 0x04
  ee:	88 23       	and	r24, r24
  f0:	09 f4       	brne	.+2      	; 0xf4 <main+0x88>
  f2:	4e c0       	rjmp	.+156    	; 0x190 <main+0x124>
  f4:	41 c0       	rjmp	.+130    	; 0x178 <main+0x10c>

			while ((get_bit(PIND, 2)) == 1) {
				if ((get_bit(counter, 0)) == 1)
  f6:	89 81       	ldd	r24, Y+1	; 0x01
  f8:	88 2f       	mov	r24, r24
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	81 70       	andi	r24, 0x01	; 1
  fe:	90 70       	andi	r25, 0x00	; 0
 100:	88 23       	and	r24, r24
 102:	41 f0       	breq	.+16     	; 0x114 <main+0xa8>
					set_bit(PORTC, 2);
 104:	a5 e3       	ldi	r26, 0x35	; 53
 106:	b0 e0       	ldi	r27, 0x00	; 0
 108:	e5 e3       	ldi	r30, 0x35	; 53
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	80 81       	ld	r24, Z
 10e:	84 60       	ori	r24, 0x04	; 4
 110:	8c 93       	st	X, r24
 112:	07 c0       	rjmp	.+14     	; 0x122 <main+0xb6>
				else
					clear_bit(PORTC, 2);
 114:	a5 e3       	ldi	r26, 0x35	; 53
 116:	b0 e0       	ldi	r27, 0x00	; 0
 118:	e5 e3       	ldi	r30, 0x35	; 53
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	80 81       	ld	r24, Z
 11e:	8b 7f       	andi	r24, 0xFB	; 251
 120:	8c 93       	st	X, r24

				if ((get_bit(counter, 1)) == 1)
 122:	89 81       	ldd	r24, Y+1	; 0x01
 124:	86 95       	lsr	r24
 126:	88 2f       	mov	r24, r24
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	81 70       	andi	r24, 0x01	; 1
 12c:	90 70       	andi	r25, 0x00	; 0
 12e:	88 23       	and	r24, r24
 130:	41 f0       	breq	.+16     	; 0x142 <main+0xd6>
					set_bit(PORTC, 7);
 132:	a5 e3       	ldi	r26, 0x35	; 53
 134:	b0 e0       	ldi	r27, 0x00	; 0
 136:	e5 e3       	ldi	r30, 0x35	; 53
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	80 81       	ld	r24, Z
 13c:	80 68       	ori	r24, 0x80	; 128
 13e:	8c 93       	st	X, r24
 140:	03 c0       	rjmp	.+6      	; 0x148 <main+0xdc>
				else
					get_bit(PORTC, 7);
 142:	e5 e3       	ldi	r30, 0x35	; 53
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	80 81       	ld	r24, Z

				if ((get_bit(counter, 2)) == 1)
 148:	89 81       	ldd	r24, Y+1	; 0x01
 14a:	86 95       	lsr	r24
 14c:	86 95       	lsr	r24
 14e:	88 2f       	mov	r24, r24
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	81 70       	andi	r24, 0x01	; 1
 154:	90 70       	andi	r25, 0x00	; 0
 156:	88 23       	and	r24, r24
 158:	41 f0       	breq	.+16     	; 0x16a <main+0xfe>
					set_bit(PORTD, 3);
 15a:	a2 e3       	ldi	r26, 0x32	; 50
 15c:	b0 e0       	ldi	r27, 0x00	; 0
 15e:	e2 e3       	ldi	r30, 0x32	; 50
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	80 81       	ld	r24, Z
 164:	88 60       	ori	r24, 0x08	; 8
 166:	8c 93       	st	X, r24
 168:	07 c0       	rjmp	.+14     	; 0x178 <main+0x10c>
				else
					clear_bit(PORTD, 3);
 16a:	a2 e3       	ldi	r26, 0x32	; 50
 16c:	b0 e0       	ldi	r27, 0x00	; 0
 16e:	e2 e3       	ldi	r30, 0x32	; 50
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	80 81       	ld	r24, Z
 174:	87 7f       	andi	r24, 0xF7	; 247
 176:	8c 93       	st	X, r24

	while (1) {

		if (((get_bit(PIND, 2)) == 1) && (counter++ < 7)) {

			while ((get_bit(PIND, 2)) == 1) {
 178:	e0 e3       	ldi	r30, 0x30	; 48
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	80 81       	ld	r24, Z
 17e:	86 95       	lsr	r24
 180:	86 95       	lsr	r24
 182:	88 2f       	mov	r24, r24
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	81 70       	andi	r24, 0x01	; 1
 188:	90 70       	andi	r25, 0x00	; 0
 18a:	88 23       	and	r24, r24
 18c:	09 f0       	breq	.+2      	; 0x190 <main+0x124>
 18e:	b3 cf       	rjmp	.-154    	; 0xf6 <main+0x8a>
				else
					clear_bit(PORTD, 3);
			}

		}
		if ((get_bit(PIND,6) == 1) && counter-- > 0) {
 190:	e0 e3       	ldi	r30, 0x30	; 48
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	80 81       	ld	r24, Z
 196:	82 95       	swap	r24
 198:	86 95       	lsr	r24
 19a:	86 95       	lsr	r24
 19c:	83 70       	andi	r24, 0x03	; 3
 19e:	88 2f       	mov	r24, r24
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	81 70       	andi	r24, 0x01	; 1
 1a4:	90 70       	andi	r25, 0x00	; 0
 1a6:	88 23       	and	r24, r24
 1a8:	09 f4       	brne	.+2      	; 0x1ac <main+0x140>
 1aa:	8b cf       	rjmp	.-234    	; 0xc2 <main+0x56>
 1ac:	89 81       	ldd	r24, Y+1	; 0x01
 1ae:	8d 83       	std	Y+5, r24	; 0x05
 1b0:	8d 81       	ldd	r24, Y+5	; 0x05
 1b2:	88 23       	and	r24, r24
 1b4:	11 f0       	breq	.+4      	; 0x1ba <main+0x14e>
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	8d 83       	std	Y+5, r24	; 0x05
 1ba:	8d 81       	ldd	r24, Y+5	; 0x05
 1bc:	99 81       	ldd	r25, Y+1	; 0x01
 1be:	91 50       	subi	r25, 0x01	; 1
 1c0:	99 83       	std	Y+1, r25	; 0x01
 1c2:	88 23       	and	r24, r24
 1c4:	09 f4       	brne	.+2      	; 0x1c8 <main+0x15c>
 1c6:	7d cf       	rjmp	.-262    	; 0xc2 <main+0x56>
 1c8:	41 c0       	rjmp	.+130    	; 0x24c <main+0x1e0>
			while ((get_bit(PIND, 6)) == 1) {
				if ((get_bit(counter, 0)) == 1)
 1ca:	89 81       	ldd	r24, Y+1	; 0x01
 1cc:	88 2f       	mov	r24, r24
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	81 70       	andi	r24, 0x01	; 1
 1d2:	90 70       	andi	r25, 0x00	; 0
 1d4:	88 23       	and	r24, r24
 1d6:	41 f0       	breq	.+16     	; 0x1e8 <main+0x17c>
					set_bit(PORTC, 2);
 1d8:	a5 e3       	ldi	r26, 0x35	; 53
 1da:	b0 e0       	ldi	r27, 0x00	; 0
 1dc:	e5 e3       	ldi	r30, 0x35	; 53
 1de:	f0 e0       	ldi	r31, 0x00	; 0
 1e0:	80 81       	ld	r24, Z
 1e2:	84 60       	ori	r24, 0x04	; 4
 1e4:	8c 93       	st	X, r24
 1e6:	07 c0       	rjmp	.+14     	; 0x1f6 <main+0x18a>
				else
					clear_bit(PORTC, 2);
 1e8:	a5 e3       	ldi	r26, 0x35	; 53
 1ea:	b0 e0       	ldi	r27, 0x00	; 0
 1ec:	e5 e3       	ldi	r30, 0x35	; 53
 1ee:	f0 e0       	ldi	r31, 0x00	; 0
 1f0:	80 81       	ld	r24, Z
 1f2:	8b 7f       	andi	r24, 0xFB	; 251
 1f4:	8c 93       	st	X, r24

				if ((get_bit(counter, 1)) == 1)
 1f6:	89 81       	ldd	r24, Y+1	; 0x01
 1f8:	86 95       	lsr	r24
 1fa:	88 2f       	mov	r24, r24
 1fc:	90 e0       	ldi	r25, 0x00	; 0
 1fe:	81 70       	andi	r24, 0x01	; 1
 200:	90 70       	andi	r25, 0x00	; 0
 202:	88 23       	and	r24, r24
 204:	41 f0       	breq	.+16     	; 0x216 <main+0x1aa>
					set_bit(PORTC, 7);
 206:	a5 e3       	ldi	r26, 0x35	; 53
 208:	b0 e0       	ldi	r27, 0x00	; 0
 20a:	e5 e3       	ldi	r30, 0x35	; 53
 20c:	f0 e0       	ldi	r31, 0x00	; 0
 20e:	80 81       	ld	r24, Z
 210:	80 68       	ori	r24, 0x80	; 128
 212:	8c 93       	st	X, r24
 214:	03 c0       	rjmp	.+6      	; 0x21c <main+0x1b0>
				else
					get_bit(PORTC, 7);
 216:	e5 e3       	ldi	r30, 0x35	; 53
 218:	f0 e0       	ldi	r31, 0x00	; 0
 21a:	80 81       	ld	r24, Z

				if ((get_bit(counter, 2)) == 1)
 21c:	89 81       	ldd	r24, Y+1	; 0x01
 21e:	86 95       	lsr	r24
 220:	86 95       	lsr	r24
 222:	88 2f       	mov	r24, r24
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	81 70       	andi	r24, 0x01	; 1
 228:	90 70       	andi	r25, 0x00	; 0
 22a:	88 23       	and	r24, r24
 22c:	41 f0       	breq	.+16     	; 0x23e <main+0x1d2>
					set_bit(PORTD, 3);
 22e:	a2 e3       	ldi	r26, 0x32	; 50
 230:	b0 e0       	ldi	r27, 0x00	; 0
 232:	e2 e3       	ldi	r30, 0x32	; 50
 234:	f0 e0       	ldi	r31, 0x00	; 0
 236:	80 81       	ld	r24, Z
 238:	88 60       	ori	r24, 0x08	; 8
 23a:	8c 93       	st	X, r24
 23c:	07 c0       	rjmp	.+14     	; 0x24c <main+0x1e0>
				else
					clear_bit(PORTD, 3);
 23e:	a2 e3       	ldi	r26, 0x32	; 50
 240:	b0 e0       	ldi	r27, 0x00	; 0
 242:	e2 e3       	ldi	r30, 0x32	; 50
 244:	f0 e0       	ldi	r31, 0x00	; 0
 246:	80 81       	ld	r24, Z
 248:	87 7f       	andi	r24, 0xF7	; 247
 24a:	8c 93       	st	X, r24
					clear_bit(PORTD, 3);
			}

		}
		if ((get_bit(PIND,6) == 1) && counter-- > 0) {
			while ((get_bit(PIND, 6)) == 1) {
 24c:	e0 e3       	ldi	r30, 0x30	; 48
 24e:	f0 e0       	ldi	r31, 0x00	; 0
 250:	80 81       	ld	r24, Z
 252:	82 95       	swap	r24
 254:	86 95       	lsr	r24
 256:	86 95       	lsr	r24
 258:	83 70       	andi	r24, 0x03	; 3
 25a:	88 2f       	mov	r24, r24
 25c:	90 e0       	ldi	r25, 0x00	; 0
 25e:	81 70       	andi	r24, 0x01	; 1
 260:	90 70       	andi	r25, 0x00	; 0
 262:	88 23       	and	r24, r24
 264:	09 f0       	breq	.+2      	; 0x268 <main+0x1fc>
 266:	b1 cf       	rjmp	.-158    	; 0x1ca <main+0x15e>
 268:	2c cf       	rjmp	.-424    	; 0xc2 <main+0x56>

0000026a <_exit>:
 26a:	f8 94       	cli

0000026c <__stop_program>:
 26c:	ff cf       	rjmp	.-2      	; 0x26c <__stop_program>
