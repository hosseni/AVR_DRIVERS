
ADC_LM35_Buzzer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000029e6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  000029e6  00002a5a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001d04  00000000  00000000  00002a70  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000bdc  00000000  00000000  00004774  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  00005350  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018f  00000000  00000000  000054b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002045  00000000  00000000  0000563f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001101  00000000  00000000  00007684  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f82  00000000  00000000  00008785  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  00009708  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c2  00000000  00000000  00009888  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  00009b4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000a3d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ee       	ldi	r30, 0xE6	; 230
      68:	f9 e2       	ldi	r31, 0x29	; 41
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 37       	cpi	r26, 0x76	; 118
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <main>
      7a:	0c 94 f1 14 	jmp	0x29e2	; 0x29e2 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 75 14 	jmp	0x28ea	; 0x28ea <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	ad e6       	ldi	r26, 0x6D	; 109
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 91 14 	jmp	0x2922	; 0x2922 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 81 14 	jmp	0x2902	; 0x2902 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 9d 14 	jmp	0x293a	; 0x293a <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 81 14 	jmp	0x2902	; 0x2902 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 9d 14 	jmp	0x293a	; 0x293a <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 75 14 	jmp	0x28ea	; 0x28ea <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8d e6       	ldi	r24, 0x6D	; 109
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 91 14 	jmp	0x2922	; 0x2922 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 7d 14 	jmp	0x28fa	; 0x28fa <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	6d e6       	ldi	r22, 0x6D	; 109
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 99 14 	jmp	0x2932	; 0x2932 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 81 14 	jmp	0x2902	; 0x2902 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 9d 14 	jmp	0x293a	; 0x293a <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 81 14 	jmp	0x2902	; 0x2902 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 9d 14 	jmp	0x293a	; 0x293a <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 81 14 	jmp	0x2902	; 0x2902 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 9d 14 	jmp	0x293a	; 0x293a <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 85 14 	jmp	0x290a	; 0x290a <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 a1 14 	jmp	0x2942	; 0x2942 <__epilogue_restores__+0x20>

00000942 <__pack_f>:
     942:	df 92       	push	r13
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	fc 01       	movw	r30, r24
     94e:	e4 80       	ldd	r14, Z+4	; 0x04
     950:	f5 80       	ldd	r15, Z+5	; 0x05
     952:	06 81       	ldd	r16, Z+6	; 0x06
     954:	17 81       	ldd	r17, Z+7	; 0x07
     956:	d1 80       	ldd	r13, Z+1	; 0x01
     958:	80 81       	ld	r24, Z
     95a:	82 30       	cpi	r24, 0x02	; 2
     95c:	48 f4       	brcc	.+18     	; 0x970 <__pack_f+0x2e>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	a0 e1       	ldi	r26, 0x10	; 16
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	e8 2a       	or	r14, r24
     968:	f9 2a       	or	r15, r25
     96a:	0a 2b       	or	r16, r26
     96c:	1b 2b       	or	r17, r27
     96e:	a5 c0       	rjmp	.+330    	; 0xaba <__pack_f+0x178>
     970:	84 30       	cpi	r24, 0x04	; 4
     972:	09 f4       	brne	.+2      	; 0x976 <__pack_f+0x34>
     974:	9f c0       	rjmp	.+318    	; 0xab4 <__pack_f+0x172>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	21 f4       	brne	.+8      	; 0x982 <__pack_f+0x40>
     97a:	ee 24       	eor	r14, r14
     97c:	ff 24       	eor	r15, r15
     97e:	87 01       	movw	r16, r14
     980:	05 c0       	rjmp	.+10     	; 0x98c <__pack_f+0x4a>
     982:	e1 14       	cp	r14, r1
     984:	f1 04       	cpc	r15, r1
     986:	01 05       	cpc	r16, r1
     988:	11 05       	cpc	r17, r1
     98a:	19 f4       	brne	.+6      	; 0x992 <__pack_f+0x50>
     98c:	e0 e0       	ldi	r30, 0x00	; 0
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	96 c0       	rjmp	.+300    	; 0xabe <__pack_f+0x17c>
     992:	62 81       	ldd	r22, Z+2	; 0x02
     994:	73 81       	ldd	r23, Z+3	; 0x03
     996:	9f ef       	ldi	r25, 0xFF	; 255
     998:	62 38       	cpi	r22, 0x82	; 130
     99a:	79 07       	cpc	r23, r25
     99c:	0c f0       	brlt	.+2      	; 0x9a0 <__pack_f+0x5e>
     99e:	5b c0       	rjmp	.+182    	; 0xa56 <__pack_f+0x114>
     9a0:	22 e8       	ldi	r18, 0x82	; 130
     9a2:	3f ef       	ldi	r19, 0xFF	; 255
     9a4:	26 1b       	sub	r18, r22
     9a6:	37 0b       	sbc	r19, r23
     9a8:	2a 31       	cpi	r18, 0x1A	; 26
     9aa:	31 05       	cpc	r19, r1
     9ac:	2c f0       	brlt	.+10     	; 0x9b8 <__pack_f+0x76>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	2a c0       	rjmp	.+84     	; 0xa0c <__pack_f+0xca>
     9b8:	b8 01       	movw	r22, r16
     9ba:	a7 01       	movw	r20, r14
     9bc:	02 2e       	mov	r0, r18
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <__pack_f+0x86>
     9c0:	76 95       	lsr	r23
     9c2:	67 95       	ror	r22
     9c4:	57 95       	ror	r21
     9c6:	47 95       	ror	r20
     9c8:	0a 94       	dec	r0
     9ca:	d2 f7       	brpl	.-12     	; 0x9c0 <__pack_f+0x7e>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <__pack_f+0x9c>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	aa 1f       	adc	r26, r26
     9dc:	bb 1f       	adc	r27, r27
     9de:	2a 95       	dec	r18
     9e0:	d2 f7       	brpl	.-12     	; 0x9d6 <__pack_f+0x94>
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	a1 09       	sbc	r26, r1
     9e6:	b1 09       	sbc	r27, r1
     9e8:	8e 21       	and	r24, r14
     9ea:	9f 21       	and	r25, r15
     9ec:	a0 23       	and	r26, r16
     9ee:	b1 23       	and	r27, r17
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	a1 05       	cpc	r26, r1
     9f4:	b1 05       	cpc	r27, r1
     9f6:	21 f0       	breq	.+8      	; 0xa00 <__pack_f+0xbe>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	9a 01       	movw	r18, r20
     a02:	ab 01       	movw	r20, r22
     a04:	28 2b       	or	r18, r24
     a06:	39 2b       	or	r19, r25
     a08:	4a 2b       	or	r20, r26
     a0a:	5b 2b       	or	r21, r27
     a0c:	da 01       	movw	r26, r20
     a0e:	c9 01       	movw	r24, r18
     a10:	8f 77       	andi	r24, 0x7F	; 127
     a12:	90 70       	andi	r25, 0x00	; 0
     a14:	a0 70       	andi	r26, 0x00	; 0
     a16:	b0 70       	andi	r27, 0x00	; 0
     a18:	80 34       	cpi	r24, 0x40	; 64
     a1a:	91 05       	cpc	r25, r1
     a1c:	a1 05       	cpc	r26, r1
     a1e:	b1 05       	cpc	r27, r1
     a20:	39 f4       	brne	.+14     	; 0xa30 <__pack_f+0xee>
     a22:	27 ff       	sbrs	r18, 7
     a24:	09 c0       	rjmp	.+18     	; 0xa38 <__pack_f+0xf6>
     a26:	20 5c       	subi	r18, 0xC0	; 192
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
     a2a:	4f 4f       	sbci	r20, 0xFF	; 255
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__pack_f+0xf6>
     a30:	21 5c       	subi	r18, 0xC1	; 193
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	4f 4f       	sbci	r20, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	e0 e0       	ldi	r30, 0x00	; 0
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	20 30       	cpi	r18, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	3a 07       	cpc	r19, r26
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	4a 07       	cpc	r20, r26
     a46:	a0 e4       	ldi	r26, 0x40	; 64
     a48:	5a 07       	cpc	r21, r26
     a4a:	10 f0       	brcs	.+4      	; 0xa50 <__pack_f+0x10e>
     a4c:	e1 e0       	ldi	r30, 0x01	; 1
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	79 01       	movw	r14, r18
     a52:	8a 01       	movw	r16, r20
     a54:	27 c0       	rjmp	.+78     	; 0xaa4 <__pack_f+0x162>
     a56:	60 38       	cpi	r22, 0x80	; 128
     a58:	71 05       	cpc	r23, r1
     a5a:	64 f5       	brge	.+88     	; 0xab4 <__pack_f+0x172>
     a5c:	fb 01       	movw	r30, r22
     a5e:	e1 58       	subi	r30, 0x81	; 129
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	d8 01       	movw	r26, r16
     a64:	c7 01       	movw	r24, r14
     a66:	8f 77       	andi	r24, 0x7F	; 127
     a68:	90 70       	andi	r25, 0x00	; 0
     a6a:	a0 70       	andi	r26, 0x00	; 0
     a6c:	b0 70       	andi	r27, 0x00	; 0
     a6e:	80 34       	cpi	r24, 0x40	; 64
     a70:	91 05       	cpc	r25, r1
     a72:	a1 05       	cpc	r26, r1
     a74:	b1 05       	cpc	r27, r1
     a76:	39 f4       	brne	.+14     	; 0xa86 <__pack_f+0x144>
     a78:	e7 fe       	sbrs	r14, 7
     a7a:	0d c0       	rjmp	.+26     	; 0xa96 <__pack_f+0x154>
     a7c:	80 e4       	ldi	r24, 0x40	; 64
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__pack_f+0x14c>
     a86:	8f e3       	ldi	r24, 0x3F	; 63
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	e8 0e       	add	r14, r24
     a90:	f9 1e       	adc	r15, r25
     a92:	0a 1f       	adc	r16, r26
     a94:	1b 1f       	adc	r17, r27
     a96:	17 ff       	sbrs	r17, 7
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <__pack_f+0x162>
     a9a:	16 95       	lsr	r17
     a9c:	07 95       	ror	r16
     a9e:	f7 94       	ror	r15
     aa0:	e7 94       	ror	r14
     aa2:	31 96       	adiw	r30, 0x01	; 1
     aa4:	87 e0       	ldi	r24, 0x07	; 7
     aa6:	16 95       	lsr	r17
     aa8:	07 95       	ror	r16
     aaa:	f7 94       	ror	r15
     aac:	e7 94       	ror	r14
     aae:	8a 95       	dec	r24
     ab0:	d1 f7       	brne	.-12     	; 0xaa6 <__pack_f+0x164>
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <__pack_f+0x17c>
     ab4:	ee 24       	eor	r14, r14
     ab6:	ff 24       	eor	r15, r15
     ab8:	87 01       	movw	r16, r14
     aba:	ef ef       	ldi	r30, 0xFF	; 255
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	6e 2f       	mov	r22, r30
     ac0:	67 95       	ror	r22
     ac2:	66 27       	eor	r22, r22
     ac4:	67 95       	ror	r22
     ac6:	90 2f       	mov	r25, r16
     ac8:	9f 77       	andi	r25, 0x7F	; 127
     aca:	d7 94       	ror	r13
     acc:	dd 24       	eor	r13, r13
     ace:	d7 94       	ror	r13
     ad0:	8e 2f       	mov	r24, r30
     ad2:	86 95       	lsr	r24
     ad4:	49 2f       	mov	r20, r25
     ad6:	46 2b       	or	r20, r22
     ad8:	58 2f       	mov	r21, r24
     ada:	5d 29       	or	r21, r13
     adc:	b7 01       	movw	r22, r14
     ade:	ca 01       	movw	r24, r20
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	08 95       	ret

00000aec <__unpack_f>:
     aec:	fc 01       	movw	r30, r24
     aee:	db 01       	movw	r26, r22
     af0:	40 81       	ld	r20, Z
     af2:	51 81       	ldd	r21, Z+1	; 0x01
     af4:	22 81       	ldd	r18, Z+2	; 0x02
     af6:	62 2f       	mov	r22, r18
     af8:	6f 77       	andi	r22, 0x7F	; 127
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	22 1f       	adc	r18, r18
     afe:	22 27       	eor	r18, r18
     b00:	22 1f       	adc	r18, r18
     b02:	93 81       	ldd	r25, Z+3	; 0x03
     b04:	89 2f       	mov	r24, r25
     b06:	88 0f       	add	r24, r24
     b08:	82 2b       	or	r24, r18
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	99 1f       	adc	r25, r25
     b10:	99 27       	eor	r25, r25
     b12:	99 1f       	adc	r25, r25
     b14:	11 96       	adiw	r26, 0x01	; 1
     b16:	9c 93       	st	X, r25
     b18:	11 97       	sbiw	r26, 0x01	; 1
     b1a:	21 15       	cp	r18, r1
     b1c:	31 05       	cpc	r19, r1
     b1e:	a9 f5       	brne	.+106    	; 0xb8a <__unpack_f+0x9e>
     b20:	41 15       	cp	r20, r1
     b22:	51 05       	cpc	r21, r1
     b24:	61 05       	cpc	r22, r1
     b26:	71 05       	cpc	r23, r1
     b28:	11 f4       	brne	.+4      	; 0xb2e <__unpack_f+0x42>
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	37 c0       	rjmp	.+110    	; 0xb9c <__unpack_f+0xb0>
     b2e:	82 e8       	ldi	r24, 0x82	; 130
     b30:	9f ef       	ldi	r25, 0xFF	; 255
     b32:	13 96       	adiw	r26, 0x03	; 3
     b34:	9c 93       	st	X, r25
     b36:	8e 93       	st	-X, r24
     b38:	12 97       	sbiw	r26, 0x02	; 2
     b3a:	9a 01       	movw	r18, r20
     b3c:	ab 01       	movw	r20, r22
     b3e:	67 e0       	ldi	r22, 0x07	; 7
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	44 1f       	adc	r20, r20
     b46:	55 1f       	adc	r21, r21
     b48:	6a 95       	dec	r22
     b4a:	d1 f7       	brne	.-12     	; 0xb40 <__unpack_f+0x54>
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	8c 93       	st	X, r24
     b50:	0d c0       	rjmp	.+26     	; 0xb6c <__unpack_f+0x80>
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	12 96       	adiw	r26, 0x02	; 2
     b5c:	8d 91       	ld	r24, X+
     b5e:	9c 91       	ld	r25, X
     b60:	13 97       	sbiw	r26, 0x03	; 3
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	13 96       	adiw	r26, 0x03	; 3
     b66:	9c 93       	st	X, r25
     b68:	8e 93       	st	-X, r24
     b6a:	12 97       	sbiw	r26, 0x02	; 2
     b6c:	20 30       	cpi	r18, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	38 07       	cpc	r19, r24
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	48 07       	cpc	r20, r24
     b76:	80 e4       	ldi	r24, 0x40	; 64
     b78:	58 07       	cpc	r21, r24
     b7a:	58 f3       	brcs	.-42     	; 0xb52 <__unpack_f+0x66>
     b7c:	14 96       	adiw	r26, 0x04	; 4
     b7e:	2d 93       	st	X+, r18
     b80:	3d 93       	st	X+, r19
     b82:	4d 93       	st	X+, r20
     b84:	5c 93       	st	X, r21
     b86:	17 97       	sbiw	r26, 0x07	; 7
     b88:	08 95       	ret
     b8a:	2f 3f       	cpi	r18, 0xFF	; 255
     b8c:	31 05       	cpc	r19, r1
     b8e:	79 f4       	brne	.+30     	; 0xbae <__unpack_f+0xc2>
     b90:	41 15       	cp	r20, r1
     b92:	51 05       	cpc	r21, r1
     b94:	61 05       	cpc	r22, r1
     b96:	71 05       	cpc	r23, r1
     b98:	19 f4       	brne	.+6      	; 0xba0 <__unpack_f+0xb4>
     b9a:	84 e0       	ldi	r24, 0x04	; 4
     b9c:	8c 93       	st	X, r24
     b9e:	08 95       	ret
     ba0:	64 ff       	sbrs	r22, 4
     ba2:	03 c0       	rjmp	.+6      	; 0xbaa <__unpack_f+0xbe>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	8c 93       	st	X, r24
     ba8:	12 c0       	rjmp	.+36     	; 0xbce <__unpack_f+0xe2>
     baa:	1c 92       	st	X, r1
     bac:	10 c0       	rjmp	.+32     	; 0xbce <__unpack_f+0xe2>
     bae:	2f 57       	subi	r18, 0x7F	; 127
     bb0:	30 40       	sbci	r19, 0x00	; 0
     bb2:	13 96       	adiw	r26, 0x03	; 3
     bb4:	3c 93       	st	X, r19
     bb6:	2e 93       	st	-X, r18
     bb8:	12 97       	sbiw	r26, 0x02	; 2
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	8c 93       	st	X, r24
     bbe:	87 e0       	ldi	r24, 0x07	; 7
     bc0:	44 0f       	add	r20, r20
     bc2:	55 1f       	adc	r21, r21
     bc4:	66 1f       	adc	r22, r22
     bc6:	77 1f       	adc	r23, r23
     bc8:	8a 95       	dec	r24
     bca:	d1 f7       	brne	.-12     	; 0xbc0 <__unpack_f+0xd4>
     bcc:	70 64       	ori	r23, 0x40	; 64
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	4d 93       	st	X+, r20
     bd2:	5d 93       	st	X+, r21
     bd4:	6d 93       	st	X+, r22
     bd6:	7c 93       	st	X, r23
     bd8:	17 97       	sbiw	r26, 0x07	; 7
     bda:	08 95       	ret

00000bdc <__fpcmp_parts_f>:
     bdc:	1f 93       	push	r17
     bde:	dc 01       	movw	r26, r24
     be0:	fb 01       	movw	r30, r22
     be2:	9c 91       	ld	r25, X
     be4:	92 30       	cpi	r25, 0x02	; 2
     be6:	08 f4       	brcc	.+2      	; 0xbea <__fpcmp_parts_f+0xe>
     be8:	47 c0       	rjmp	.+142    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bea:	80 81       	ld	r24, Z
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	08 f4       	brcc	.+2      	; 0xbf2 <__fpcmp_parts_f+0x16>
     bf0:	43 c0       	rjmp	.+134    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bf2:	94 30       	cpi	r25, 0x04	; 4
     bf4:	51 f4       	brne	.+20     	; 0xc0a <__fpcmp_parts_f+0x2e>
     bf6:	11 96       	adiw	r26, 0x01	; 1
     bf8:	1c 91       	ld	r17, X
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	99 f5       	brne	.+102    	; 0xc64 <__fpcmp_parts_f+0x88>
     bfe:	81 81       	ldd	r24, Z+1	; 0x01
     c00:	68 2f       	mov	r22, r24
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	61 1b       	sub	r22, r17
     c06:	71 09       	sbc	r23, r1
     c08:	3f c0       	rjmp	.+126    	; 0xc88 <__fpcmp_parts_f+0xac>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	21 f0       	breq	.+8      	; 0xc16 <__fpcmp_parts_f+0x3a>
     c0e:	92 30       	cpi	r25, 0x02	; 2
     c10:	31 f4       	brne	.+12     	; 0xc1e <__fpcmp_parts_f+0x42>
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	b9 f1       	breq	.+110    	; 0xc84 <__fpcmp_parts_f+0xa8>
     c16:	81 81       	ldd	r24, Z+1	; 0x01
     c18:	88 23       	and	r24, r24
     c1a:	89 f1       	breq	.+98     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c1c:	2d c0       	rjmp	.+90     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	1c 91       	ld	r17, X
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	f1 f0       	breq	.+60     	; 0xc64 <__fpcmp_parts_f+0x88>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	18 17       	cp	r17, r24
     c2c:	d9 f4       	brne	.+54     	; 0xc64 <__fpcmp_parts_f+0x88>
     c2e:	12 96       	adiw	r26, 0x02	; 2
     c30:	2d 91       	ld	r18, X+
     c32:	3c 91       	ld	r19, X
     c34:	13 97       	sbiw	r26, 0x03	; 3
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	82 17       	cp	r24, r18
     c3c:	93 07       	cpc	r25, r19
     c3e:	94 f0       	brlt	.+36     	; 0xc64 <__fpcmp_parts_f+0x88>
     c40:	28 17       	cp	r18, r24
     c42:	39 07       	cpc	r19, r25
     c44:	bc f0       	brlt	.+46     	; 0xc74 <__fpcmp_parts_f+0x98>
     c46:	14 96       	adiw	r26, 0x04	; 4
     c48:	8d 91       	ld	r24, X+
     c4a:	9d 91       	ld	r25, X+
     c4c:	0d 90       	ld	r0, X+
     c4e:	bc 91       	ld	r27, X
     c50:	a0 2d       	mov	r26, r0
     c52:	24 81       	ldd	r18, Z+4	; 0x04
     c54:	35 81       	ldd	r19, Z+5	; 0x05
     c56:	46 81       	ldd	r20, Z+6	; 0x06
     c58:	57 81       	ldd	r21, Z+7	; 0x07
     c5a:	28 17       	cp	r18, r24
     c5c:	39 07       	cpc	r19, r25
     c5e:	4a 07       	cpc	r20, r26
     c60:	5b 07       	cpc	r21, r27
     c62:	18 f4       	brcc	.+6      	; 0xc6a <__fpcmp_parts_f+0x8e>
     c64:	11 23       	and	r17, r17
     c66:	41 f0       	breq	.+16     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c68:	0a c0       	rjmp	.+20     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c6a:	82 17       	cp	r24, r18
     c6c:	93 07       	cpc	r25, r19
     c6e:	a4 07       	cpc	r26, r20
     c70:	b5 07       	cpc	r27, r21
     c72:	40 f4       	brcc	.+16     	; 0xc84 <__fpcmp_parts_f+0xa8>
     c74:	11 23       	and	r17, r17
     c76:	19 f0       	breq	.+6      	; 0xc7e <__fpcmp_parts_f+0xa2>
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__fpcmp_parts_f+0xac>
     c7e:	6f ef       	ldi	r22, 0xFF	; 255
     c80:	7f ef       	ldi	r23, 0xFF	; 255
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <__fpcmp_parts_f+0xac>
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	cb 01       	movw	r24, r22
     c8a:	1f 91       	pop	r17
     c8c:	08 95       	ret

00000c8e <ADC_INIT>:
#include "ADC_INT.h"
#include "ADC_REG.h"
#include "Utilities.h"
#include "Std_Types.h"

void ADC_INIT() {
     c8e:	df 93       	push	r29
     c90:	cf 93       	push	r28
     c92:	cd b7       	in	r28, 0x3d	; 61
     c94:	de b7       	in	r29, 0x3e	; 62
	// select v reference
	// external capacitor at AREF pin
	SET_BIT(ADMUX, 6);
     c96:	a7 e2       	ldi	r26, 0x27	; 39
     c98:	b0 e0       	ldi	r27, 0x00	; 0
     c9a:	e7 e2       	ldi	r30, 0x27	; 39
     c9c:	f0 e0       	ldi	r31, 0x00	; 0
     c9e:	80 81       	ld	r24, Z
     ca0:	80 64       	ori	r24, 0x40	; 64
     ca2:	8c 93       	st	X, r24
	CLR_BIT(ADMUX, 7);
     ca4:	a7 e2       	ldi	r26, 0x27	; 39
     ca6:	b0 e0       	ldi	r27, 0x00	; 0
     ca8:	e7 e2       	ldi	r30, 0x27	; 39
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	80 81       	ld	r24, Z
     cae:	8f 77       	andi	r24, 0x7F	; 127
     cb0:	8c 93       	st	X, r24

	//right adjust
	CLR_BIT(ADMUX, 5);
     cb2:	a7 e2       	ldi	r26, 0x27	; 39
     cb4:	b0 e0       	ldi	r27, 0x00	; 0
     cb6:	e7 e2       	ldi	r30, 0x27	; 39
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	80 81       	ld	r24, Z
     cbc:	8f 7d       	andi	r24, 0xDF	; 223
     cbe:	8c 93       	st	X, r24

	CLR_BIT(ADMUX, 0);
     cc0:	a7 e2       	ldi	r26, 0x27	; 39
     cc2:	b0 e0       	ldi	r27, 0x00	; 0
     cc4:	e7 e2       	ldi	r30, 0x27	; 39
     cc6:	f0 e0       	ldi	r31, 0x00	; 0
     cc8:	80 81       	ld	r24, Z
     cca:	8e 7f       	andi	r24, 0xFE	; 254
     ccc:	8c 93       	st	X, r24
	CLR_BIT(ADMUX, 1);
     cce:	a7 e2       	ldi	r26, 0x27	; 39
     cd0:	b0 e0       	ldi	r27, 0x00	; 0
     cd2:	e7 e2       	ldi	r30, 0x27	; 39
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	80 81       	ld	r24, Z
     cd8:	8d 7f       	andi	r24, 0xFD	; 253
     cda:	8c 93       	st	X, r24
	CLR_BIT(ADMUX, 2);
     cdc:	a7 e2       	ldi	r26, 0x27	; 39
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	e7 e2       	ldi	r30, 0x27	; 39
     ce2:	f0 e0       	ldi	r31, 0x00	; 0
     ce4:	80 81       	ld	r24, Z
     ce6:	8b 7f       	andi	r24, 0xFB	; 251
     ce8:	8c 93       	st	X, r24
	CLR_BIT(ADMUX, 3);
     cea:	a7 e2       	ldi	r26, 0x27	; 39
     cec:	b0 e0       	ldi	r27, 0x00	; 0
     cee:	e7 e2       	ldi	r30, 0x27	; 39
     cf0:	f0 e0       	ldi	r31, 0x00	; 0
     cf2:	80 81       	ld	r24, Z
     cf4:	87 7f       	andi	r24, 0xF7	; 247
     cf6:	8c 93       	st	X, r24
	CLR_BIT(ADMUX, 4);
     cf8:	a7 e2       	ldi	r26, 0x27	; 39
     cfa:	b0 e0       	ldi	r27, 0x00	; 0
     cfc:	e7 e2       	ldi	r30, 0x27	; 39
     cfe:	f0 e0       	ldi	r31, 0x00	; 0
     d00:	80 81       	ld	r24, Z
     d02:	8f 7e       	andi	r24, 0xEF	; 239
     d04:	8c 93       	st	X, r24
	//Enable ADC
	SET_BIT(ADCSRA, 7);
     d06:	a6 e2       	ldi	r26, 0x26	; 38
     d08:	b0 e0       	ldi	r27, 0x00	; 0
     d0a:	e6 e2       	ldi	r30, 0x26	; 38
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	80 81       	ld	r24, Z
     d10:	80 68       	ori	r24, 0x80	; 128
     d12:	8c 93       	st	X, r24

	//ADC prescaler 8
	SET_BIT(ADCSRA, 0);
     d14:	a6 e2       	ldi	r26, 0x26	; 38
     d16:	b0 e0       	ldi	r27, 0x00	; 0
     d18:	e6 e2       	ldi	r30, 0x26	; 38
     d1a:	f0 e0       	ldi	r31, 0x00	; 0
     d1c:	80 81       	ld	r24, Z
     d1e:	81 60       	ori	r24, 0x01	; 1
     d20:	8c 93       	st	X, r24
	SET_BIT(ADCSRA, 1);
     d22:	a6 e2       	ldi	r26, 0x26	; 38
     d24:	b0 e0       	ldi	r27, 0x00	; 0
     d26:	e6 e2       	ldi	r30, 0x26	; 38
     d28:	f0 e0       	ldi	r31, 0x00	; 0
     d2a:	80 81       	ld	r24, Z
     d2c:	82 60       	ori	r24, 0x02	; 2
     d2e:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA, 2);
     d30:	a6 e2       	ldi	r26, 0x26	; 38
     d32:	b0 e0       	ldi	r27, 0x00	; 0
     d34:	e6 e2       	ldi	r30, 0x26	; 38
     d36:	f0 e0       	ldi	r31, 0x00	; 0
     d38:	80 81       	ld	r24, Z
     d3a:	8b 7f       	andi	r24, 0xFB	; 251
     d3c:	8c 93       	st	X, r24

}
     d3e:	cf 91       	pop	r28
     d40:	df 91       	pop	r29
     d42:	08 95       	ret

00000d44 <ADC_Read>:

u16 ADC_Read(void) {
     d44:	df 93       	push	r29
     d46:	cf 93       	push	r28
     d48:	00 d0       	rcall	.+0      	; 0xd4a <ADC_Read+0x6>
     d4a:	cd b7       	in	r28, 0x3d	; 61
     d4c:	de b7       	in	r29, 0x3e	; 62

	u16 readValue = 0;
     d4e:	1a 82       	std	Y+2, r1	; 0x02
     d50:	19 82       	std	Y+1, r1	; 0x01

	// start conversion
	SET_BIT(ADCSRA, 6);
     d52:	a6 e2       	ldi	r26, 0x26	; 38
     d54:	b0 e0       	ldi	r27, 0x00	; 0
     d56:	e6 e2       	ldi	r30, 0x26	; 38
     d58:	f0 e0       	ldi	r31, 0x00	; 0
     d5a:	80 81       	ld	r24, Z
     d5c:	80 64       	ori	r24, 0x40	; 64
     d5e:	8c 93       	st	X, r24

	// looping until conversion complete
	while ((GET_BIT(ADCSRA, 4)) == 0)
     d60:	e6 e2       	ldi	r30, 0x26	; 38
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	80 81       	ld	r24, Z
     d66:	82 95       	swap	r24
     d68:	8f 70       	andi	r24, 0x0F	; 15
     d6a:	88 2f       	mov	r24, r24
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	81 70       	andi	r24, 0x01	; 1
     d70:	90 70       	andi	r25, 0x00	; 0
     d72:	00 97       	sbiw	r24, 0x00	; 0
     d74:	a9 f3       	breq	.-22     	; 0xd60 <ADC_Read+0x1c>
		;

	SET_BIT(ADCSRA, 4); // to disable flag : set it bit
     d76:	a6 e2       	ldi	r26, 0x26	; 38
     d78:	b0 e0       	ldi	r27, 0x00	; 0
     d7a:	e6 e2       	ldi	r30, 0x26	; 38
     d7c:	f0 e0       	ldi	r31, 0x00	; 0
     d7e:	80 81       	ld	r24, Z
     d80:	80 61       	ori	r24, 0x10	; 16
     d82:	8c 93       	st	X, r24

	readValue = (u16) ADCL;
     d84:	e4 e2       	ldi	r30, 0x24	; 36
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	80 81       	ld	r24, Z
     d8a:	88 2f       	mov	r24, r24
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	9a 83       	std	Y+2, r25	; 0x02
     d90:	89 83       	std	Y+1, r24	; 0x01

	return ((ADCH << 8) | readValue);
     d92:	e5 e2       	ldi	r30, 0x25	; 37
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	80 81       	ld	r24, Z
     d98:	88 2f       	mov	r24, r24
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	98 2f       	mov	r25, r24
     d9e:	88 27       	eor	r24, r24
     da0:	9c 01       	movw	r18, r24
     da2:	89 81       	ldd	r24, Y+1	; 0x01
     da4:	9a 81       	ldd	r25, Y+2	; 0x02
     da6:	82 2b       	or	r24, r18
     da8:	93 2b       	or	r25, r19
}
     daa:	0f 90       	pop	r0
     dac:	0f 90       	pop	r0
     dae:	cf 91       	pop	r28
     db0:	df 91       	pop	r29
     db2:	08 95       	ret

00000db4 <Dio_SetPinDirection>:
#include "Dio_Reg.h"
#include "Dio_Int.h"
#include "Utilities.h"

void Dio_SetPinDirection(u8 GroupNo, u8 PinNo, u8 Direction)
{
     db4:	df 93       	push	r29
     db6:	cf 93       	push	r28
     db8:	cd b7       	in	r28, 0x3d	; 61
     dba:	de b7       	in	r29, 0x3e	; 62
     dbc:	27 97       	sbiw	r28, 0x07	; 7
     dbe:	0f b6       	in	r0, 0x3f	; 63
     dc0:	f8 94       	cli
     dc2:	de bf       	out	0x3e, r29	; 62
     dc4:	0f be       	out	0x3f, r0	; 63
     dc6:	cd bf       	out	0x3d, r28	; 61
     dc8:	89 83       	std	Y+1, r24	; 0x01
     dca:	6a 83       	std	Y+2, r22	; 0x02
     dcc:	4b 83       	std	Y+3, r20	; 0x03
	if((GroupNo<=GroupD)&&(PinNo<=PIN7))
     dce:	89 81       	ldd	r24, Y+1	; 0x01
     dd0:	84 30       	cpi	r24, 0x04	; 4
     dd2:	08 f0       	brcs	.+2      	; 0xdd6 <Dio_SetPinDirection+0x22>
     dd4:	ed c0       	rjmp	.+474    	; 0xfb0 <Dio_SetPinDirection+0x1fc>
     dd6:	8a 81       	ldd	r24, Y+2	; 0x02
     dd8:	88 30       	cpi	r24, 0x08	; 8
     dda:	08 f0       	brcs	.+2      	; 0xdde <Dio_SetPinDirection+0x2a>
     ddc:	e9 c0       	rjmp	.+466    	; 0xfb0 <Dio_SetPinDirection+0x1fc>
	{
	if(Direction==INPUT)
     dde:	8b 81       	ldd	r24, Y+3	; 0x03
     de0:	88 23       	and	r24, r24
     de2:	09 f0       	breq	.+2      	; 0xde6 <Dio_SetPinDirection+0x32>
     de4:	73 c0       	rjmp	.+230    	; 0xecc <Dio_SetPinDirection+0x118>
	{
		switch(GroupNo)
     de6:	89 81       	ldd	r24, Y+1	; 0x01
     de8:	28 2f       	mov	r18, r24
     dea:	30 e0       	ldi	r19, 0x00	; 0
     dec:	3f 83       	std	Y+7, r19	; 0x07
     dee:	2e 83       	std	Y+6, r18	; 0x06
     df0:	8e 81       	ldd	r24, Y+6	; 0x06
     df2:	9f 81       	ldd	r25, Y+7	; 0x07
     df4:	81 30       	cpi	r24, 0x01	; 1
     df6:	91 05       	cpc	r25, r1
     df8:	59 f1       	breq	.+86     	; 0xe50 <Dio_SetPinDirection+0x9c>
     dfa:	2e 81       	ldd	r18, Y+6	; 0x06
     dfc:	3f 81       	ldd	r19, Y+7	; 0x07
     dfe:	22 30       	cpi	r18, 0x02	; 2
     e00:	31 05       	cpc	r19, r1
     e02:	2c f4       	brge	.+10     	; 0xe0e <Dio_SetPinDirection+0x5a>
     e04:	8e 81       	ldd	r24, Y+6	; 0x06
     e06:	9f 81       	ldd	r25, Y+7	; 0x07
     e08:	00 97       	sbiw	r24, 0x00	; 0
     e0a:	69 f0       	breq	.+26     	; 0xe26 <Dio_SetPinDirection+0x72>
     e0c:	5f c0       	rjmp	.+190    	; 0xecc <Dio_SetPinDirection+0x118>
     e0e:	2e 81       	ldd	r18, Y+6	; 0x06
     e10:	3f 81       	ldd	r19, Y+7	; 0x07
     e12:	22 30       	cpi	r18, 0x02	; 2
     e14:	31 05       	cpc	r19, r1
     e16:	89 f1       	breq	.+98     	; 0xe7a <Dio_SetPinDirection+0xc6>
     e18:	8e 81       	ldd	r24, Y+6	; 0x06
     e1a:	9f 81       	ldd	r25, Y+7	; 0x07
     e1c:	83 30       	cpi	r24, 0x03	; 3
     e1e:	91 05       	cpc	r25, r1
     e20:	09 f4       	brne	.+2      	; 0xe24 <Dio_SetPinDirection+0x70>
     e22:	40 c0       	rjmp	.+128    	; 0xea4 <Dio_SetPinDirection+0xf0>
     e24:	53 c0       	rjmp	.+166    	; 0xecc <Dio_SetPinDirection+0x118>
		{
		case GroupA: CLR_BIT(DDRA, PinNo); break;
     e26:	aa e3       	ldi	r26, 0x3A	; 58
     e28:	b0 e0       	ldi	r27, 0x00	; 0
     e2a:	ea e3       	ldi	r30, 0x3A	; 58
     e2c:	f0 e0       	ldi	r31, 0x00	; 0
     e2e:	80 81       	ld	r24, Z
     e30:	48 2f       	mov	r20, r24
     e32:	8a 81       	ldd	r24, Y+2	; 0x02
     e34:	28 2f       	mov	r18, r24
     e36:	30 e0       	ldi	r19, 0x00	; 0
     e38:	81 e0       	ldi	r24, 0x01	; 1
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	02 2e       	mov	r0, r18
     e3e:	02 c0       	rjmp	.+4      	; 0xe44 <Dio_SetPinDirection+0x90>
     e40:	88 0f       	add	r24, r24
     e42:	99 1f       	adc	r25, r25
     e44:	0a 94       	dec	r0
     e46:	e2 f7       	brpl	.-8      	; 0xe40 <Dio_SetPinDirection+0x8c>
     e48:	80 95       	com	r24
     e4a:	84 23       	and	r24, r20
     e4c:	8c 93       	st	X, r24
     e4e:	3e c0       	rjmp	.+124    	; 0xecc <Dio_SetPinDirection+0x118>
		case GroupB: CLR_BIT(DDRB, PinNo); break;
     e50:	a7 e3       	ldi	r26, 0x37	; 55
     e52:	b0 e0       	ldi	r27, 0x00	; 0
     e54:	e7 e3       	ldi	r30, 0x37	; 55
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	80 81       	ld	r24, Z
     e5a:	48 2f       	mov	r20, r24
     e5c:	8a 81       	ldd	r24, Y+2	; 0x02
     e5e:	28 2f       	mov	r18, r24
     e60:	30 e0       	ldi	r19, 0x00	; 0
     e62:	81 e0       	ldi	r24, 0x01	; 1
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	02 2e       	mov	r0, r18
     e68:	02 c0       	rjmp	.+4      	; 0xe6e <Dio_SetPinDirection+0xba>
     e6a:	88 0f       	add	r24, r24
     e6c:	99 1f       	adc	r25, r25
     e6e:	0a 94       	dec	r0
     e70:	e2 f7       	brpl	.-8      	; 0xe6a <Dio_SetPinDirection+0xb6>
     e72:	80 95       	com	r24
     e74:	84 23       	and	r24, r20
     e76:	8c 93       	st	X, r24
     e78:	29 c0       	rjmp	.+82     	; 0xecc <Dio_SetPinDirection+0x118>
		case GroupC: CLR_BIT(DDRC, PinNo); break;
     e7a:	a4 e3       	ldi	r26, 0x34	; 52
     e7c:	b0 e0       	ldi	r27, 0x00	; 0
     e7e:	e4 e3       	ldi	r30, 0x34	; 52
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	80 81       	ld	r24, Z
     e84:	48 2f       	mov	r20, r24
     e86:	8a 81       	ldd	r24, Y+2	; 0x02
     e88:	28 2f       	mov	r18, r24
     e8a:	30 e0       	ldi	r19, 0x00	; 0
     e8c:	81 e0       	ldi	r24, 0x01	; 1
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	02 2e       	mov	r0, r18
     e92:	02 c0       	rjmp	.+4      	; 0xe98 <Dio_SetPinDirection+0xe4>
     e94:	88 0f       	add	r24, r24
     e96:	99 1f       	adc	r25, r25
     e98:	0a 94       	dec	r0
     e9a:	e2 f7       	brpl	.-8      	; 0xe94 <Dio_SetPinDirection+0xe0>
     e9c:	80 95       	com	r24
     e9e:	84 23       	and	r24, r20
     ea0:	8c 93       	st	X, r24
     ea2:	14 c0       	rjmp	.+40     	; 0xecc <Dio_SetPinDirection+0x118>
		case GroupD: CLR_BIT(DDRD, PinNo); break;
     ea4:	a1 e3       	ldi	r26, 0x31	; 49
     ea6:	b0 e0       	ldi	r27, 0x00	; 0
     ea8:	e1 e3       	ldi	r30, 0x31	; 49
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	80 81       	ld	r24, Z
     eae:	48 2f       	mov	r20, r24
     eb0:	8a 81       	ldd	r24, Y+2	; 0x02
     eb2:	28 2f       	mov	r18, r24
     eb4:	30 e0       	ldi	r19, 0x00	; 0
     eb6:	81 e0       	ldi	r24, 0x01	; 1
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	02 2e       	mov	r0, r18
     ebc:	02 c0       	rjmp	.+4      	; 0xec2 <Dio_SetPinDirection+0x10e>
     ebe:	88 0f       	add	r24, r24
     ec0:	99 1f       	adc	r25, r25
     ec2:	0a 94       	dec	r0
     ec4:	e2 f7       	brpl	.-8      	; 0xebe <Dio_SetPinDirection+0x10a>
     ec6:	80 95       	com	r24
     ec8:	84 23       	and	r24, r20
     eca:	8c 93       	st	X, r24
		}
	}
	if(Direction==OUTPUT)
     ecc:	8b 81       	ldd	r24, Y+3	; 0x03
     ece:	81 30       	cpi	r24, 0x01	; 1
     ed0:	09 f0       	breq	.+2      	; 0xed4 <Dio_SetPinDirection+0x120>
     ed2:	6e c0       	rjmp	.+220    	; 0xfb0 <Dio_SetPinDirection+0x1fc>
	{
		switch(GroupNo)
     ed4:	89 81       	ldd	r24, Y+1	; 0x01
     ed6:	28 2f       	mov	r18, r24
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	3d 83       	std	Y+5, r19	; 0x05
     edc:	2c 83       	std	Y+4, r18	; 0x04
     ede:	8c 81       	ldd	r24, Y+4	; 0x04
     ee0:	9d 81       	ldd	r25, Y+5	; 0x05
     ee2:	81 30       	cpi	r24, 0x01	; 1
     ee4:	91 05       	cpc	r25, r1
     ee6:	49 f1       	breq	.+82     	; 0xf3a <Dio_SetPinDirection+0x186>
     ee8:	2c 81       	ldd	r18, Y+4	; 0x04
     eea:	3d 81       	ldd	r19, Y+5	; 0x05
     eec:	22 30       	cpi	r18, 0x02	; 2
     eee:	31 05       	cpc	r19, r1
     ef0:	2c f4       	brge	.+10     	; 0xefc <Dio_SetPinDirection+0x148>
     ef2:	8c 81       	ldd	r24, Y+4	; 0x04
     ef4:	9d 81       	ldd	r25, Y+5	; 0x05
     ef6:	00 97       	sbiw	r24, 0x00	; 0
     ef8:	61 f0       	breq	.+24     	; 0xf12 <Dio_SetPinDirection+0x15e>
     efa:	5a c0       	rjmp	.+180    	; 0xfb0 <Dio_SetPinDirection+0x1fc>
     efc:	2c 81       	ldd	r18, Y+4	; 0x04
     efe:	3d 81       	ldd	r19, Y+5	; 0x05
     f00:	22 30       	cpi	r18, 0x02	; 2
     f02:	31 05       	cpc	r19, r1
     f04:	71 f1       	breq	.+92     	; 0xf62 <Dio_SetPinDirection+0x1ae>
     f06:	8c 81       	ldd	r24, Y+4	; 0x04
     f08:	9d 81       	ldd	r25, Y+5	; 0x05
     f0a:	83 30       	cpi	r24, 0x03	; 3
     f0c:	91 05       	cpc	r25, r1
     f0e:	e9 f1       	breq	.+122    	; 0xf8a <Dio_SetPinDirection+0x1d6>
     f10:	4f c0       	rjmp	.+158    	; 0xfb0 <Dio_SetPinDirection+0x1fc>
		{
		case GroupA: SET_BIT(DDRA, PinNo); break;
     f12:	aa e3       	ldi	r26, 0x3A	; 58
     f14:	b0 e0       	ldi	r27, 0x00	; 0
     f16:	ea e3       	ldi	r30, 0x3A	; 58
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	80 81       	ld	r24, Z
     f1c:	48 2f       	mov	r20, r24
     f1e:	8a 81       	ldd	r24, Y+2	; 0x02
     f20:	28 2f       	mov	r18, r24
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	81 e0       	ldi	r24, 0x01	; 1
     f26:	90 e0       	ldi	r25, 0x00	; 0
     f28:	02 2e       	mov	r0, r18
     f2a:	02 c0       	rjmp	.+4      	; 0xf30 <Dio_SetPinDirection+0x17c>
     f2c:	88 0f       	add	r24, r24
     f2e:	99 1f       	adc	r25, r25
     f30:	0a 94       	dec	r0
     f32:	e2 f7       	brpl	.-8      	; 0xf2c <Dio_SetPinDirection+0x178>
     f34:	84 2b       	or	r24, r20
     f36:	8c 93       	st	X, r24
     f38:	3b c0       	rjmp	.+118    	; 0xfb0 <Dio_SetPinDirection+0x1fc>
		case GroupB: SET_BIT(DDRB, PinNo); break;
     f3a:	a7 e3       	ldi	r26, 0x37	; 55
     f3c:	b0 e0       	ldi	r27, 0x00	; 0
     f3e:	e7 e3       	ldi	r30, 0x37	; 55
     f40:	f0 e0       	ldi	r31, 0x00	; 0
     f42:	80 81       	ld	r24, Z
     f44:	48 2f       	mov	r20, r24
     f46:	8a 81       	ldd	r24, Y+2	; 0x02
     f48:	28 2f       	mov	r18, r24
     f4a:	30 e0       	ldi	r19, 0x00	; 0
     f4c:	81 e0       	ldi	r24, 0x01	; 1
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	02 2e       	mov	r0, r18
     f52:	02 c0       	rjmp	.+4      	; 0xf58 <Dio_SetPinDirection+0x1a4>
     f54:	88 0f       	add	r24, r24
     f56:	99 1f       	adc	r25, r25
     f58:	0a 94       	dec	r0
     f5a:	e2 f7       	brpl	.-8      	; 0xf54 <Dio_SetPinDirection+0x1a0>
     f5c:	84 2b       	or	r24, r20
     f5e:	8c 93       	st	X, r24
     f60:	27 c0       	rjmp	.+78     	; 0xfb0 <Dio_SetPinDirection+0x1fc>
		case GroupC: SET_BIT(DDRC, PinNo); break;
     f62:	a4 e3       	ldi	r26, 0x34	; 52
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	e4 e3       	ldi	r30, 0x34	; 52
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	80 81       	ld	r24, Z
     f6c:	48 2f       	mov	r20, r24
     f6e:	8a 81       	ldd	r24, Y+2	; 0x02
     f70:	28 2f       	mov	r18, r24
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	81 e0       	ldi	r24, 0x01	; 1
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	02 2e       	mov	r0, r18
     f7a:	02 c0       	rjmp	.+4      	; 0xf80 <Dio_SetPinDirection+0x1cc>
     f7c:	88 0f       	add	r24, r24
     f7e:	99 1f       	adc	r25, r25
     f80:	0a 94       	dec	r0
     f82:	e2 f7       	brpl	.-8      	; 0xf7c <Dio_SetPinDirection+0x1c8>
     f84:	84 2b       	or	r24, r20
     f86:	8c 93       	st	X, r24
     f88:	13 c0       	rjmp	.+38     	; 0xfb0 <Dio_SetPinDirection+0x1fc>
		case GroupD: SET_BIT(DDRD, PinNo); break;
     f8a:	a1 e3       	ldi	r26, 0x31	; 49
     f8c:	b0 e0       	ldi	r27, 0x00	; 0
     f8e:	e1 e3       	ldi	r30, 0x31	; 49
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	80 81       	ld	r24, Z
     f94:	48 2f       	mov	r20, r24
     f96:	8a 81       	ldd	r24, Y+2	; 0x02
     f98:	28 2f       	mov	r18, r24
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	81 e0       	ldi	r24, 0x01	; 1
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	02 2e       	mov	r0, r18
     fa2:	02 c0       	rjmp	.+4      	; 0xfa8 <Dio_SetPinDirection+0x1f4>
     fa4:	88 0f       	add	r24, r24
     fa6:	99 1f       	adc	r25, r25
     fa8:	0a 94       	dec	r0
     faa:	e2 f7       	brpl	.-8      	; 0xfa4 <Dio_SetPinDirection+0x1f0>
     fac:	84 2b       	or	r24, r20
     fae:	8c 93       	st	X, r24
	else
	{
		//not reachable
	}

}
     fb0:	27 96       	adiw	r28, 0x07	; 7
     fb2:	0f b6       	in	r0, 0x3f	; 63
     fb4:	f8 94       	cli
     fb6:	de bf       	out	0x3e, r29	; 62
     fb8:	0f be       	out	0x3f, r0	; 63
     fba:	cd bf       	out	0x3d, r28	; 61
     fbc:	cf 91       	pop	r28
     fbe:	df 91       	pop	r29
     fc0:	08 95       	ret

00000fc2 <Dio_SetPinValue>:
void Dio_SetPinValue(u8 GroupNo, u8 PinNo, u8 Value)
{
     fc2:	df 93       	push	r29
     fc4:	cf 93       	push	r28
     fc6:	cd b7       	in	r28, 0x3d	; 61
     fc8:	de b7       	in	r29, 0x3e	; 62
     fca:	27 97       	sbiw	r28, 0x07	; 7
     fcc:	0f b6       	in	r0, 0x3f	; 63
     fce:	f8 94       	cli
     fd0:	de bf       	out	0x3e, r29	; 62
     fd2:	0f be       	out	0x3f, r0	; 63
     fd4:	cd bf       	out	0x3d, r28	; 61
     fd6:	89 83       	std	Y+1, r24	; 0x01
     fd8:	6a 83       	std	Y+2, r22	; 0x02
     fda:	4b 83       	std	Y+3, r20	; 0x03
	if(Value==LOW)
     fdc:	8b 81       	ldd	r24, Y+3	; 0x03
     fde:	88 23       	and	r24, r24
     fe0:	09 f0       	breq	.+2      	; 0xfe4 <Dio_SetPinValue+0x22>
     fe2:	73 c0       	rjmp	.+230    	; 0x10ca <Dio_SetPinValue+0x108>
		{
			switch(GroupNo)
     fe4:	89 81       	ldd	r24, Y+1	; 0x01
     fe6:	28 2f       	mov	r18, r24
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	3f 83       	std	Y+7, r19	; 0x07
     fec:	2e 83       	std	Y+6, r18	; 0x06
     fee:	8e 81       	ldd	r24, Y+6	; 0x06
     ff0:	9f 81       	ldd	r25, Y+7	; 0x07
     ff2:	81 30       	cpi	r24, 0x01	; 1
     ff4:	91 05       	cpc	r25, r1
     ff6:	59 f1       	breq	.+86     	; 0x104e <Dio_SetPinValue+0x8c>
     ff8:	2e 81       	ldd	r18, Y+6	; 0x06
     ffa:	3f 81       	ldd	r19, Y+7	; 0x07
     ffc:	22 30       	cpi	r18, 0x02	; 2
     ffe:	31 05       	cpc	r19, r1
    1000:	2c f4       	brge	.+10     	; 0x100c <Dio_SetPinValue+0x4a>
    1002:	8e 81       	ldd	r24, Y+6	; 0x06
    1004:	9f 81       	ldd	r25, Y+7	; 0x07
    1006:	00 97       	sbiw	r24, 0x00	; 0
    1008:	69 f0       	breq	.+26     	; 0x1024 <Dio_SetPinValue+0x62>
    100a:	5f c0       	rjmp	.+190    	; 0x10ca <Dio_SetPinValue+0x108>
    100c:	2e 81       	ldd	r18, Y+6	; 0x06
    100e:	3f 81       	ldd	r19, Y+7	; 0x07
    1010:	22 30       	cpi	r18, 0x02	; 2
    1012:	31 05       	cpc	r19, r1
    1014:	89 f1       	breq	.+98     	; 0x1078 <Dio_SetPinValue+0xb6>
    1016:	8e 81       	ldd	r24, Y+6	; 0x06
    1018:	9f 81       	ldd	r25, Y+7	; 0x07
    101a:	83 30       	cpi	r24, 0x03	; 3
    101c:	91 05       	cpc	r25, r1
    101e:	09 f4       	brne	.+2      	; 0x1022 <Dio_SetPinValue+0x60>
    1020:	40 c0       	rjmp	.+128    	; 0x10a2 <Dio_SetPinValue+0xe0>
    1022:	53 c0       	rjmp	.+166    	; 0x10ca <Dio_SetPinValue+0x108>
			{
			case GroupA: CLR_BIT(PORTA, PinNo); break;
    1024:	ab e3       	ldi	r26, 0x3B	; 59
    1026:	b0 e0       	ldi	r27, 0x00	; 0
    1028:	eb e3       	ldi	r30, 0x3B	; 59
    102a:	f0 e0       	ldi	r31, 0x00	; 0
    102c:	80 81       	ld	r24, Z
    102e:	48 2f       	mov	r20, r24
    1030:	8a 81       	ldd	r24, Y+2	; 0x02
    1032:	28 2f       	mov	r18, r24
    1034:	30 e0       	ldi	r19, 0x00	; 0
    1036:	81 e0       	ldi	r24, 0x01	; 1
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	02 2e       	mov	r0, r18
    103c:	02 c0       	rjmp	.+4      	; 0x1042 <Dio_SetPinValue+0x80>
    103e:	88 0f       	add	r24, r24
    1040:	99 1f       	adc	r25, r25
    1042:	0a 94       	dec	r0
    1044:	e2 f7       	brpl	.-8      	; 0x103e <Dio_SetPinValue+0x7c>
    1046:	80 95       	com	r24
    1048:	84 23       	and	r24, r20
    104a:	8c 93       	st	X, r24
    104c:	3e c0       	rjmp	.+124    	; 0x10ca <Dio_SetPinValue+0x108>
			case GroupB: CLR_BIT(PORTB, PinNo); break;
    104e:	a8 e3       	ldi	r26, 0x38	; 56
    1050:	b0 e0       	ldi	r27, 0x00	; 0
    1052:	e8 e3       	ldi	r30, 0x38	; 56
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	80 81       	ld	r24, Z
    1058:	48 2f       	mov	r20, r24
    105a:	8a 81       	ldd	r24, Y+2	; 0x02
    105c:	28 2f       	mov	r18, r24
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	81 e0       	ldi	r24, 0x01	; 1
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	02 2e       	mov	r0, r18
    1066:	02 c0       	rjmp	.+4      	; 0x106c <Dio_SetPinValue+0xaa>
    1068:	88 0f       	add	r24, r24
    106a:	99 1f       	adc	r25, r25
    106c:	0a 94       	dec	r0
    106e:	e2 f7       	brpl	.-8      	; 0x1068 <Dio_SetPinValue+0xa6>
    1070:	80 95       	com	r24
    1072:	84 23       	and	r24, r20
    1074:	8c 93       	st	X, r24
    1076:	29 c0       	rjmp	.+82     	; 0x10ca <Dio_SetPinValue+0x108>
			case GroupC: CLR_BIT(PORTC, PinNo); break;
    1078:	a5 e3       	ldi	r26, 0x35	; 53
    107a:	b0 e0       	ldi	r27, 0x00	; 0
    107c:	e5 e3       	ldi	r30, 0x35	; 53
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	80 81       	ld	r24, Z
    1082:	48 2f       	mov	r20, r24
    1084:	8a 81       	ldd	r24, Y+2	; 0x02
    1086:	28 2f       	mov	r18, r24
    1088:	30 e0       	ldi	r19, 0x00	; 0
    108a:	81 e0       	ldi	r24, 0x01	; 1
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	02 2e       	mov	r0, r18
    1090:	02 c0       	rjmp	.+4      	; 0x1096 <Dio_SetPinValue+0xd4>
    1092:	88 0f       	add	r24, r24
    1094:	99 1f       	adc	r25, r25
    1096:	0a 94       	dec	r0
    1098:	e2 f7       	brpl	.-8      	; 0x1092 <Dio_SetPinValue+0xd0>
    109a:	80 95       	com	r24
    109c:	84 23       	and	r24, r20
    109e:	8c 93       	st	X, r24
    10a0:	14 c0       	rjmp	.+40     	; 0x10ca <Dio_SetPinValue+0x108>
			case GroupD: CLR_BIT(PORTD, PinNo); break;
    10a2:	a2 e3       	ldi	r26, 0x32	; 50
    10a4:	b0 e0       	ldi	r27, 0x00	; 0
    10a6:	e2 e3       	ldi	r30, 0x32	; 50
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	80 81       	ld	r24, Z
    10ac:	48 2f       	mov	r20, r24
    10ae:	8a 81       	ldd	r24, Y+2	; 0x02
    10b0:	28 2f       	mov	r18, r24
    10b2:	30 e0       	ldi	r19, 0x00	; 0
    10b4:	81 e0       	ldi	r24, 0x01	; 1
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	02 2e       	mov	r0, r18
    10ba:	02 c0       	rjmp	.+4      	; 0x10c0 <Dio_SetPinValue+0xfe>
    10bc:	88 0f       	add	r24, r24
    10be:	99 1f       	adc	r25, r25
    10c0:	0a 94       	dec	r0
    10c2:	e2 f7       	brpl	.-8      	; 0x10bc <Dio_SetPinValue+0xfa>
    10c4:	80 95       	com	r24
    10c6:	84 23       	and	r24, r20
    10c8:	8c 93       	st	X, r24
			}
		}
		if(Value==HIGH)
    10ca:	8b 81       	ldd	r24, Y+3	; 0x03
    10cc:	81 30       	cpi	r24, 0x01	; 1
    10ce:	09 f0       	breq	.+2      	; 0x10d2 <Dio_SetPinValue+0x110>
    10d0:	6e c0       	rjmp	.+220    	; 0x11ae <Dio_SetPinValue+0x1ec>
		{
			switch(GroupNo)
    10d2:	89 81       	ldd	r24, Y+1	; 0x01
    10d4:	28 2f       	mov	r18, r24
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	3d 83       	std	Y+5, r19	; 0x05
    10da:	2c 83       	std	Y+4, r18	; 0x04
    10dc:	8c 81       	ldd	r24, Y+4	; 0x04
    10de:	9d 81       	ldd	r25, Y+5	; 0x05
    10e0:	81 30       	cpi	r24, 0x01	; 1
    10e2:	91 05       	cpc	r25, r1
    10e4:	49 f1       	breq	.+82     	; 0x1138 <Dio_SetPinValue+0x176>
    10e6:	2c 81       	ldd	r18, Y+4	; 0x04
    10e8:	3d 81       	ldd	r19, Y+5	; 0x05
    10ea:	22 30       	cpi	r18, 0x02	; 2
    10ec:	31 05       	cpc	r19, r1
    10ee:	2c f4       	brge	.+10     	; 0x10fa <Dio_SetPinValue+0x138>
    10f0:	8c 81       	ldd	r24, Y+4	; 0x04
    10f2:	9d 81       	ldd	r25, Y+5	; 0x05
    10f4:	00 97       	sbiw	r24, 0x00	; 0
    10f6:	61 f0       	breq	.+24     	; 0x1110 <Dio_SetPinValue+0x14e>
    10f8:	5a c0       	rjmp	.+180    	; 0x11ae <Dio_SetPinValue+0x1ec>
    10fa:	2c 81       	ldd	r18, Y+4	; 0x04
    10fc:	3d 81       	ldd	r19, Y+5	; 0x05
    10fe:	22 30       	cpi	r18, 0x02	; 2
    1100:	31 05       	cpc	r19, r1
    1102:	71 f1       	breq	.+92     	; 0x1160 <Dio_SetPinValue+0x19e>
    1104:	8c 81       	ldd	r24, Y+4	; 0x04
    1106:	9d 81       	ldd	r25, Y+5	; 0x05
    1108:	83 30       	cpi	r24, 0x03	; 3
    110a:	91 05       	cpc	r25, r1
    110c:	e9 f1       	breq	.+122    	; 0x1188 <Dio_SetPinValue+0x1c6>
    110e:	4f c0       	rjmp	.+158    	; 0x11ae <Dio_SetPinValue+0x1ec>
			{
			case GroupA: SET_BIT(PORTA, PinNo); break;
    1110:	ab e3       	ldi	r26, 0x3B	; 59
    1112:	b0 e0       	ldi	r27, 0x00	; 0
    1114:	eb e3       	ldi	r30, 0x3B	; 59
    1116:	f0 e0       	ldi	r31, 0x00	; 0
    1118:	80 81       	ld	r24, Z
    111a:	48 2f       	mov	r20, r24
    111c:	8a 81       	ldd	r24, Y+2	; 0x02
    111e:	28 2f       	mov	r18, r24
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	81 e0       	ldi	r24, 0x01	; 1
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	02 2e       	mov	r0, r18
    1128:	02 c0       	rjmp	.+4      	; 0x112e <Dio_SetPinValue+0x16c>
    112a:	88 0f       	add	r24, r24
    112c:	99 1f       	adc	r25, r25
    112e:	0a 94       	dec	r0
    1130:	e2 f7       	brpl	.-8      	; 0x112a <Dio_SetPinValue+0x168>
    1132:	84 2b       	or	r24, r20
    1134:	8c 93       	st	X, r24
    1136:	3b c0       	rjmp	.+118    	; 0x11ae <Dio_SetPinValue+0x1ec>
			case GroupB: SET_BIT(PORTB, PinNo); break;
    1138:	a8 e3       	ldi	r26, 0x38	; 56
    113a:	b0 e0       	ldi	r27, 0x00	; 0
    113c:	e8 e3       	ldi	r30, 0x38	; 56
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	80 81       	ld	r24, Z
    1142:	48 2f       	mov	r20, r24
    1144:	8a 81       	ldd	r24, Y+2	; 0x02
    1146:	28 2f       	mov	r18, r24
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	81 e0       	ldi	r24, 0x01	; 1
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	02 2e       	mov	r0, r18
    1150:	02 c0       	rjmp	.+4      	; 0x1156 <Dio_SetPinValue+0x194>
    1152:	88 0f       	add	r24, r24
    1154:	99 1f       	adc	r25, r25
    1156:	0a 94       	dec	r0
    1158:	e2 f7       	brpl	.-8      	; 0x1152 <Dio_SetPinValue+0x190>
    115a:	84 2b       	or	r24, r20
    115c:	8c 93       	st	X, r24
    115e:	27 c0       	rjmp	.+78     	; 0x11ae <Dio_SetPinValue+0x1ec>
			case GroupC: SET_BIT(PORTC, PinNo); break;
    1160:	a5 e3       	ldi	r26, 0x35	; 53
    1162:	b0 e0       	ldi	r27, 0x00	; 0
    1164:	e5 e3       	ldi	r30, 0x35	; 53
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	80 81       	ld	r24, Z
    116a:	48 2f       	mov	r20, r24
    116c:	8a 81       	ldd	r24, Y+2	; 0x02
    116e:	28 2f       	mov	r18, r24
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	81 e0       	ldi	r24, 0x01	; 1
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	02 2e       	mov	r0, r18
    1178:	02 c0       	rjmp	.+4      	; 0x117e <Dio_SetPinValue+0x1bc>
    117a:	88 0f       	add	r24, r24
    117c:	99 1f       	adc	r25, r25
    117e:	0a 94       	dec	r0
    1180:	e2 f7       	brpl	.-8      	; 0x117a <Dio_SetPinValue+0x1b8>
    1182:	84 2b       	or	r24, r20
    1184:	8c 93       	st	X, r24
    1186:	13 c0       	rjmp	.+38     	; 0x11ae <Dio_SetPinValue+0x1ec>
			case GroupD: SET_BIT(PORTD, PinNo); break;
    1188:	a2 e3       	ldi	r26, 0x32	; 50
    118a:	b0 e0       	ldi	r27, 0x00	; 0
    118c:	e2 e3       	ldi	r30, 0x32	; 50
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	48 2f       	mov	r20, r24
    1194:	8a 81       	ldd	r24, Y+2	; 0x02
    1196:	28 2f       	mov	r18, r24
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	81 e0       	ldi	r24, 0x01	; 1
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	02 2e       	mov	r0, r18
    11a0:	02 c0       	rjmp	.+4      	; 0x11a6 <Dio_SetPinValue+0x1e4>
    11a2:	88 0f       	add	r24, r24
    11a4:	99 1f       	adc	r25, r25
    11a6:	0a 94       	dec	r0
    11a8:	e2 f7       	brpl	.-8      	; 0x11a2 <Dio_SetPinValue+0x1e0>
    11aa:	84 2b       	or	r24, r20
    11ac:	8c 93       	st	X, r24
			}
		}
}
    11ae:	27 96       	adiw	r28, 0x07	; 7
    11b0:	0f b6       	in	r0, 0x3f	; 63
    11b2:	f8 94       	cli
    11b4:	de bf       	out	0x3e, r29	; 62
    11b6:	0f be       	out	0x3f, r0	; 63
    11b8:	cd bf       	out	0x3d, r28	; 61
    11ba:	cf 91       	pop	r28
    11bc:	df 91       	pop	r29
    11be:	08 95       	ret

000011c0 <Dio_GetPinValue>:
u8 Dio_GetPinValue(u8 GroupNo, u8 PinNo)
{
    11c0:	df 93       	push	r29
    11c2:	cf 93       	push	r28
    11c4:	00 d0       	rcall	.+0      	; 0x11c6 <Dio_GetPinValue+0x6>
    11c6:	00 d0       	rcall	.+0      	; 0x11c8 <Dio_GetPinValue+0x8>
    11c8:	0f 92       	push	r0
    11ca:	cd b7       	in	r28, 0x3d	; 61
    11cc:	de b7       	in	r29, 0x3e	; 62
    11ce:	8a 83       	std	Y+2, r24	; 0x02
    11d0:	6b 83       	std	Y+3, r22	; 0x03
	u8 ret_value;
	switch(GroupNo)
    11d2:	8a 81       	ldd	r24, Y+2	; 0x02
    11d4:	28 2f       	mov	r18, r24
    11d6:	30 e0       	ldi	r19, 0x00	; 0
    11d8:	3d 83       	std	Y+5, r19	; 0x05
    11da:	2c 83       	std	Y+4, r18	; 0x04
    11dc:	4c 81       	ldd	r20, Y+4	; 0x04
    11de:	5d 81       	ldd	r21, Y+5	; 0x05
    11e0:	41 30       	cpi	r20, 0x01	; 1
    11e2:	51 05       	cpc	r21, r1
    11e4:	41 f1       	breq	.+80     	; 0x1236 <Dio_GetPinValue+0x76>
    11e6:	8c 81       	ldd	r24, Y+4	; 0x04
    11e8:	9d 81       	ldd	r25, Y+5	; 0x05
    11ea:	82 30       	cpi	r24, 0x02	; 2
    11ec:	91 05       	cpc	r25, r1
    11ee:	34 f4       	brge	.+12     	; 0x11fc <Dio_GetPinValue+0x3c>
    11f0:	2c 81       	ldd	r18, Y+4	; 0x04
    11f2:	3d 81       	ldd	r19, Y+5	; 0x05
    11f4:	21 15       	cp	r18, r1
    11f6:	31 05       	cpc	r19, r1
    11f8:	61 f0       	breq	.+24     	; 0x1212 <Dio_GetPinValue+0x52>
    11fa:	52 c0       	rjmp	.+164    	; 0x12a0 <Dio_GetPinValue+0xe0>
    11fc:	4c 81       	ldd	r20, Y+4	; 0x04
    11fe:	5d 81       	ldd	r21, Y+5	; 0x05
    1200:	42 30       	cpi	r20, 0x02	; 2
    1202:	51 05       	cpc	r21, r1
    1204:	51 f1       	breq	.+84     	; 0x125a <Dio_GetPinValue+0x9a>
    1206:	8c 81       	ldd	r24, Y+4	; 0x04
    1208:	9d 81       	ldd	r25, Y+5	; 0x05
    120a:	83 30       	cpi	r24, 0x03	; 3
    120c:	91 05       	cpc	r25, r1
    120e:	b9 f1       	breq	.+110    	; 0x127e <Dio_GetPinValue+0xbe>
    1210:	47 c0       	rjmp	.+142    	; 0x12a0 <Dio_GetPinValue+0xe0>
	{
	case GroupA: ret_value=GET_BIT(PINA, PinNo); break;
    1212:	e9 e3       	ldi	r30, 0x39	; 57
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    1216:	80 81       	ld	r24, Z
    1218:	28 2f       	mov	r18, r24
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	8b 81       	ldd	r24, Y+3	; 0x03
    121e:	88 2f       	mov	r24, r24
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	a9 01       	movw	r20, r18
    1224:	02 c0       	rjmp	.+4      	; 0x122a <Dio_GetPinValue+0x6a>
    1226:	55 95       	asr	r21
    1228:	47 95       	ror	r20
    122a:	8a 95       	dec	r24
    122c:	e2 f7       	brpl	.-8      	; 0x1226 <Dio_GetPinValue+0x66>
    122e:	ca 01       	movw	r24, r20
    1230:	81 70       	andi	r24, 0x01	; 1
    1232:	89 83       	std	Y+1, r24	; 0x01
    1234:	35 c0       	rjmp	.+106    	; 0x12a0 <Dio_GetPinValue+0xe0>
	case GroupB: ret_value=GET_BIT(PINB, PinNo); break;
    1236:	e6 e3       	ldi	r30, 0x36	; 54
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	80 81       	ld	r24, Z
    123c:	28 2f       	mov	r18, r24
    123e:	30 e0       	ldi	r19, 0x00	; 0
    1240:	8b 81       	ldd	r24, Y+3	; 0x03
    1242:	88 2f       	mov	r24, r24
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	a9 01       	movw	r20, r18
    1248:	02 c0       	rjmp	.+4      	; 0x124e <Dio_GetPinValue+0x8e>
    124a:	55 95       	asr	r21
    124c:	47 95       	ror	r20
    124e:	8a 95       	dec	r24
    1250:	e2 f7       	brpl	.-8      	; 0x124a <Dio_GetPinValue+0x8a>
    1252:	ca 01       	movw	r24, r20
    1254:	81 70       	andi	r24, 0x01	; 1
    1256:	89 83       	std	Y+1, r24	; 0x01
    1258:	23 c0       	rjmp	.+70     	; 0x12a0 <Dio_GetPinValue+0xe0>
	case GroupC: ret_value=GET_BIT(PINC, PinNo); break;
    125a:	e3 e3       	ldi	r30, 0x33	; 51
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	80 81       	ld	r24, Z
    1260:	28 2f       	mov	r18, r24
    1262:	30 e0       	ldi	r19, 0x00	; 0
    1264:	8b 81       	ldd	r24, Y+3	; 0x03
    1266:	88 2f       	mov	r24, r24
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	a9 01       	movw	r20, r18
    126c:	02 c0       	rjmp	.+4      	; 0x1272 <Dio_GetPinValue+0xb2>
    126e:	55 95       	asr	r21
    1270:	47 95       	ror	r20
    1272:	8a 95       	dec	r24
    1274:	e2 f7       	brpl	.-8      	; 0x126e <Dio_GetPinValue+0xae>
    1276:	ca 01       	movw	r24, r20
    1278:	81 70       	andi	r24, 0x01	; 1
    127a:	89 83       	std	Y+1, r24	; 0x01
    127c:	11 c0       	rjmp	.+34     	; 0x12a0 <Dio_GetPinValue+0xe0>
	case GroupD: ret_value=GET_BIT(PIND, PinNo); break;
    127e:	e0 e3       	ldi	r30, 0x30	; 48
    1280:	f0 e0       	ldi	r31, 0x00	; 0
    1282:	80 81       	ld	r24, Z
    1284:	28 2f       	mov	r18, r24
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	8b 81       	ldd	r24, Y+3	; 0x03
    128a:	88 2f       	mov	r24, r24
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	a9 01       	movw	r20, r18
    1290:	02 c0       	rjmp	.+4      	; 0x1296 <Dio_GetPinValue+0xd6>
    1292:	55 95       	asr	r21
    1294:	47 95       	ror	r20
    1296:	8a 95       	dec	r24
    1298:	e2 f7       	brpl	.-8      	; 0x1292 <Dio_GetPinValue+0xd2>
    129a:	ca 01       	movw	r24, r20
    129c:	81 70       	andi	r24, 0x01	; 1
    129e:	89 83       	std	Y+1, r24	; 0x01
	}

return ret_value;
    12a0:	89 81       	ldd	r24, Y+1	; 0x01
}
    12a2:	0f 90       	pop	r0
    12a4:	0f 90       	pop	r0
    12a6:	0f 90       	pop	r0
    12a8:	0f 90       	pop	r0
    12aa:	0f 90       	pop	r0
    12ac:	cf 91       	pop	r28
    12ae:	df 91       	pop	r29
    12b0:	08 95       	ret

000012b2 <LCD_INIT>:
#include "Dio_Int.h"
#include "Dio_Reg.h"
#include "LCD_INIT.h"
#include "avr/delay.h"

void LCD_INIT(void) {
    12b2:	0f 93       	push	r16
    12b4:	1f 93       	push	r17
    12b6:	df 93       	push	r29
    12b8:	cf 93       	push	r28
    12ba:	cd b7       	in	r28, 0x3d	; 61
    12bc:	de b7       	in	r29, 0x3e	; 62
    12be:	cc 54       	subi	r28, 0x4C	; 76
    12c0:	d0 40       	sbci	r29, 0x00	; 0
    12c2:	0f b6       	in	r0, 0x3f	; 63
    12c4:	f8 94       	cli
    12c6:	de bf       	out	0x3e, r29	; 62
    12c8:	0f be       	out	0x3f, r0	; 63
    12ca:	cd bf       	out	0x3d, r28	; 61
	// set RS, RW, EN
	Dio_SetPinDirection(GroupB, PIN1, OUTPUT);	// RS
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	61 e0       	ldi	r22, 0x01	; 1
    12d0:	41 e0       	ldi	r20, 0x01	; 1
    12d2:	0e 94 da 06 	call	0xdb4	; 0xdb4 <Dio_SetPinDirection>
	Dio_SetPinDirection(GroupB, PIN2, OUTPUT);	// RW
    12d6:	81 e0       	ldi	r24, 0x01	; 1
    12d8:	62 e0       	ldi	r22, 0x02	; 2
    12da:	41 e0       	ldi	r20, 0x01	; 1
    12dc:	0e 94 da 06 	call	0xdb4	; 0xdb4 <Dio_SetPinDirection>
	Dio_SetPinDirection(GroupB, PIN3, OUTPUT);	// EN
    12e0:	81 e0       	ldi	r24, 0x01	; 1
    12e2:	63 e0       	ldi	r22, 0x03	; 3
    12e4:	41 e0       	ldi	r20, 0x01	; 1
    12e6:	0e 94 da 06 	call	0xdb4	; 0xdb4 <Dio_SetPinDirection>

	// set pin data
	Dio_SetPinDirection(GroupA, PIN4, OUTPUT);
    12ea:	80 e0       	ldi	r24, 0x00	; 0
    12ec:	64 e0       	ldi	r22, 0x04	; 4
    12ee:	41 e0       	ldi	r20, 0x01	; 1
    12f0:	0e 94 da 06 	call	0xdb4	; 0xdb4 <Dio_SetPinDirection>
	Dio_SetPinDirection(GroupA, PIN5, OUTPUT);
    12f4:	80 e0       	ldi	r24, 0x00	; 0
    12f6:	65 e0       	ldi	r22, 0x05	; 5
    12f8:	41 e0       	ldi	r20, 0x01	; 1
    12fa:	0e 94 da 06 	call	0xdb4	; 0xdb4 <Dio_SetPinDirection>
	Dio_SetPinDirection(GroupA, PIN6, OUTPUT);
    12fe:	80 e0       	ldi	r24, 0x00	; 0
    1300:	66 e0       	ldi	r22, 0x06	; 6
    1302:	41 e0       	ldi	r20, 0x01	; 1
    1304:	0e 94 da 06 	call	0xdb4	; 0xdb4 <Dio_SetPinDirection>
	Dio_SetPinDirection(GroupA, PIN7, OUTPUT);
    1308:	80 e0       	ldi	r24, 0x00	; 0
    130a:	67 e0       	ldi	r22, 0x07	; 7
    130c:	41 e0       	ldi	r20, 0x01	; 1
    130e:	0e 94 da 06 	call	0xdb4	; 0xdb4 <Dio_SetPinDirection>
    1312:	fe 01       	movw	r30, r28
    1314:	e7 5b       	subi	r30, 0xB7	; 183
    1316:	ff 4f       	sbci	r31, 0xFF	; 255
    1318:	80 e0       	ldi	r24, 0x00	; 0
    131a:	90 e0       	ldi	r25, 0x00	; 0
    131c:	a0 e2       	ldi	r26, 0x20	; 32
    131e:	b2 e4       	ldi	r27, 0x42	; 66
    1320:	80 83       	st	Z, r24
    1322:	91 83       	std	Z+1, r25	; 0x01
    1324:	a2 83       	std	Z+2, r26	; 0x02
    1326:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1328:	8e 01       	movw	r16, r28
    132a:	0b 5b       	subi	r16, 0xBB	; 187
    132c:	1f 4f       	sbci	r17, 0xFF	; 255
    132e:	fe 01       	movw	r30, r28
    1330:	e7 5b       	subi	r30, 0xB7	; 183
    1332:	ff 4f       	sbci	r31, 0xFF	; 255
    1334:	60 81       	ld	r22, Z
    1336:	71 81       	ldd	r23, Z+1	; 0x01
    1338:	82 81       	ldd	r24, Z+2	; 0x02
    133a:	93 81       	ldd	r25, Z+3	; 0x03
    133c:	20 e0       	ldi	r18, 0x00	; 0
    133e:	30 e0       	ldi	r19, 0x00	; 0
    1340:	4a e7       	ldi	r20, 0x7A	; 122
    1342:	55 e4       	ldi	r21, 0x45	; 69
    1344:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1348:	dc 01       	movw	r26, r24
    134a:	cb 01       	movw	r24, r22
    134c:	f8 01       	movw	r30, r16
    134e:	80 83       	st	Z, r24
    1350:	91 83       	std	Z+1, r25	; 0x01
    1352:	a2 83       	std	Z+2, r26	; 0x02
    1354:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1356:	fe 01       	movw	r30, r28
    1358:	eb 5b       	subi	r30, 0xBB	; 187
    135a:	ff 4f       	sbci	r31, 0xFF	; 255
    135c:	60 81       	ld	r22, Z
    135e:	71 81       	ldd	r23, Z+1	; 0x01
    1360:	82 81       	ldd	r24, Z+2	; 0x02
    1362:	93 81       	ldd	r25, Z+3	; 0x03
    1364:	20 e0       	ldi	r18, 0x00	; 0
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	40 e8       	ldi	r20, 0x80	; 128
    136a:	5f e3       	ldi	r21, 0x3F	; 63
    136c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1370:	88 23       	and	r24, r24
    1372:	44 f4       	brge	.+16     	; 0x1384 <LCD_INIT+0xd2>
		__ticks = 1;
    1374:	fe 01       	movw	r30, r28
    1376:	ed 5b       	subi	r30, 0xBD	; 189
    1378:	ff 4f       	sbci	r31, 0xFF	; 255
    137a:	81 e0       	ldi	r24, 0x01	; 1
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	91 83       	std	Z+1, r25	; 0x01
    1380:	80 83       	st	Z, r24
    1382:	64 c0       	rjmp	.+200    	; 0x144c <LCD_INIT+0x19a>
	else if (__tmp > 65535)
    1384:	fe 01       	movw	r30, r28
    1386:	eb 5b       	subi	r30, 0xBB	; 187
    1388:	ff 4f       	sbci	r31, 0xFF	; 255
    138a:	60 81       	ld	r22, Z
    138c:	71 81       	ldd	r23, Z+1	; 0x01
    138e:	82 81       	ldd	r24, Z+2	; 0x02
    1390:	93 81       	ldd	r25, Z+3	; 0x03
    1392:	20 e0       	ldi	r18, 0x00	; 0
    1394:	3f ef       	ldi	r19, 0xFF	; 255
    1396:	4f e7       	ldi	r20, 0x7F	; 127
    1398:	57 e4       	ldi	r21, 0x47	; 71
    139a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    139e:	18 16       	cp	r1, r24
    13a0:	0c f0       	brlt	.+2      	; 0x13a4 <LCD_INIT+0xf2>
    13a2:	43 c0       	rjmp	.+134    	; 0x142a <LCD_INIT+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13a4:	fe 01       	movw	r30, r28
    13a6:	e7 5b       	subi	r30, 0xB7	; 183
    13a8:	ff 4f       	sbci	r31, 0xFF	; 255
    13aa:	60 81       	ld	r22, Z
    13ac:	71 81       	ldd	r23, Z+1	; 0x01
    13ae:	82 81       	ldd	r24, Z+2	; 0x02
    13b0:	93 81       	ldd	r25, Z+3	; 0x03
    13b2:	20 e0       	ldi	r18, 0x00	; 0
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	40 e2       	ldi	r20, 0x20	; 32
    13b8:	51 e4       	ldi	r21, 0x41	; 65
    13ba:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13be:	dc 01       	movw	r26, r24
    13c0:	cb 01       	movw	r24, r22
    13c2:	8e 01       	movw	r16, r28
    13c4:	0d 5b       	subi	r16, 0xBD	; 189
    13c6:	1f 4f       	sbci	r17, 0xFF	; 255
    13c8:	bc 01       	movw	r22, r24
    13ca:	cd 01       	movw	r24, r26
    13cc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13d0:	dc 01       	movw	r26, r24
    13d2:	cb 01       	movw	r24, r22
    13d4:	f8 01       	movw	r30, r16
    13d6:	91 83       	std	Z+1, r25	; 0x01
    13d8:	80 83       	st	Z, r24
    13da:	1f c0       	rjmp	.+62     	; 0x141a <LCD_INIT+0x168>
    13dc:	fe 01       	movw	r30, r28
    13de:	ef 5b       	subi	r30, 0xBF	; 191
    13e0:	ff 4f       	sbci	r31, 0xFF	; 255
    13e2:	80 e9       	ldi	r24, 0x90	; 144
    13e4:	91 e0       	ldi	r25, 0x01	; 1
    13e6:	91 83       	std	Z+1, r25	; 0x01
    13e8:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    13ea:	fe 01       	movw	r30, r28
    13ec:	ef 5b       	subi	r30, 0xBF	; 191
    13ee:	ff 4f       	sbci	r31, 0xFF	; 255
    13f0:	80 81       	ld	r24, Z
    13f2:	91 81       	ldd	r25, Z+1	; 0x01
    13f4:	01 97       	sbiw	r24, 0x01	; 1
    13f6:	f1 f7       	brne	.-4      	; 0x13f4 <LCD_INIT+0x142>
    13f8:	fe 01       	movw	r30, r28
    13fa:	ef 5b       	subi	r30, 0xBF	; 191
    13fc:	ff 4f       	sbci	r31, 0xFF	; 255
    13fe:	91 83       	std	Z+1, r25	; 0x01
    1400:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1402:	de 01       	movw	r26, r28
    1404:	ad 5b       	subi	r26, 0xBD	; 189
    1406:	bf 4f       	sbci	r27, 0xFF	; 255
    1408:	fe 01       	movw	r30, r28
    140a:	ed 5b       	subi	r30, 0xBD	; 189
    140c:	ff 4f       	sbci	r31, 0xFF	; 255
    140e:	80 81       	ld	r24, Z
    1410:	91 81       	ldd	r25, Z+1	; 0x01
    1412:	01 97       	sbiw	r24, 0x01	; 1
    1414:	11 96       	adiw	r26, 0x01	; 1
    1416:	9c 93       	st	X, r25
    1418:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    141a:	fe 01       	movw	r30, r28
    141c:	ed 5b       	subi	r30, 0xBD	; 189
    141e:	ff 4f       	sbci	r31, 0xFF	; 255
    1420:	80 81       	ld	r24, Z
    1422:	91 81       	ldd	r25, Z+1	; 0x01
    1424:	00 97       	sbiw	r24, 0x00	; 0
    1426:	d1 f6       	brne	.-76     	; 0x13dc <LCD_INIT+0x12a>
    1428:	24 c0       	rjmp	.+72     	; 0x1472 <LCD_INIT+0x1c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    142a:	8e 01       	movw	r16, r28
    142c:	0d 5b       	subi	r16, 0xBD	; 189
    142e:	1f 4f       	sbci	r17, 0xFF	; 255
    1430:	fe 01       	movw	r30, r28
    1432:	eb 5b       	subi	r30, 0xBB	; 187
    1434:	ff 4f       	sbci	r31, 0xFF	; 255
    1436:	60 81       	ld	r22, Z
    1438:	71 81       	ldd	r23, Z+1	; 0x01
    143a:	82 81       	ldd	r24, Z+2	; 0x02
    143c:	93 81       	ldd	r25, Z+3	; 0x03
    143e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1442:	dc 01       	movw	r26, r24
    1444:	cb 01       	movw	r24, r22
    1446:	f8 01       	movw	r30, r16
    1448:	91 83       	std	Z+1, r25	; 0x01
    144a:	80 83       	st	Z, r24
    144c:	fe 01       	movw	r30, r28
    144e:	ed 5b       	subi	r30, 0xBD	; 189
    1450:	ff 4f       	sbci	r31, 0xFF	; 255
    1452:	80 81       	ld	r24, Z
    1454:	91 81       	ldd	r25, Z+1	; 0x01
    1456:	fe 01       	movw	r30, r28
    1458:	ff 96       	adiw	r30, 0x3f	; 63
    145a:	91 83       	std	Z+1, r25	; 0x01
    145c:	80 83       	st	Z, r24
    145e:	fe 01       	movw	r30, r28
    1460:	ff 96       	adiw	r30, 0x3f	; 63
    1462:	80 81       	ld	r24, Z
    1464:	91 81       	ldd	r25, Z+1	; 0x01
    1466:	01 97       	sbiw	r24, 0x01	; 1
    1468:	f1 f7       	brne	.-4      	; 0x1466 <LCD_INIT+0x1b4>
    146a:	fe 01       	movw	r30, r28
    146c:	ff 96       	adiw	r30, 0x3f	; 63
    146e:	91 83       	std	Z+1, r25	; 0x01
    1470:	80 83       	st	Z, r24

	//function set
	_delay_ms(40);

	LCD_COMMAND(0x02); // high
    1472:	82 e0       	ldi	r24, 0x02	; 2
    1474:	0e 94 4b 0c 	call	0x1896	; 0x1896 <LCD_COMMAND>
	LCD_COMMAND(0x2B); //
    1478:	8b e2       	ldi	r24, 0x2B	; 43
    147a:	0e 94 4b 0c 	call	0x1896	; 0x1896 <LCD_COMMAND>
    147e:	80 e0       	ldi	r24, 0x00	; 0
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	a0 e2       	ldi	r26, 0x20	; 32
    1484:	b2 e4       	ldi	r27, 0x42	; 66
    1486:	8b af       	std	Y+59, r24	; 0x3b
    1488:	9c af       	std	Y+60, r25	; 0x3c
    148a:	ad af       	std	Y+61, r26	; 0x3d
    148c:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    148e:	6b ad       	ldd	r22, Y+59	; 0x3b
    1490:	7c ad       	ldd	r23, Y+60	; 0x3c
    1492:	8d ad       	ldd	r24, Y+61	; 0x3d
    1494:	9e ad       	ldd	r25, Y+62	; 0x3e
    1496:	2b ea       	ldi	r18, 0xAB	; 171
    1498:	3a ea       	ldi	r19, 0xAA	; 170
    149a:	4a ea       	ldi	r20, 0xAA	; 170
    149c:	50 e4       	ldi	r21, 0x40	; 64
    149e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14a2:	dc 01       	movw	r26, r24
    14a4:	cb 01       	movw	r24, r22
    14a6:	8f ab       	std	Y+55, r24	; 0x37
    14a8:	98 af       	std	Y+56, r25	; 0x38
    14aa:	a9 af       	std	Y+57, r26	; 0x39
    14ac:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    14ae:	6f a9       	ldd	r22, Y+55	; 0x37
    14b0:	78 ad       	ldd	r23, Y+56	; 0x38
    14b2:	89 ad       	ldd	r24, Y+57	; 0x39
    14b4:	9a ad       	ldd	r25, Y+58	; 0x3a
    14b6:	20 e0       	ldi	r18, 0x00	; 0
    14b8:	30 e0       	ldi	r19, 0x00	; 0
    14ba:	40 e8       	ldi	r20, 0x80	; 128
    14bc:	5f e3       	ldi	r21, 0x3F	; 63
    14be:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    14c2:	88 23       	and	r24, r24
    14c4:	1c f4       	brge	.+6      	; 0x14cc <LCD_INIT+0x21a>
		__ticks = 1;
    14c6:	81 e0       	ldi	r24, 0x01	; 1
    14c8:	8e ab       	std	Y+54, r24	; 0x36
    14ca:	91 c0       	rjmp	.+290    	; 0x15ee <LCD_INIT+0x33c>
	else if (__tmp > 255)
    14cc:	6f a9       	ldd	r22, Y+55	; 0x37
    14ce:	78 ad       	ldd	r23, Y+56	; 0x38
    14d0:	89 ad       	ldd	r24, Y+57	; 0x39
    14d2:	9a ad       	ldd	r25, Y+58	; 0x3a
    14d4:	20 e0       	ldi	r18, 0x00	; 0
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	4f e7       	ldi	r20, 0x7F	; 127
    14da:	53 e4       	ldi	r21, 0x43	; 67
    14dc:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    14e0:	18 16       	cp	r1, r24
    14e2:	0c f0       	brlt	.+2      	; 0x14e6 <LCD_INIT+0x234>
    14e4:	7b c0       	rjmp	.+246    	; 0x15dc <LCD_INIT+0x32a>
	{
		_delay_ms(__us / 1000.0);
    14e6:	6b ad       	ldd	r22, Y+59	; 0x3b
    14e8:	7c ad       	ldd	r23, Y+60	; 0x3c
    14ea:	8d ad       	ldd	r24, Y+61	; 0x3d
    14ec:	9e ad       	ldd	r25, Y+62	; 0x3e
    14ee:	20 e0       	ldi	r18, 0x00	; 0
    14f0:	30 e0       	ldi	r19, 0x00	; 0
    14f2:	4a e7       	ldi	r20, 0x7A	; 122
    14f4:	54 e4       	ldi	r21, 0x44	; 68
    14f6:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    14fa:	dc 01       	movw	r26, r24
    14fc:	cb 01       	movw	r24, r22
    14fe:	8a ab       	std	Y+50, r24	; 0x32
    1500:	9b ab       	std	Y+51, r25	; 0x33
    1502:	ac ab       	std	Y+52, r26	; 0x34
    1504:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1506:	6a a9       	ldd	r22, Y+50	; 0x32
    1508:	7b a9       	ldd	r23, Y+51	; 0x33
    150a:	8c a9       	ldd	r24, Y+52	; 0x34
    150c:	9d a9       	ldd	r25, Y+53	; 0x35
    150e:	20 e0       	ldi	r18, 0x00	; 0
    1510:	30 e0       	ldi	r19, 0x00	; 0
    1512:	4a e7       	ldi	r20, 0x7A	; 122
    1514:	55 e4       	ldi	r21, 0x45	; 69
    1516:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    151a:	dc 01       	movw	r26, r24
    151c:	cb 01       	movw	r24, r22
    151e:	8e a7       	std	Y+46, r24	; 0x2e
    1520:	9f a7       	std	Y+47, r25	; 0x2f
    1522:	a8 ab       	std	Y+48, r26	; 0x30
    1524:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1526:	6e a5       	ldd	r22, Y+46	; 0x2e
    1528:	7f a5       	ldd	r23, Y+47	; 0x2f
    152a:	88 a9       	ldd	r24, Y+48	; 0x30
    152c:	99 a9       	ldd	r25, Y+49	; 0x31
    152e:	20 e0       	ldi	r18, 0x00	; 0
    1530:	30 e0       	ldi	r19, 0x00	; 0
    1532:	40 e8       	ldi	r20, 0x80	; 128
    1534:	5f e3       	ldi	r21, 0x3F	; 63
    1536:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    153a:	88 23       	and	r24, r24
    153c:	2c f4       	brge	.+10     	; 0x1548 <LCD_INIT+0x296>
		__ticks = 1;
    153e:	81 e0       	ldi	r24, 0x01	; 1
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	9d a7       	std	Y+45, r25	; 0x2d
    1544:	8c a7       	std	Y+44, r24	; 0x2c
    1546:	3f c0       	rjmp	.+126    	; 0x15c6 <LCD_INIT+0x314>
	else if (__tmp > 65535)
    1548:	6e a5       	ldd	r22, Y+46	; 0x2e
    154a:	7f a5       	ldd	r23, Y+47	; 0x2f
    154c:	88 a9       	ldd	r24, Y+48	; 0x30
    154e:	99 a9       	ldd	r25, Y+49	; 0x31
    1550:	20 e0       	ldi	r18, 0x00	; 0
    1552:	3f ef       	ldi	r19, 0xFF	; 255
    1554:	4f e7       	ldi	r20, 0x7F	; 127
    1556:	57 e4       	ldi	r21, 0x47	; 71
    1558:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    155c:	18 16       	cp	r1, r24
    155e:	4c f5       	brge	.+82     	; 0x15b2 <LCD_INIT+0x300>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1560:	6a a9       	ldd	r22, Y+50	; 0x32
    1562:	7b a9       	ldd	r23, Y+51	; 0x33
    1564:	8c a9       	ldd	r24, Y+52	; 0x34
    1566:	9d a9       	ldd	r25, Y+53	; 0x35
    1568:	20 e0       	ldi	r18, 0x00	; 0
    156a:	30 e0       	ldi	r19, 0x00	; 0
    156c:	40 e2       	ldi	r20, 0x20	; 32
    156e:	51 e4       	ldi	r21, 0x41	; 65
    1570:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1574:	dc 01       	movw	r26, r24
    1576:	cb 01       	movw	r24, r22
    1578:	bc 01       	movw	r22, r24
    157a:	cd 01       	movw	r24, r26
    157c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1580:	dc 01       	movw	r26, r24
    1582:	cb 01       	movw	r24, r22
    1584:	9d a7       	std	Y+45, r25	; 0x2d
    1586:	8c a7       	std	Y+44, r24	; 0x2c
    1588:	0f c0       	rjmp	.+30     	; 0x15a8 <LCD_INIT+0x2f6>
    158a:	80 e9       	ldi	r24, 0x90	; 144
    158c:	91 e0       	ldi	r25, 0x01	; 1
    158e:	9b a7       	std	Y+43, r25	; 0x2b
    1590:	8a a7       	std	Y+42, r24	; 0x2a
    1592:	8a a5       	ldd	r24, Y+42	; 0x2a
    1594:	9b a5       	ldd	r25, Y+43	; 0x2b
    1596:	01 97       	sbiw	r24, 0x01	; 1
    1598:	f1 f7       	brne	.-4      	; 0x1596 <LCD_INIT+0x2e4>
    159a:	9b a7       	std	Y+43, r25	; 0x2b
    159c:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    159e:	8c a5       	ldd	r24, Y+44	; 0x2c
    15a0:	9d a5       	ldd	r25, Y+45	; 0x2d
    15a2:	01 97       	sbiw	r24, 0x01	; 1
    15a4:	9d a7       	std	Y+45, r25	; 0x2d
    15a6:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15a8:	8c a5       	ldd	r24, Y+44	; 0x2c
    15aa:	9d a5       	ldd	r25, Y+45	; 0x2d
    15ac:	00 97       	sbiw	r24, 0x00	; 0
    15ae:	69 f7       	brne	.-38     	; 0x158a <LCD_INIT+0x2d8>
    15b0:	24 c0       	rjmp	.+72     	; 0x15fa <LCD_INIT+0x348>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15b2:	6e a5       	ldd	r22, Y+46	; 0x2e
    15b4:	7f a5       	ldd	r23, Y+47	; 0x2f
    15b6:	88 a9       	ldd	r24, Y+48	; 0x30
    15b8:	99 a9       	ldd	r25, Y+49	; 0x31
    15ba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15be:	dc 01       	movw	r26, r24
    15c0:	cb 01       	movw	r24, r22
    15c2:	9d a7       	std	Y+45, r25	; 0x2d
    15c4:	8c a7       	std	Y+44, r24	; 0x2c
    15c6:	8c a5       	ldd	r24, Y+44	; 0x2c
    15c8:	9d a5       	ldd	r25, Y+45	; 0x2d
    15ca:	99 a7       	std	Y+41, r25	; 0x29
    15cc:	88 a7       	std	Y+40, r24	; 0x28
    15ce:	88 a5       	ldd	r24, Y+40	; 0x28
    15d0:	99 a5       	ldd	r25, Y+41	; 0x29
    15d2:	01 97       	sbiw	r24, 0x01	; 1
    15d4:	f1 f7       	brne	.-4      	; 0x15d2 <LCD_INIT+0x320>
    15d6:	99 a7       	std	Y+41, r25	; 0x29
    15d8:	88 a7       	std	Y+40, r24	; 0x28
    15da:	0f c0       	rjmp	.+30     	; 0x15fa <LCD_INIT+0x348>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    15dc:	6f a9       	ldd	r22, Y+55	; 0x37
    15de:	78 ad       	ldd	r23, Y+56	; 0x38
    15e0:	89 ad       	ldd	r24, Y+57	; 0x39
    15e2:	9a ad       	ldd	r25, Y+58	; 0x3a
    15e4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    15e8:	dc 01       	movw	r26, r24
    15ea:	cb 01       	movw	r24, r22
    15ec:	8e ab       	std	Y+54, r24	; 0x36
    15ee:	8e a9       	ldd	r24, Y+54	; 0x36
    15f0:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    15f2:	8f a1       	ldd	r24, Y+39	; 0x27
    15f4:	8a 95       	dec	r24
    15f6:	f1 f7       	brne	.-4      	; 0x15f4 <LCD_INIT+0x342>
    15f8:	8f a3       	std	Y+39, r24	; 0x27

	//display on/off
	_delay_us(40);

	LCD_COMMAND(0x00);
    15fa:	80 e0       	ldi	r24, 0x00	; 0
    15fc:	0e 94 4b 0c 	call	0x1896	; 0x1896 <LCD_COMMAND>
	LCD_COMMAND(0x0C);
    1600:	8c e0       	ldi	r24, 0x0C	; 12
    1602:	0e 94 4b 0c 	call	0x1896	; 0x1896 <LCD_COMMAND>
    1606:	80 e0       	ldi	r24, 0x00	; 0
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	a0 e2       	ldi	r26, 0x20	; 32
    160c:	b2 e4       	ldi	r27, 0x42	; 66
    160e:	8b a3       	std	Y+35, r24	; 0x23
    1610:	9c a3       	std	Y+36, r25	; 0x24
    1612:	ad a3       	std	Y+37, r26	; 0x25
    1614:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1616:	6b a1       	ldd	r22, Y+35	; 0x23
    1618:	7c a1       	ldd	r23, Y+36	; 0x24
    161a:	8d a1       	ldd	r24, Y+37	; 0x25
    161c:	9e a1       	ldd	r25, Y+38	; 0x26
    161e:	2b ea       	ldi	r18, 0xAB	; 171
    1620:	3a ea       	ldi	r19, 0xAA	; 170
    1622:	4a ea       	ldi	r20, 0xAA	; 170
    1624:	50 e4       	ldi	r21, 0x40	; 64
    1626:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    162a:	dc 01       	movw	r26, r24
    162c:	cb 01       	movw	r24, r22
    162e:	8f 8f       	std	Y+31, r24	; 0x1f
    1630:	98 a3       	std	Y+32, r25	; 0x20
    1632:	a9 a3       	std	Y+33, r26	; 0x21
    1634:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1636:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1638:	78 a1       	ldd	r23, Y+32	; 0x20
    163a:	89 a1       	ldd	r24, Y+33	; 0x21
    163c:	9a a1       	ldd	r25, Y+34	; 0x22
    163e:	20 e0       	ldi	r18, 0x00	; 0
    1640:	30 e0       	ldi	r19, 0x00	; 0
    1642:	40 e8       	ldi	r20, 0x80	; 128
    1644:	5f e3       	ldi	r21, 0x3F	; 63
    1646:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    164a:	88 23       	and	r24, r24
    164c:	1c f4       	brge	.+6      	; 0x1654 <LCD_INIT+0x3a2>
		__ticks = 1;
    164e:	81 e0       	ldi	r24, 0x01	; 1
    1650:	8e 8f       	std	Y+30, r24	; 0x1e
    1652:	91 c0       	rjmp	.+290    	; 0x1776 <LCD_INIT+0x4c4>
	else if (__tmp > 255)
    1654:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1656:	78 a1       	ldd	r23, Y+32	; 0x20
    1658:	89 a1       	ldd	r24, Y+33	; 0x21
    165a:	9a a1       	ldd	r25, Y+34	; 0x22
    165c:	20 e0       	ldi	r18, 0x00	; 0
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	4f e7       	ldi	r20, 0x7F	; 127
    1662:	53 e4       	ldi	r21, 0x43	; 67
    1664:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1668:	18 16       	cp	r1, r24
    166a:	0c f0       	brlt	.+2      	; 0x166e <LCD_INIT+0x3bc>
    166c:	7b c0       	rjmp	.+246    	; 0x1764 <LCD_INIT+0x4b2>
	{
		_delay_ms(__us / 1000.0);
    166e:	6b a1       	ldd	r22, Y+35	; 0x23
    1670:	7c a1       	ldd	r23, Y+36	; 0x24
    1672:	8d a1       	ldd	r24, Y+37	; 0x25
    1674:	9e a1       	ldd	r25, Y+38	; 0x26
    1676:	20 e0       	ldi	r18, 0x00	; 0
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	4a e7       	ldi	r20, 0x7A	; 122
    167c:	54 e4       	ldi	r21, 0x44	; 68
    167e:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1682:	dc 01       	movw	r26, r24
    1684:	cb 01       	movw	r24, r22
    1686:	8a 8f       	std	Y+26, r24	; 0x1a
    1688:	9b 8f       	std	Y+27, r25	; 0x1b
    168a:	ac 8f       	std	Y+28, r26	; 0x1c
    168c:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    168e:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1690:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1692:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1694:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1696:	20 e0       	ldi	r18, 0x00	; 0
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	4a e7       	ldi	r20, 0x7A	; 122
    169c:	55 e4       	ldi	r21, 0x45	; 69
    169e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16a2:	dc 01       	movw	r26, r24
    16a4:	cb 01       	movw	r24, r22
    16a6:	8e 8b       	std	Y+22, r24	; 0x16
    16a8:	9f 8b       	std	Y+23, r25	; 0x17
    16aa:	a8 8f       	std	Y+24, r26	; 0x18
    16ac:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    16ae:	6e 89       	ldd	r22, Y+22	; 0x16
    16b0:	7f 89       	ldd	r23, Y+23	; 0x17
    16b2:	88 8d       	ldd	r24, Y+24	; 0x18
    16b4:	99 8d       	ldd	r25, Y+25	; 0x19
    16b6:	20 e0       	ldi	r18, 0x00	; 0
    16b8:	30 e0       	ldi	r19, 0x00	; 0
    16ba:	40 e8       	ldi	r20, 0x80	; 128
    16bc:	5f e3       	ldi	r21, 0x3F	; 63
    16be:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    16c2:	88 23       	and	r24, r24
    16c4:	2c f4       	brge	.+10     	; 0x16d0 <LCD_INIT+0x41e>
		__ticks = 1;
    16c6:	81 e0       	ldi	r24, 0x01	; 1
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	9d 8b       	std	Y+21, r25	; 0x15
    16cc:	8c 8b       	std	Y+20, r24	; 0x14
    16ce:	3f c0       	rjmp	.+126    	; 0x174e <LCD_INIT+0x49c>
	else if (__tmp > 65535)
    16d0:	6e 89       	ldd	r22, Y+22	; 0x16
    16d2:	7f 89       	ldd	r23, Y+23	; 0x17
    16d4:	88 8d       	ldd	r24, Y+24	; 0x18
    16d6:	99 8d       	ldd	r25, Y+25	; 0x19
    16d8:	20 e0       	ldi	r18, 0x00	; 0
    16da:	3f ef       	ldi	r19, 0xFF	; 255
    16dc:	4f e7       	ldi	r20, 0x7F	; 127
    16de:	57 e4       	ldi	r21, 0x47	; 71
    16e0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    16e4:	18 16       	cp	r1, r24
    16e6:	4c f5       	brge	.+82     	; 0x173a <LCD_INIT+0x488>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16e8:	6a 8d       	ldd	r22, Y+26	; 0x1a
    16ea:	7b 8d       	ldd	r23, Y+27	; 0x1b
    16ec:	8c 8d       	ldd	r24, Y+28	; 0x1c
    16ee:	9d 8d       	ldd	r25, Y+29	; 0x1d
    16f0:	20 e0       	ldi	r18, 0x00	; 0
    16f2:	30 e0       	ldi	r19, 0x00	; 0
    16f4:	40 e2       	ldi	r20, 0x20	; 32
    16f6:	51 e4       	ldi	r21, 0x41	; 65
    16f8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16fc:	dc 01       	movw	r26, r24
    16fe:	cb 01       	movw	r24, r22
    1700:	bc 01       	movw	r22, r24
    1702:	cd 01       	movw	r24, r26
    1704:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1708:	dc 01       	movw	r26, r24
    170a:	cb 01       	movw	r24, r22
    170c:	9d 8b       	std	Y+21, r25	; 0x15
    170e:	8c 8b       	std	Y+20, r24	; 0x14
    1710:	0f c0       	rjmp	.+30     	; 0x1730 <LCD_INIT+0x47e>
    1712:	80 e9       	ldi	r24, 0x90	; 144
    1714:	91 e0       	ldi	r25, 0x01	; 1
    1716:	9b 8b       	std	Y+19, r25	; 0x13
    1718:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    171a:	8a 89       	ldd	r24, Y+18	; 0x12
    171c:	9b 89       	ldd	r25, Y+19	; 0x13
    171e:	01 97       	sbiw	r24, 0x01	; 1
    1720:	f1 f7       	brne	.-4      	; 0x171e <LCD_INIT+0x46c>
    1722:	9b 8b       	std	Y+19, r25	; 0x13
    1724:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1726:	8c 89       	ldd	r24, Y+20	; 0x14
    1728:	9d 89       	ldd	r25, Y+21	; 0x15
    172a:	01 97       	sbiw	r24, 0x01	; 1
    172c:	9d 8b       	std	Y+21, r25	; 0x15
    172e:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1730:	8c 89       	ldd	r24, Y+20	; 0x14
    1732:	9d 89       	ldd	r25, Y+21	; 0x15
    1734:	00 97       	sbiw	r24, 0x00	; 0
    1736:	69 f7       	brne	.-38     	; 0x1712 <LCD_INIT+0x460>
    1738:	24 c0       	rjmp	.+72     	; 0x1782 <LCD_INIT+0x4d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    173a:	6e 89       	ldd	r22, Y+22	; 0x16
    173c:	7f 89       	ldd	r23, Y+23	; 0x17
    173e:	88 8d       	ldd	r24, Y+24	; 0x18
    1740:	99 8d       	ldd	r25, Y+25	; 0x19
    1742:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1746:	dc 01       	movw	r26, r24
    1748:	cb 01       	movw	r24, r22
    174a:	9d 8b       	std	Y+21, r25	; 0x15
    174c:	8c 8b       	std	Y+20, r24	; 0x14
    174e:	8c 89       	ldd	r24, Y+20	; 0x14
    1750:	9d 89       	ldd	r25, Y+21	; 0x15
    1752:	99 8b       	std	Y+17, r25	; 0x11
    1754:	88 8b       	std	Y+16, r24	; 0x10
    1756:	88 89       	ldd	r24, Y+16	; 0x10
    1758:	99 89       	ldd	r25, Y+17	; 0x11
    175a:	01 97       	sbiw	r24, 0x01	; 1
    175c:	f1 f7       	brne	.-4      	; 0x175a <LCD_INIT+0x4a8>
    175e:	99 8b       	std	Y+17, r25	; 0x11
    1760:	88 8b       	std	Y+16, r24	; 0x10
    1762:	0f c0       	rjmp	.+30     	; 0x1782 <LCD_INIT+0x4d0>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1764:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1766:	78 a1       	ldd	r23, Y+32	; 0x20
    1768:	89 a1       	ldd	r24, Y+33	; 0x21
    176a:	9a a1       	ldd	r25, Y+34	; 0x22
    176c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1770:	dc 01       	movw	r26, r24
    1772:	cb 01       	movw	r24, r22
    1774:	8e 8f       	std	Y+30, r24	; 0x1e
    1776:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1778:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    177a:	8f 85       	ldd	r24, Y+15	; 0x0f
    177c:	8a 95       	dec	r24
    177e:	f1 f7       	brne	.-4      	; 0x177c <LCD_INIT+0x4ca>
    1780:	8f 87       	std	Y+15, r24	; 0x0f

	//display clear
	_delay_us(40);

	LCD_COMMAND(0x00);
    1782:	80 e0       	ldi	r24, 0x00	; 0
    1784:	0e 94 4b 0c 	call	0x1896	; 0x1896 <LCD_COMMAND>
	LCD_COMMAND(0x01);
    1788:	81 e0       	ldi	r24, 0x01	; 1
    178a:	0e 94 4b 0c 	call	0x1896	; 0x1896 <LCD_COMMAND>
    178e:	80 e0       	ldi	r24, 0x00	; 0
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	a0 e0       	ldi	r26, 0x00	; 0
    1794:	b0 e4       	ldi	r27, 0x40	; 64
    1796:	8b 87       	std	Y+11, r24	; 0x0b
    1798:	9c 87       	std	Y+12, r25	; 0x0c
    179a:	ad 87       	std	Y+13, r26	; 0x0d
    179c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    179e:	6b 85       	ldd	r22, Y+11	; 0x0b
    17a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    17a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    17a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    17a6:	20 e0       	ldi	r18, 0x00	; 0
    17a8:	30 e0       	ldi	r19, 0x00	; 0
    17aa:	4a e7       	ldi	r20, 0x7A	; 122
    17ac:	55 e4       	ldi	r21, 0x45	; 69
    17ae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17b2:	dc 01       	movw	r26, r24
    17b4:	cb 01       	movw	r24, r22
    17b6:	8f 83       	std	Y+7, r24	; 0x07
    17b8:	98 87       	std	Y+8, r25	; 0x08
    17ba:	a9 87       	std	Y+9, r26	; 0x09
    17bc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17be:	6f 81       	ldd	r22, Y+7	; 0x07
    17c0:	78 85       	ldd	r23, Y+8	; 0x08
    17c2:	89 85       	ldd	r24, Y+9	; 0x09
    17c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    17c6:	20 e0       	ldi	r18, 0x00	; 0
    17c8:	30 e0       	ldi	r19, 0x00	; 0
    17ca:	40 e8       	ldi	r20, 0x80	; 128
    17cc:	5f e3       	ldi	r21, 0x3F	; 63
    17ce:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    17d2:	88 23       	and	r24, r24
    17d4:	2c f4       	brge	.+10     	; 0x17e0 <LCD_INIT+0x52e>
		__ticks = 1;
    17d6:	81 e0       	ldi	r24, 0x01	; 1
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	9e 83       	std	Y+6, r25	; 0x06
    17dc:	8d 83       	std	Y+5, r24	; 0x05
    17de:	3f c0       	rjmp	.+126    	; 0x185e <LCD_INIT+0x5ac>
	else if (__tmp > 65535)
    17e0:	6f 81       	ldd	r22, Y+7	; 0x07
    17e2:	78 85       	ldd	r23, Y+8	; 0x08
    17e4:	89 85       	ldd	r24, Y+9	; 0x09
    17e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    17e8:	20 e0       	ldi	r18, 0x00	; 0
    17ea:	3f ef       	ldi	r19, 0xFF	; 255
    17ec:	4f e7       	ldi	r20, 0x7F	; 127
    17ee:	57 e4       	ldi	r21, 0x47	; 71
    17f0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    17f4:	18 16       	cp	r1, r24
    17f6:	4c f5       	brge	.+82     	; 0x184a <LCD_INIT+0x598>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    17fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    17fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    17fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1800:	20 e0       	ldi	r18, 0x00	; 0
    1802:	30 e0       	ldi	r19, 0x00	; 0
    1804:	40 e2       	ldi	r20, 0x20	; 32
    1806:	51 e4       	ldi	r21, 0x41	; 65
    1808:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    180c:	dc 01       	movw	r26, r24
    180e:	cb 01       	movw	r24, r22
    1810:	bc 01       	movw	r22, r24
    1812:	cd 01       	movw	r24, r26
    1814:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1818:	dc 01       	movw	r26, r24
    181a:	cb 01       	movw	r24, r22
    181c:	9e 83       	std	Y+6, r25	; 0x06
    181e:	8d 83       	std	Y+5, r24	; 0x05
    1820:	0f c0       	rjmp	.+30     	; 0x1840 <LCD_INIT+0x58e>
    1822:	80 e9       	ldi	r24, 0x90	; 144
    1824:	91 e0       	ldi	r25, 0x01	; 1
    1826:	9c 83       	std	Y+4, r25	; 0x04
    1828:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    182a:	8b 81       	ldd	r24, Y+3	; 0x03
    182c:	9c 81       	ldd	r25, Y+4	; 0x04
    182e:	01 97       	sbiw	r24, 0x01	; 1
    1830:	f1 f7       	brne	.-4      	; 0x182e <LCD_INIT+0x57c>
    1832:	9c 83       	std	Y+4, r25	; 0x04
    1834:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1836:	8d 81       	ldd	r24, Y+5	; 0x05
    1838:	9e 81       	ldd	r25, Y+6	; 0x06
    183a:	01 97       	sbiw	r24, 0x01	; 1
    183c:	9e 83       	std	Y+6, r25	; 0x06
    183e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1840:	8d 81       	ldd	r24, Y+5	; 0x05
    1842:	9e 81       	ldd	r25, Y+6	; 0x06
    1844:	00 97       	sbiw	r24, 0x00	; 0
    1846:	69 f7       	brne	.-38     	; 0x1822 <LCD_INIT+0x570>
    1848:	14 c0       	rjmp	.+40     	; 0x1872 <LCD_INIT+0x5c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    184a:	6f 81       	ldd	r22, Y+7	; 0x07
    184c:	78 85       	ldd	r23, Y+8	; 0x08
    184e:	89 85       	ldd	r24, Y+9	; 0x09
    1850:	9a 85       	ldd	r25, Y+10	; 0x0a
    1852:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1856:	dc 01       	movw	r26, r24
    1858:	cb 01       	movw	r24, r22
    185a:	9e 83       	std	Y+6, r25	; 0x06
    185c:	8d 83       	std	Y+5, r24	; 0x05
    185e:	8d 81       	ldd	r24, Y+5	; 0x05
    1860:	9e 81       	ldd	r25, Y+6	; 0x06
    1862:	9a 83       	std	Y+2, r25	; 0x02
    1864:	89 83       	std	Y+1, r24	; 0x01
    1866:	89 81       	ldd	r24, Y+1	; 0x01
    1868:	9a 81       	ldd	r25, Y+2	; 0x02
    186a:	01 97       	sbiw	r24, 0x01	; 1
    186c:	f1 f7       	brne	.-4      	; 0x186a <LCD_INIT+0x5b8>
    186e:	9a 83       	std	Y+2, r25	; 0x02
    1870:	89 83       	std	Y+1, r24	; 0x01

	//Enter mode set
	_delay_ms(2);

	LCD_COMMAND(0x00);
    1872:	80 e0       	ldi	r24, 0x00	; 0
    1874:	0e 94 4b 0c 	call	0x1896	; 0x1896 <LCD_COMMAND>
	LCD_COMMAND(0x06);
    1878:	86 e0       	ldi	r24, 0x06	; 6
    187a:	0e 94 4b 0c 	call	0x1896	; 0x1896 <LCD_COMMAND>

}
    187e:	c4 5b       	subi	r28, 0xB4	; 180
    1880:	df 4f       	sbci	r29, 0xFF	; 255
    1882:	0f b6       	in	r0, 0x3f	; 63
    1884:	f8 94       	cli
    1886:	de bf       	out	0x3e, r29	; 62
    1888:	0f be       	out	0x3f, r0	; 63
    188a:	cd bf       	out	0x3d, r28	; 61
    188c:	cf 91       	pop	r28
    188e:	df 91       	pop	r29
    1890:	1f 91       	pop	r17
    1892:	0f 91       	pop	r16
    1894:	08 95       	ret

00001896 <LCD_COMMAND>:

void LCD_COMMAND(u8 cmd) {
    1896:	df 93       	push	r29
    1898:	cf 93       	push	r28
    189a:	cd b7       	in	r28, 0x3d	; 61
    189c:	de b7       	in	r29, 0x3e	; 62
    189e:	6d 97       	sbiw	r28, 0x1d	; 29
    18a0:	0f b6       	in	r0, 0x3f	; 63
    18a2:	f8 94       	cli
    18a4:	de bf       	out	0x3e, r29	; 62
    18a6:	0f be       	out	0x3f, r0	; 63
    18a8:	cd bf       	out	0x3d, r28	; 61
    18aa:	8d 8f       	std	Y+29, r24	; 0x1d

	Dio_SetPinValue(GroupB, PIN2, LOW); // RW = 0 to write command
    18ac:	81 e0       	ldi	r24, 0x01	; 1
    18ae:	62 e0       	ldi	r22, 0x02	; 2
    18b0:	40 e0       	ldi	r20, 0x00	; 0
    18b2:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <Dio_SetPinValue>
	Dio_SetPinValue(GroupB, PIN1, LOW); // RS = 0 to set command
    18b6:	81 e0       	ldi	r24, 0x01	; 1
    18b8:	61 e0       	ldi	r22, 0x01	; 1
    18ba:	40 e0       	ldi	r20, 0x00	; 0
    18bc:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <Dio_SetPinValue>

	PORTA = (PORTA & 0x0f) | (cmd & 0xf0);
    18c0:	ab e3       	ldi	r26, 0x3B	; 59
    18c2:	b0 e0       	ldi	r27, 0x00	; 0
    18c4:	eb e3       	ldi	r30, 0x3B	; 59
    18c6:	f0 e0       	ldi	r31, 0x00	; 0
    18c8:	80 81       	ld	r24, Z
    18ca:	98 2f       	mov	r25, r24
    18cc:	9f 70       	andi	r25, 0x0F	; 15
    18ce:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18d0:	80 7f       	andi	r24, 0xF0	; 240
    18d2:	89 2b       	or	r24, r25
    18d4:	8c 93       	st	X, r24

	Dio_SetPinValue(GroupB, PIN3, HIGH); // EN = 1 to Enable LCD
    18d6:	81 e0       	ldi	r24, 0x01	; 1
    18d8:	63 e0       	ldi	r22, 0x03	; 3
    18da:	41 e0       	ldi	r20, 0x01	; 1
    18dc:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <Dio_SetPinValue>
    18e0:	80 e0       	ldi	r24, 0x00	; 0
    18e2:	90 e0       	ldi	r25, 0x00	; 0
    18e4:	a0 e0       	ldi	r26, 0x00	; 0
    18e6:	b0 e4       	ldi	r27, 0x40	; 64
    18e8:	89 8f       	std	Y+25, r24	; 0x19
    18ea:	9a 8f       	std	Y+26, r25	; 0x1a
    18ec:	ab 8f       	std	Y+27, r26	; 0x1b
    18ee:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18f0:	69 8d       	ldd	r22, Y+25	; 0x19
    18f2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18f4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18f6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18f8:	20 e0       	ldi	r18, 0x00	; 0
    18fa:	30 e0       	ldi	r19, 0x00	; 0
    18fc:	4a e7       	ldi	r20, 0x7A	; 122
    18fe:	55 e4       	ldi	r21, 0x45	; 69
    1900:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1904:	dc 01       	movw	r26, r24
    1906:	cb 01       	movw	r24, r22
    1908:	8d 8b       	std	Y+21, r24	; 0x15
    190a:	9e 8b       	std	Y+22, r25	; 0x16
    190c:	af 8b       	std	Y+23, r26	; 0x17
    190e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1910:	6d 89       	ldd	r22, Y+21	; 0x15
    1912:	7e 89       	ldd	r23, Y+22	; 0x16
    1914:	8f 89       	ldd	r24, Y+23	; 0x17
    1916:	98 8d       	ldd	r25, Y+24	; 0x18
    1918:	20 e0       	ldi	r18, 0x00	; 0
    191a:	30 e0       	ldi	r19, 0x00	; 0
    191c:	40 e8       	ldi	r20, 0x80	; 128
    191e:	5f e3       	ldi	r21, 0x3F	; 63
    1920:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1924:	88 23       	and	r24, r24
    1926:	2c f4       	brge	.+10     	; 0x1932 <LCD_COMMAND+0x9c>
		__ticks = 1;
    1928:	81 e0       	ldi	r24, 0x01	; 1
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	9c 8b       	std	Y+20, r25	; 0x14
    192e:	8b 8b       	std	Y+19, r24	; 0x13
    1930:	3f c0       	rjmp	.+126    	; 0x19b0 <LCD_COMMAND+0x11a>
	else if (__tmp > 65535)
    1932:	6d 89       	ldd	r22, Y+21	; 0x15
    1934:	7e 89       	ldd	r23, Y+22	; 0x16
    1936:	8f 89       	ldd	r24, Y+23	; 0x17
    1938:	98 8d       	ldd	r25, Y+24	; 0x18
    193a:	20 e0       	ldi	r18, 0x00	; 0
    193c:	3f ef       	ldi	r19, 0xFF	; 255
    193e:	4f e7       	ldi	r20, 0x7F	; 127
    1940:	57 e4       	ldi	r21, 0x47	; 71
    1942:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1946:	18 16       	cp	r1, r24
    1948:	4c f5       	brge	.+82     	; 0x199c <LCD_COMMAND+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    194a:	69 8d       	ldd	r22, Y+25	; 0x19
    194c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    194e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1950:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1952:	20 e0       	ldi	r18, 0x00	; 0
    1954:	30 e0       	ldi	r19, 0x00	; 0
    1956:	40 e2       	ldi	r20, 0x20	; 32
    1958:	51 e4       	ldi	r21, 0x41	; 65
    195a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    195e:	dc 01       	movw	r26, r24
    1960:	cb 01       	movw	r24, r22
    1962:	bc 01       	movw	r22, r24
    1964:	cd 01       	movw	r24, r26
    1966:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    196a:	dc 01       	movw	r26, r24
    196c:	cb 01       	movw	r24, r22
    196e:	9c 8b       	std	Y+20, r25	; 0x14
    1970:	8b 8b       	std	Y+19, r24	; 0x13
    1972:	0f c0       	rjmp	.+30     	; 0x1992 <LCD_COMMAND+0xfc>
    1974:	80 e9       	ldi	r24, 0x90	; 144
    1976:	91 e0       	ldi	r25, 0x01	; 1
    1978:	9a 8b       	std	Y+18, r25	; 0x12
    197a:	89 8b       	std	Y+17, r24	; 0x11
    197c:	89 89       	ldd	r24, Y+17	; 0x11
    197e:	9a 89       	ldd	r25, Y+18	; 0x12
    1980:	01 97       	sbiw	r24, 0x01	; 1
    1982:	f1 f7       	brne	.-4      	; 0x1980 <LCD_COMMAND+0xea>
    1984:	9a 8b       	std	Y+18, r25	; 0x12
    1986:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1988:	8b 89       	ldd	r24, Y+19	; 0x13
    198a:	9c 89       	ldd	r25, Y+20	; 0x14
    198c:	01 97       	sbiw	r24, 0x01	; 1
    198e:	9c 8b       	std	Y+20, r25	; 0x14
    1990:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1992:	8b 89       	ldd	r24, Y+19	; 0x13
    1994:	9c 89       	ldd	r25, Y+20	; 0x14
    1996:	00 97       	sbiw	r24, 0x00	; 0
    1998:	69 f7       	brne	.-38     	; 0x1974 <LCD_COMMAND+0xde>
    199a:	14 c0       	rjmp	.+40     	; 0x19c4 <LCD_COMMAND+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    199c:	6d 89       	ldd	r22, Y+21	; 0x15
    199e:	7e 89       	ldd	r23, Y+22	; 0x16
    19a0:	8f 89       	ldd	r24, Y+23	; 0x17
    19a2:	98 8d       	ldd	r25, Y+24	; 0x18
    19a4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19a8:	dc 01       	movw	r26, r24
    19aa:	cb 01       	movw	r24, r22
    19ac:	9c 8b       	std	Y+20, r25	; 0x14
    19ae:	8b 8b       	std	Y+19, r24	; 0x13
    19b0:	8b 89       	ldd	r24, Y+19	; 0x13
    19b2:	9c 89       	ldd	r25, Y+20	; 0x14
    19b4:	98 8b       	std	Y+16, r25	; 0x10
    19b6:	8f 87       	std	Y+15, r24	; 0x0f
    19b8:	8f 85       	ldd	r24, Y+15	; 0x0f
    19ba:	98 89       	ldd	r25, Y+16	; 0x10
    19bc:	01 97       	sbiw	r24, 0x01	; 1
    19be:	f1 f7       	brne	.-4      	; 0x19bc <LCD_COMMAND+0x126>
    19c0:	98 8b       	std	Y+16, r25	; 0x10
    19c2:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(2);

	Dio_SetPinValue(GroupB, PIN3, LOW); // EN = 0 to disable LCD
    19c4:	81 e0       	ldi	r24, 0x01	; 1
    19c6:	63 e0       	ldi	r22, 0x03	; 3
    19c8:	40 e0       	ldi	r20, 0x00	; 0
    19ca:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <Dio_SetPinValue>

	PORTA = (PORTA & 0x0f) | (cmd << 4);
    19ce:	ab e3       	ldi	r26, 0x3B	; 59
    19d0:	b0 e0       	ldi	r27, 0x00	; 0
    19d2:	eb e3       	ldi	r30, 0x3B	; 59
    19d4:	f0 e0       	ldi	r31, 0x00	; 0
    19d6:	80 81       	ld	r24, Z
    19d8:	28 2f       	mov	r18, r24
    19da:	2f 70       	andi	r18, 0x0F	; 15
    19dc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    19de:	88 2f       	mov	r24, r24
    19e0:	90 e0       	ldi	r25, 0x00	; 0
    19e2:	82 95       	swap	r24
    19e4:	92 95       	swap	r25
    19e6:	90 7f       	andi	r25, 0xF0	; 240
    19e8:	98 27       	eor	r25, r24
    19ea:	80 7f       	andi	r24, 0xF0	; 240
    19ec:	98 27       	eor	r25, r24
    19ee:	82 2b       	or	r24, r18
    19f0:	8c 93       	st	X, r24
	Dio_SetPinValue(GroupB, PIN3, HIGH); // EN = 1 to Enable LCD
    19f2:	81 e0       	ldi	r24, 0x01	; 1
    19f4:	63 e0       	ldi	r22, 0x03	; 3
    19f6:	41 e0       	ldi	r20, 0x01	; 1
    19f8:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <Dio_SetPinValue>
    19fc:	80 e0       	ldi	r24, 0x00	; 0
    19fe:	90 e0       	ldi	r25, 0x00	; 0
    1a00:	a0 e0       	ldi	r26, 0x00	; 0
    1a02:	b0 e4       	ldi	r27, 0x40	; 64
    1a04:	8b 87       	std	Y+11, r24	; 0x0b
    1a06:	9c 87       	std	Y+12, r25	; 0x0c
    1a08:	ad 87       	std	Y+13, r26	; 0x0d
    1a0a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a0c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a0e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a10:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a12:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a14:	20 e0       	ldi	r18, 0x00	; 0
    1a16:	30 e0       	ldi	r19, 0x00	; 0
    1a18:	4a e7       	ldi	r20, 0x7A	; 122
    1a1a:	55 e4       	ldi	r21, 0x45	; 69
    1a1c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a20:	dc 01       	movw	r26, r24
    1a22:	cb 01       	movw	r24, r22
    1a24:	8f 83       	std	Y+7, r24	; 0x07
    1a26:	98 87       	std	Y+8, r25	; 0x08
    1a28:	a9 87       	std	Y+9, r26	; 0x09
    1a2a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a2c:	6f 81       	ldd	r22, Y+7	; 0x07
    1a2e:	78 85       	ldd	r23, Y+8	; 0x08
    1a30:	89 85       	ldd	r24, Y+9	; 0x09
    1a32:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a34:	20 e0       	ldi	r18, 0x00	; 0
    1a36:	30 e0       	ldi	r19, 0x00	; 0
    1a38:	40 e8       	ldi	r20, 0x80	; 128
    1a3a:	5f e3       	ldi	r21, 0x3F	; 63
    1a3c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1a40:	88 23       	and	r24, r24
    1a42:	2c f4       	brge	.+10     	; 0x1a4e <LCD_COMMAND+0x1b8>
		__ticks = 1;
    1a44:	81 e0       	ldi	r24, 0x01	; 1
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	9e 83       	std	Y+6, r25	; 0x06
    1a4a:	8d 83       	std	Y+5, r24	; 0x05
    1a4c:	3f c0       	rjmp	.+126    	; 0x1acc <LCD_COMMAND+0x236>
	else if (__tmp > 65535)
    1a4e:	6f 81       	ldd	r22, Y+7	; 0x07
    1a50:	78 85       	ldd	r23, Y+8	; 0x08
    1a52:	89 85       	ldd	r24, Y+9	; 0x09
    1a54:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a56:	20 e0       	ldi	r18, 0x00	; 0
    1a58:	3f ef       	ldi	r19, 0xFF	; 255
    1a5a:	4f e7       	ldi	r20, 0x7F	; 127
    1a5c:	57 e4       	ldi	r21, 0x47	; 71
    1a5e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1a62:	18 16       	cp	r1, r24
    1a64:	4c f5       	brge	.+82     	; 0x1ab8 <LCD_COMMAND+0x222>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a66:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a68:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a6a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a6c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a6e:	20 e0       	ldi	r18, 0x00	; 0
    1a70:	30 e0       	ldi	r19, 0x00	; 0
    1a72:	40 e2       	ldi	r20, 0x20	; 32
    1a74:	51 e4       	ldi	r21, 0x41	; 65
    1a76:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a7a:	dc 01       	movw	r26, r24
    1a7c:	cb 01       	movw	r24, r22
    1a7e:	bc 01       	movw	r22, r24
    1a80:	cd 01       	movw	r24, r26
    1a82:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a86:	dc 01       	movw	r26, r24
    1a88:	cb 01       	movw	r24, r22
    1a8a:	9e 83       	std	Y+6, r25	; 0x06
    1a8c:	8d 83       	std	Y+5, r24	; 0x05
    1a8e:	0f c0       	rjmp	.+30     	; 0x1aae <LCD_COMMAND+0x218>
    1a90:	80 e9       	ldi	r24, 0x90	; 144
    1a92:	91 e0       	ldi	r25, 0x01	; 1
    1a94:	9c 83       	std	Y+4, r25	; 0x04
    1a96:	8b 83       	std	Y+3, r24	; 0x03
    1a98:	8b 81       	ldd	r24, Y+3	; 0x03
    1a9a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a9c:	01 97       	sbiw	r24, 0x01	; 1
    1a9e:	f1 f7       	brne	.-4      	; 0x1a9c <LCD_COMMAND+0x206>
    1aa0:	9c 83       	std	Y+4, r25	; 0x04
    1aa2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aa4:	8d 81       	ldd	r24, Y+5	; 0x05
    1aa6:	9e 81       	ldd	r25, Y+6	; 0x06
    1aa8:	01 97       	sbiw	r24, 0x01	; 1
    1aaa:	9e 83       	std	Y+6, r25	; 0x06
    1aac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1aae:	8d 81       	ldd	r24, Y+5	; 0x05
    1ab0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ab2:	00 97       	sbiw	r24, 0x00	; 0
    1ab4:	69 f7       	brne	.-38     	; 0x1a90 <LCD_COMMAND+0x1fa>
    1ab6:	14 c0       	rjmp	.+40     	; 0x1ae0 <LCD_COMMAND+0x24a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ab8:	6f 81       	ldd	r22, Y+7	; 0x07
    1aba:	78 85       	ldd	r23, Y+8	; 0x08
    1abc:	89 85       	ldd	r24, Y+9	; 0x09
    1abe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ac0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ac4:	dc 01       	movw	r26, r24
    1ac6:	cb 01       	movw	r24, r22
    1ac8:	9e 83       	std	Y+6, r25	; 0x06
    1aca:	8d 83       	std	Y+5, r24	; 0x05
    1acc:	8d 81       	ldd	r24, Y+5	; 0x05
    1ace:	9e 81       	ldd	r25, Y+6	; 0x06
    1ad0:	9a 83       	std	Y+2, r25	; 0x02
    1ad2:	89 83       	std	Y+1, r24	; 0x01
    1ad4:	89 81       	ldd	r24, Y+1	; 0x01
    1ad6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ad8:	01 97       	sbiw	r24, 0x01	; 1
    1ada:	f1 f7       	brne	.-4      	; 0x1ad8 <LCD_COMMAND+0x242>
    1adc:	9a 83       	std	Y+2, r25	; 0x02
    1ade:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(2);

	Dio_SetPinValue(GroupB, PIN3, LOW); // EN = 0 to disable LCD
    1ae0:	81 e0       	ldi	r24, 0x01	; 1
    1ae2:	63 e0       	ldi	r22, 0x03	; 3
    1ae4:	40 e0       	ldi	r20, 0x00	; 0
    1ae6:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <Dio_SetPinValue>

}
    1aea:	6d 96       	adiw	r28, 0x1d	; 29
    1aec:	0f b6       	in	r0, 0x3f	; 63
    1aee:	f8 94       	cli
    1af0:	de bf       	out	0x3e, r29	; 62
    1af2:	0f be       	out	0x3f, r0	; 63
    1af4:	cd bf       	out	0x3d, r28	; 61
    1af6:	cf 91       	pop	r28
    1af8:	df 91       	pop	r29
    1afa:	08 95       	ret

00001afc <LCD_CHAR>:

void LCD_CHAR(u8 data) {
    1afc:	df 93       	push	r29
    1afe:	cf 93       	push	r28
    1b00:	cd b7       	in	r28, 0x3d	; 61
    1b02:	de b7       	in	r29, 0x3e	; 62
    1b04:	6d 97       	sbiw	r28, 0x1d	; 29
    1b06:	0f b6       	in	r0, 0x3f	; 63
    1b08:	f8 94       	cli
    1b0a:	de bf       	out	0x3e, r29	; 62
    1b0c:	0f be       	out	0x3f, r0	; 63
    1b0e:	cd bf       	out	0x3d, r28	; 61
    1b10:	8d 8f       	std	Y+29, r24	; 0x1d

	Dio_SetPinValue(GroupB, PIN1, LOW); // RW = 0 to write data
    1b12:	81 e0       	ldi	r24, 0x01	; 1
    1b14:	61 e0       	ldi	r22, 0x01	; 1
    1b16:	40 e0       	ldi	r20, 0x00	; 0
    1b18:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <Dio_SetPinValue>
	Dio_SetPinValue(GroupB, PIN1, HIGH); // RS = 1 to set data
    1b1c:	81 e0       	ldi	r24, 0x01	; 1
    1b1e:	61 e0       	ldi	r22, 0x01	; 1
    1b20:	41 e0       	ldi	r20, 0x01	; 1
    1b22:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <Dio_SetPinValue>

	PORTA = (PORTA & 0x0f) | (data & 0xf0);
    1b26:	ab e3       	ldi	r26, 0x3B	; 59
    1b28:	b0 e0       	ldi	r27, 0x00	; 0
    1b2a:	eb e3       	ldi	r30, 0x3B	; 59
    1b2c:	f0 e0       	ldi	r31, 0x00	; 0
    1b2e:	80 81       	ld	r24, Z
    1b30:	98 2f       	mov	r25, r24
    1b32:	9f 70       	andi	r25, 0x0F	; 15
    1b34:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b36:	80 7f       	andi	r24, 0xF0	; 240
    1b38:	89 2b       	or	r24, r25
    1b3a:	8c 93       	st	X, r24

	Dio_SetPinValue(GroupB, PIN3, HIGH); // EN = 1 to Enable LCD
    1b3c:	81 e0       	ldi	r24, 0x01	; 1
    1b3e:	63 e0       	ldi	r22, 0x03	; 3
    1b40:	41 e0       	ldi	r20, 0x01	; 1
    1b42:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <Dio_SetPinValue>
    1b46:	80 e0       	ldi	r24, 0x00	; 0
    1b48:	90 e0       	ldi	r25, 0x00	; 0
    1b4a:	a0 e0       	ldi	r26, 0x00	; 0
    1b4c:	b0 e4       	ldi	r27, 0x40	; 64
    1b4e:	89 8f       	std	Y+25, r24	; 0x19
    1b50:	9a 8f       	std	Y+26, r25	; 0x1a
    1b52:	ab 8f       	std	Y+27, r26	; 0x1b
    1b54:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b56:	69 8d       	ldd	r22, Y+25	; 0x19
    1b58:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b5a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b5c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b5e:	20 e0       	ldi	r18, 0x00	; 0
    1b60:	30 e0       	ldi	r19, 0x00	; 0
    1b62:	4a e7       	ldi	r20, 0x7A	; 122
    1b64:	55 e4       	ldi	r21, 0x45	; 69
    1b66:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b6a:	dc 01       	movw	r26, r24
    1b6c:	cb 01       	movw	r24, r22
    1b6e:	8d 8b       	std	Y+21, r24	; 0x15
    1b70:	9e 8b       	std	Y+22, r25	; 0x16
    1b72:	af 8b       	std	Y+23, r26	; 0x17
    1b74:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b76:	6d 89       	ldd	r22, Y+21	; 0x15
    1b78:	7e 89       	ldd	r23, Y+22	; 0x16
    1b7a:	8f 89       	ldd	r24, Y+23	; 0x17
    1b7c:	98 8d       	ldd	r25, Y+24	; 0x18
    1b7e:	20 e0       	ldi	r18, 0x00	; 0
    1b80:	30 e0       	ldi	r19, 0x00	; 0
    1b82:	40 e8       	ldi	r20, 0x80	; 128
    1b84:	5f e3       	ldi	r21, 0x3F	; 63
    1b86:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1b8a:	88 23       	and	r24, r24
    1b8c:	2c f4       	brge	.+10     	; 0x1b98 <LCD_CHAR+0x9c>
		__ticks = 1;
    1b8e:	81 e0       	ldi	r24, 0x01	; 1
    1b90:	90 e0       	ldi	r25, 0x00	; 0
    1b92:	9c 8b       	std	Y+20, r25	; 0x14
    1b94:	8b 8b       	std	Y+19, r24	; 0x13
    1b96:	3f c0       	rjmp	.+126    	; 0x1c16 <LCD_CHAR+0x11a>
	else if (__tmp > 65535)
    1b98:	6d 89       	ldd	r22, Y+21	; 0x15
    1b9a:	7e 89       	ldd	r23, Y+22	; 0x16
    1b9c:	8f 89       	ldd	r24, Y+23	; 0x17
    1b9e:	98 8d       	ldd	r25, Y+24	; 0x18
    1ba0:	20 e0       	ldi	r18, 0x00	; 0
    1ba2:	3f ef       	ldi	r19, 0xFF	; 255
    1ba4:	4f e7       	ldi	r20, 0x7F	; 127
    1ba6:	57 e4       	ldi	r21, 0x47	; 71
    1ba8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1bac:	18 16       	cp	r1, r24
    1bae:	4c f5       	brge	.+82     	; 0x1c02 <LCD_CHAR+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bb0:	69 8d       	ldd	r22, Y+25	; 0x19
    1bb2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bb4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bb6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bb8:	20 e0       	ldi	r18, 0x00	; 0
    1bba:	30 e0       	ldi	r19, 0x00	; 0
    1bbc:	40 e2       	ldi	r20, 0x20	; 32
    1bbe:	51 e4       	ldi	r21, 0x41	; 65
    1bc0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bc4:	dc 01       	movw	r26, r24
    1bc6:	cb 01       	movw	r24, r22
    1bc8:	bc 01       	movw	r22, r24
    1bca:	cd 01       	movw	r24, r26
    1bcc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bd0:	dc 01       	movw	r26, r24
    1bd2:	cb 01       	movw	r24, r22
    1bd4:	9c 8b       	std	Y+20, r25	; 0x14
    1bd6:	8b 8b       	std	Y+19, r24	; 0x13
    1bd8:	0f c0       	rjmp	.+30     	; 0x1bf8 <LCD_CHAR+0xfc>
    1bda:	80 e9       	ldi	r24, 0x90	; 144
    1bdc:	91 e0       	ldi	r25, 0x01	; 1
    1bde:	9a 8b       	std	Y+18, r25	; 0x12
    1be0:	89 8b       	std	Y+17, r24	; 0x11
    1be2:	89 89       	ldd	r24, Y+17	; 0x11
    1be4:	9a 89       	ldd	r25, Y+18	; 0x12
    1be6:	01 97       	sbiw	r24, 0x01	; 1
    1be8:	f1 f7       	brne	.-4      	; 0x1be6 <LCD_CHAR+0xea>
    1bea:	9a 8b       	std	Y+18, r25	; 0x12
    1bec:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bee:	8b 89       	ldd	r24, Y+19	; 0x13
    1bf0:	9c 89       	ldd	r25, Y+20	; 0x14
    1bf2:	01 97       	sbiw	r24, 0x01	; 1
    1bf4:	9c 8b       	std	Y+20, r25	; 0x14
    1bf6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bf8:	8b 89       	ldd	r24, Y+19	; 0x13
    1bfa:	9c 89       	ldd	r25, Y+20	; 0x14
    1bfc:	00 97       	sbiw	r24, 0x00	; 0
    1bfe:	69 f7       	brne	.-38     	; 0x1bda <LCD_CHAR+0xde>
    1c00:	14 c0       	rjmp	.+40     	; 0x1c2a <LCD_CHAR+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c02:	6d 89       	ldd	r22, Y+21	; 0x15
    1c04:	7e 89       	ldd	r23, Y+22	; 0x16
    1c06:	8f 89       	ldd	r24, Y+23	; 0x17
    1c08:	98 8d       	ldd	r25, Y+24	; 0x18
    1c0a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c0e:	dc 01       	movw	r26, r24
    1c10:	cb 01       	movw	r24, r22
    1c12:	9c 8b       	std	Y+20, r25	; 0x14
    1c14:	8b 8b       	std	Y+19, r24	; 0x13
    1c16:	8b 89       	ldd	r24, Y+19	; 0x13
    1c18:	9c 89       	ldd	r25, Y+20	; 0x14
    1c1a:	98 8b       	std	Y+16, r25	; 0x10
    1c1c:	8f 87       	std	Y+15, r24	; 0x0f
    1c1e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c20:	98 89       	ldd	r25, Y+16	; 0x10
    1c22:	01 97       	sbiw	r24, 0x01	; 1
    1c24:	f1 f7       	brne	.-4      	; 0x1c22 <LCD_CHAR+0x126>
    1c26:	98 8b       	std	Y+16, r25	; 0x10
    1c28:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(2);

	Dio_SetPinValue(GroupB, PIN3, LOW); // EN = 0 to disable LCD
    1c2a:	81 e0       	ldi	r24, 0x01	; 1
    1c2c:	63 e0       	ldi	r22, 0x03	; 3
    1c2e:	40 e0       	ldi	r20, 0x00	; 0
    1c30:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <Dio_SetPinValue>

	PORTA = (PORTA & 0x0f) | (data << 4);
    1c34:	ab e3       	ldi	r26, 0x3B	; 59
    1c36:	b0 e0       	ldi	r27, 0x00	; 0
    1c38:	eb e3       	ldi	r30, 0x3B	; 59
    1c3a:	f0 e0       	ldi	r31, 0x00	; 0
    1c3c:	80 81       	ld	r24, Z
    1c3e:	28 2f       	mov	r18, r24
    1c40:	2f 70       	andi	r18, 0x0F	; 15
    1c42:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c44:	88 2f       	mov	r24, r24
    1c46:	90 e0       	ldi	r25, 0x00	; 0
    1c48:	82 95       	swap	r24
    1c4a:	92 95       	swap	r25
    1c4c:	90 7f       	andi	r25, 0xF0	; 240
    1c4e:	98 27       	eor	r25, r24
    1c50:	80 7f       	andi	r24, 0xF0	; 240
    1c52:	98 27       	eor	r25, r24
    1c54:	82 2b       	or	r24, r18
    1c56:	8c 93       	st	X, r24
	Dio_SetPinValue(GroupB, PIN3, HIGH); // EN = 1 to Enable LCD
    1c58:	81 e0       	ldi	r24, 0x01	; 1
    1c5a:	63 e0       	ldi	r22, 0x03	; 3
    1c5c:	41 e0       	ldi	r20, 0x01	; 1
    1c5e:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <Dio_SetPinValue>
    1c62:	80 e0       	ldi	r24, 0x00	; 0
    1c64:	90 e0       	ldi	r25, 0x00	; 0
    1c66:	a0 e0       	ldi	r26, 0x00	; 0
    1c68:	b0 e4       	ldi	r27, 0x40	; 64
    1c6a:	8b 87       	std	Y+11, r24	; 0x0b
    1c6c:	9c 87       	std	Y+12, r25	; 0x0c
    1c6e:	ad 87       	std	Y+13, r26	; 0x0d
    1c70:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c72:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c74:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c76:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c78:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c7a:	20 e0       	ldi	r18, 0x00	; 0
    1c7c:	30 e0       	ldi	r19, 0x00	; 0
    1c7e:	4a e7       	ldi	r20, 0x7A	; 122
    1c80:	55 e4       	ldi	r21, 0x45	; 69
    1c82:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c86:	dc 01       	movw	r26, r24
    1c88:	cb 01       	movw	r24, r22
    1c8a:	8f 83       	std	Y+7, r24	; 0x07
    1c8c:	98 87       	std	Y+8, r25	; 0x08
    1c8e:	a9 87       	std	Y+9, r26	; 0x09
    1c90:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c92:	6f 81       	ldd	r22, Y+7	; 0x07
    1c94:	78 85       	ldd	r23, Y+8	; 0x08
    1c96:	89 85       	ldd	r24, Y+9	; 0x09
    1c98:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c9a:	20 e0       	ldi	r18, 0x00	; 0
    1c9c:	30 e0       	ldi	r19, 0x00	; 0
    1c9e:	40 e8       	ldi	r20, 0x80	; 128
    1ca0:	5f e3       	ldi	r21, 0x3F	; 63
    1ca2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1ca6:	88 23       	and	r24, r24
    1ca8:	2c f4       	brge	.+10     	; 0x1cb4 <LCD_CHAR+0x1b8>
		__ticks = 1;
    1caa:	81 e0       	ldi	r24, 0x01	; 1
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	9e 83       	std	Y+6, r25	; 0x06
    1cb0:	8d 83       	std	Y+5, r24	; 0x05
    1cb2:	3f c0       	rjmp	.+126    	; 0x1d32 <LCD_CHAR+0x236>
	else if (__tmp > 65535)
    1cb4:	6f 81       	ldd	r22, Y+7	; 0x07
    1cb6:	78 85       	ldd	r23, Y+8	; 0x08
    1cb8:	89 85       	ldd	r24, Y+9	; 0x09
    1cba:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cbc:	20 e0       	ldi	r18, 0x00	; 0
    1cbe:	3f ef       	ldi	r19, 0xFF	; 255
    1cc0:	4f e7       	ldi	r20, 0x7F	; 127
    1cc2:	57 e4       	ldi	r21, 0x47	; 71
    1cc4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1cc8:	18 16       	cp	r1, r24
    1cca:	4c f5       	brge	.+82     	; 0x1d1e <LCD_CHAR+0x222>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ccc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cce:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cd0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cd2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cd4:	20 e0       	ldi	r18, 0x00	; 0
    1cd6:	30 e0       	ldi	r19, 0x00	; 0
    1cd8:	40 e2       	ldi	r20, 0x20	; 32
    1cda:	51 e4       	ldi	r21, 0x41	; 65
    1cdc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ce0:	dc 01       	movw	r26, r24
    1ce2:	cb 01       	movw	r24, r22
    1ce4:	bc 01       	movw	r22, r24
    1ce6:	cd 01       	movw	r24, r26
    1ce8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1cec:	dc 01       	movw	r26, r24
    1cee:	cb 01       	movw	r24, r22
    1cf0:	9e 83       	std	Y+6, r25	; 0x06
    1cf2:	8d 83       	std	Y+5, r24	; 0x05
    1cf4:	0f c0       	rjmp	.+30     	; 0x1d14 <LCD_CHAR+0x218>
    1cf6:	80 e9       	ldi	r24, 0x90	; 144
    1cf8:	91 e0       	ldi	r25, 0x01	; 1
    1cfa:	9c 83       	std	Y+4, r25	; 0x04
    1cfc:	8b 83       	std	Y+3, r24	; 0x03
    1cfe:	8b 81       	ldd	r24, Y+3	; 0x03
    1d00:	9c 81       	ldd	r25, Y+4	; 0x04
    1d02:	01 97       	sbiw	r24, 0x01	; 1
    1d04:	f1 f7       	brne	.-4      	; 0x1d02 <LCD_CHAR+0x206>
    1d06:	9c 83       	std	Y+4, r25	; 0x04
    1d08:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d0a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d0c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d0e:	01 97       	sbiw	r24, 0x01	; 1
    1d10:	9e 83       	std	Y+6, r25	; 0x06
    1d12:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d14:	8d 81       	ldd	r24, Y+5	; 0x05
    1d16:	9e 81       	ldd	r25, Y+6	; 0x06
    1d18:	00 97       	sbiw	r24, 0x00	; 0
    1d1a:	69 f7       	brne	.-38     	; 0x1cf6 <LCD_CHAR+0x1fa>
    1d1c:	14 c0       	rjmp	.+40     	; 0x1d46 <LCD_CHAR+0x24a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d1e:	6f 81       	ldd	r22, Y+7	; 0x07
    1d20:	78 85       	ldd	r23, Y+8	; 0x08
    1d22:	89 85       	ldd	r24, Y+9	; 0x09
    1d24:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d26:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d2a:	dc 01       	movw	r26, r24
    1d2c:	cb 01       	movw	r24, r22
    1d2e:	9e 83       	std	Y+6, r25	; 0x06
    1d30:	8d 83       	std	Y+5, r24	; 0x05
    1d32:	8d 81       	ldd	r24, Y+5	; 0x05
    1d34:	9e 81       	ldd	r25, Y+6	; 0x06
    1d36:	9a 83       	std	Y+2, r25	; 0x02
    1d38:	89 83       	std	Y+1, r24	; 0x01
    1d3a:	89 81       	ldd	r24, Y+1	; 0x01
    1d3c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d3e:	01 97       	sbiw	r24, 0x01	; 1
    1d40:	f1 f7       	brne	.-4      	; 0x1d3e <LCD_CHAR+0x242>
    1d42:	9a 83       	std	Y+2, r25	; 0x02
    1d44:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(2);

	Dio_SetPinValue(GroupB, PIN3, LOW); // EN = 0 to disable LCD
    1d46:	81 e0       	ldi	r24, 0x01	; 1
    1d48:	63 e0       	ldi	r22, 0x03	; 3
    1d4a:	40 e0       	ldi	r20, 0x00	; 0
    1d4c:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <Dio_SetPinValue>

}
    1d50:	6d 96       	adiw	r28, 0x1d	; 29
    1d52:	0f b6       	in	r0, 0x3f	; 63
    1d54:	f8 94       	cli
    1d56:	de bf       	out	0x3e, r29	; 62
    1d58:	0f be       	out	0x3f, r0	; 63
    1d5a:	cd bf       	out	0x3d, r28	; 61
    1d5c:	cf 91       	pop	r28
    1d5e:	df 91       	pop	r29
    1d60:	08 95       	ret

00001d62 <LCD_WORD>:

void LCD_WORD(u8 * ptr) {
    1d62:	df 93       	push	r29
    1d64:	cf 93       	push	r28
    1d66:	00 d0       	rcall	.+0      	; 0x1d68 <LCD_WORD+0x6>
    1d68:	0f 92       	push	r0
    1d6a:	cd b7       	in	r28, 0x3d	; 61
    1d6c:	de b7       	in	r29, 0x3e	; 62
    1d6e:	9b 83       	std	Y+3, r25	; 0x03
    1d70:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    1d72:	19 82       	std	Y+1, r1	; 0x01
    1d74:	0e c0       	rjmp	.+28     	; 0x1d92 <LCD_WORD+0x30>

	while (ptr[i] != 0) {
		LCD_CHAR(ptr[i]);
    1d76:	89 81       	ldd	r24, Y+1	; 0x01
    1d78:	28 2f       	mov	r18, r24
    1d7a:	30 e0       	ldi	r19, 0x00	; 0
    1d7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d7e:	9b 81       	ldd	r25, Y+3	; 0x03
    1d80:	fc 01       	movw	r30, r24
    1d82:	e2 0f       	add	r30, r18
    1d84:	f3 1f       	adc	r31, r19
    1d86:	80 81       	ld	r24, Z
    1d88:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <LCD_CHAR>
		i++;
    1d8c:	89 81       	ldd	r24, Y+1	; 0x01
    1d8e:	8f 5f       	subi	r24, 0xFF	; 255
    1d90:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_WORD(u8 * ptr) {
	u8 i = 0;

	while (ptr[i] != 0) {
    1d92:	89 81       	ldd	r24, Y+1	; 0x01
    1d94:	28 2f       	mov	r18, r24
    1d96:	30 e0       	ldi	r19, 0x00	; 0
    1d98:	8a 81       	ldd	r24, Y+2	; 0x02
    1d9a:	9b 81       	ldd	r25, Y+3	; 0x03
    1d9c:	fc 01       	movw	r30, r24
    1d9e:	e2 0f       	add	r30, r18
    1da0:	f3 1f       	adc	r31, r19
    1da2:	80 81       	ld	r24, Z
    1da4:	88 23       	and	r24, r24
    1da6:	39 f7       	brne	.-50     	; 0x1d76 <LCD_WORD+0x14>
		LCD_CHAR(ptr[i]);
		i++;
	}
}
    1da8:	0f 90       	pop	r0
    1daa:	0f 90       	pop	r0
    1dac:	0f 90       	pop	r0
    1dae:	cf 91       	pop	r28
    1db0:	df 91       	pop	r29
    1db2:	08 95       	ret

00001db4 <CLEAR_LCD>:

void CLEAR_LCD(void) {
    1db4:	df 93       	push	r29
    1db6:	cf 93       	push	r28
    1db8:	cd b7       	in	r28, 0x3d	; 61
    1dba:	de b7       	in	r29, 0x3e	; 62

	LCD_COMMAND(0x00);
    1dbc:	80 e0       	ldi	r24, 0x00	; 0
    1dbe:	0e 94 4b 0c 	call	0x1896	; 0x1896 <LCD_COMMAND>
	LCD_COMMAND(0x01);
    1dc2:	81 e0       	ldi	r24, 0x01	; 1
    1dc4:	0e 94 4b 0c 	call	0x1896	; 0x1896 <LCD_COMMAND>
}
    1dc8:	cf 91       	pop	r28
    1dca:	df 91       	pop	r29
    1dcc:	08 95       	ret

00001dce <RowAndColume_SET>:

void RowAndColume_SET(u8 RowNo, u8 ColumeNo) {
    1dce:	df 93       	push	r29
    1dd0:	cf 93       	push	r28
    1dd2:	00 d0       	rcall	.+0      	; 0x1dd4 <RowAndColume_SET+0x6>
    1dd4:	0f 92       	push	r0
    1dd6:	cd b7       	in	r28, 0x3d	; 61
    1dd8:	de b7       	in	r29, 0x3e	; 62
    1dda:	8a 83       	std	Y+2, r24	; 0x02
    1ddc:	6b 83       	std	Y+3, r22	; 0x03

	u8 Location = 0;
    1dde:	19 82       	std	Y+1, r1	; 0x01

	if (RowNo == ROW1) {
    1de0:	8a 81       	ldd	r24, Y+2	; 0x02
    1de2:	81 30       	cpi	r24, 0x01	; 1
    1de4:	19 f4       	brne	.+6      	; 0x1dec <RowAndColume_SET+0x1e>
		Location = 0x80;
    1de6:	80 e8       	ldi	r24, 0x80	; 128
    1de8:	89 83       	std	Y+1, r24	; 0x01
    1dea:	05 c0       	rjmp	.+10     	; 0x1df6 <RowAndColume_SET+0x28>
	}

	else if (RowNo == ROW2) {
    1dec:	8a 81       	ldd	r24, Y+2	; 0x02
    1dee:	82 30       	cpi	r24, 0x02	; 2
    1df0:	11 f4       	brne	.+4      	; 0x1df6 <RowAndColume_SET+0x28>
		Location = 0xc0;
    1df2:	80 ec       	ldi	r24, 0xC0	; 192
    1df4:	89 83       	std	Y+1, r24	; 0x01
	}

	Location += ColumeNo;
    1df6:	89 81       	ldd	r24, Y+1	; 0x01
    1df8:	9b 81       	ldd	r25, Y+3	; 0x03
    1dfa:	89 0f       	add	r24, r25
    1dfc:	89 83       	std	Y+1, r24	; 0x01

	LCD_COMMAND(Location);
    1dfe:	89 81       	ldd	r24, Y+1	; 0x01
    1e00:	0e 94 4b 0c 	call	0x1896	; 0x1896 <LCD_COMMAND>

}
    1e04:	0f 90       	pop	r0
    1e06:	0f 90       	pop	r0
    1e08:	0f 90       	pop	r0
    1e0a:	cf 91       	pop	r28
    1e0c:	df 91       	pop	r29
    1e0e:	08 95       	ret

00001e10 <LED0_INIT>:
#include "Dio_Int.h"
#include "Dio_Reg.h"
#include "Utilities.h"
#include  "Led_INT.h"

void LED0_INIT() {
    1e10:	df 93       	push	r29
    1e12:	cf 93       	push	r28
    1e14:	cd b7       	in	r28, 0x3d	; 61
    1e16:	de b7       	in	r29, 0x3e	; 62
	Dio_SetPinDirection(GroupC, PIN2, OUTPUT);
    1e18:	82 e0       	ldi	r24, 0x02	; 2
    1e1a:	62 e0       	ldi	r22, 0x02	; 2
    1e1c:	41 e0       	ldi	r20, 0x01	; 1
    1e1e:	0e 94 da 06 	call	0xdb4	; 0xdb4 <Dio_SetPinDirection>
}
    1e22:	cf 91       	pop	r28
    1e24:	df 91       	pop	r29
    1e26:	08 95       	ret

00001e28 <LED1_INIT>:
void LED1_INIT()  {
    1e28:	df 93       	push	r29
    1e2a:	cf 93       	push	r28
    1e2c:	cd b7       	in	r28, 0x3d	; 61
    1e2e:	de b7       	in	r29, 0x3e	; 62
	Dio_SetPinDirection(GroupC, PIN7, OUTPUT);
    1e30:	82 e0       	ldi	r24, 0x02	; 2
    1e32:	67 e0       	ldi	r22, 0x07	; 7
    1e34:	41 e0       	ldi	r20, 0x01	; 1
    1e36:	0e 94 da 06 	call	0xdb4	; 0xdb4 <Dio_SetPinDirection>
}
    1e3a:	cf 91       	pop	r28
    1e3c:	df 91       	pop	r29
    1e3e:	08 95       	ret

00001e40 <LED2_INIT>:
void LED2_INIT() {
    1e40:	df 93       	push	r29
    1e42:	cf 93       	push	r28
    1e44:	cd b7       	in	r28, 0x3d	; 61
    1e46:	de b7       	in	r29, 0x3e	; 62
	Dio_SetPinDirection(GroupD, PIN3, OUTPUT);
    1e48:	83 e0       	ldi	r24, 0x03	; 3
    1e4a:	63 e0       	ldi	r22, 0x03	; 3
    1e4c:	41 e0       	ldi	r20, 0x01	; 1
    1e4e:	0e 94 da 06 	call	0xdb4	; 0xdb4 <Dio_SetPinDirection>
}
    1e52:	cf 91       	pop	r28
    1e54:	df 91       	pop	r29
    1e56:	08 95       	ret

00001e58 <LED_ON>:

void LED_ON(u8 LedNo) {
    1e58:	df 93       	push	r29
    1e5a:	cf 93       	push	r28
    1e5c:	00 d0       	rcall	.+0      	; 0x1e5e <LED_ON+0x6>
    1e5e:	0f 92       	push	r0
    1e60:	cd b7       	in	r28, 0x3d	; 61
    1e62:	de b7       	in	r29, 0x3e	; 62
    1e64:	89 83       	std	Y+1, r24	; 0x01

	switch (LedNo) {
    1e66:	89 81       	ldd	r24, Y+1	; 0x01
    1e68:	28 2f       	mov	r18, r24
    1e6a:	30 e0       	ldi	r19, 0x00	; 0
    1e6c:	3b 83       	std	Y+3, r19	; 0x03
    1e6e:	2a 83       	std	Y+2, r18	; 0x02
    1e70:	8a 81       	ldd	r24, Y+2	; 0x02
    1e72:	9b 81       	ldd	r25, Y+3	; 0x03
    1e74:	81 30       	cpi	r24, 0x01	; 1
    1e76:	91 05       	cpc	r25, r1
    1e78:	79 f0       	breq	.+30     	; 0x1e98 <LED_ON+0x40>
    1e7a:	2a 81       	ldd	r18, Y+2	; 0x02
    1e7c:	3b 81       	ldd	r19, Y+3	; 0x03
    1e7e:	22 30       	cpi	r18, 0x02	; 2
    1e80:	31 05       	cpc	r19, r1
    1e82:	81 f0       	breq	.+32     	; 0x1ea4 <LED_ON+0x4c>
    1e84:	8a 81       	ldd	r24, Y+2	; 0x02
    1e86:	9b 81       	ldd	r25, Y+3	; 0x03
    1e88:	00 97       	sbiw	r24, 0x00	; 0
    1e8a:	89 f4       	brne	.+34     	; 0x1eae <LED_ON+0x56>
	case LED0: Dio_SetPinValue(GroupC, PIN2, HIGH);
    1e8c:	82 e0       	ldi	r24, 0x02	; 2
    1e8e:	62 e0       	ldi	r22, 0x02	; 2
    1e90:	41 e0       	ldi	r20, 0x01	; 1
    1e92:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <Dio_SetPinValue>
    1e96:	0b c0       	rjmp	.+22     	; 0x1eae <LED_ON+0x56>
		break;
	case LED1: Dio_SetPinValue(GroupC, PIN7, HIGH);
    1e98:	82 e0       	ldi	r24, 0x02	; 2
    1e9a:	67 e0       	ldi	r22, 0x07	; 7
    1e9c:	41 e0       	ldi	r20, 0x01	; 1
    1e9e:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <Dio_SetPinValue>
    1ea2:	05 c0       	rjmp	.+10     	; 0x1eae <LED_ON+0x56>
		break;
	case LED2: Dio_SetPinValue(GroupD, PIN3, HIGH);
    1ea4:	83 e0       	ldi	r24, 0x03	; 3
    1ea6:	63 e0       	ldi	r22, 0x03	; 3
    1ea8:	41 e0       	ldi	r20, 0x01	; 1
    1eaa:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <Dio_SetPinValue>
		break;
	}

}
    1eae:	0f 90       	pop	r0
    1eb0:	0f 90       	pop	r0
    1eb2:	0f 90       	pop	r0
    1eb4:	cf 91       	pop	r28
    1eb6:	df 91       	pop	r29
    1eb8:	08 95       	ret

00001eba <LED_OFF>:
void LED_OFF(u8 LedNo)  {
    1eba:	df 93       	push	r29
    1ebc:	cf 93       	push	r28
    1ebe:	00 d0       	rcall	.+0      	; 0x1ec0 <LED_OFF+0x6>
    1ec0:	0f 92       	push	r0
    1ec2:	cd b7       	in	r28, 0x3d	; 61
    1ec4:	de b7       	in	r29, 0x3e	; 62
    1ec6:	89 83       	std	Y+1, r24	; 0x01
	switch (LedNo) {
    1ec8:	89 81       	ldd	r24, Y+1	; 0x01
    1eca:	28 2f       	mov	r18, r24
    1ecc:	30 e0       	ldi	r19, 0x00	; 0
    1ece:	3b 83       	std	Y+3, r19	; 0x03
    1ed0:	2a 83       	std	Y+2, r18	; 0x02
    1ed2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed4:	9b 81       	ldd	r25, Y+3	; 0x03
    1ed6:	81 30       	cpi	r24, 0x01	; 1
    1ed8:	91 05       	cpc	r25, r1
    1eda:	79 f0       	breq	.+30     	; 0x1efa <LED_OFF+0x40>
    1edc:	2a 81       	ldd	r18, Y+2	; 0x02
    1ede:	3b 81       	ldd	r19, Y+3	; 0x03
    1ee0:	22 30       	cpi	r18, 0x02	; 2
    1ee2:	31 05       	cpc	r19, r1
    1ee4:	81 f0       	breq	.+32     	; 0x1f06 <LED_OFF+0x4c>
    1ee6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee8:	9b 81       	ldd	r25, Y+3	; 0x03
    1eea:	00 97       	sbiw	r24, 0x00	; 0
    1eec:	89 f4       	brne	.+34     	; 0x1f10 <LED_OFF+0x56>
	case LED0: Dio_SetPinValue(GroupC, PIN2, LOW);
    1eee:	82 e0       	ldi	r24, 0x02	; 2
    1ef0:	62 e0       	ldi	r22, 0x02	; 2
    1ef2:	40 e0       	ldi	r20, 0x00	; 0
    1ef4:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <Dio_SetPinValue>
    1ef8:	0b c0       	rjmp	.+22     	; 0x1f10 <LED_OFF+0x56>
	break;
	case LED1: Dio_SetPinValue(GroupC, PIN7, LOW);
    1efa:	82 e0       	ldi	r24, 0x02	; 2
    1efc:	67 e0       	ldi	r22, 0x07	; 7
    1efe:	40 e0       	ldi	r20, 0x00	; 0
    1f00:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <Dio_SetPinValue>
    1f04:	05 c0       	rjmp	.+10     	; 0x1f10 <LED_OFF+0x56>
	break;
	case LED2: Dio_SetPinValue(GroupD, PIN3, LOW);
    1f06:	83 e0       	ldi	r24, 0x03	; 3
    1f08:	63 e0       	ldi	r22, 0x03	; 3
    1f0a:	40 e0       	ldi	r20, 0x00	; 0
    1f0c:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <Dio_SetPinValue>
	break;
	}

}
    1f10:	0f 90       	pop	r0
    1f12:	0f 90       	pop	r0
    1f14:	0f 90       	pop	r0
    1f16:	cf 91       	pop	r28
    1f18:	df 91       	pop	r29
    1f1a:	08 95       	ret

00001f1c <main>:
#include <avr/delay.h>
#include "Std_Types.h"
#include "Utilities.h"
#include <stdlib.h>

int main(void) {
    1f1c:	0f 93       	push	r16
    1f1e:	1f 93       	push	r17
    1f20:	df 93       	push	r29
    1f22:	cf 93       	push	r28
    1f24:	cd b7       	in	r28, 0x3d	; 61
    1f26:	de b7       	in	r29, 0x3e	; 62
    1f28:	c2 57       	subi	r28, 0x72	; 114
    1f2a:	d0 40       	sbci	r29, 0x00	; 0
    1f2c:	0f b6       	in	r0, 0x3f	; 63
    1f2e:	f8 94       	cli
    1f30:	de bf       	out	0x3e, r29	; 62
    1f32:	0f be       	out	0x3f, r0	; 63
    1f34:	cd bf       	out	0x3d, r28	; 61

	u32 Digital_vlue = 0, Analog_value = 0;
    1f36:	fe 01       	movw	r30, r28
    1f38:	e9 59       	subi	r30, 0x99	; 153
    1f3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f3c:	10 82       	st	Z, r1
    1f3e:	11 82       	std	Z+1, r1	; 0x01
    1f40:	12 82       	std	Z+2, r1	; 0x02
    1f42:	13 82       	std	Z+3, r1	; 0x03
    1f44:	fe 01       	movw	r30, r28
    1f46:	ed 59       	subi	r30, 0x9D	; 157
    1f48:	ff 4f       	sbci	r31, 0xFF	; 255
    1f4a:	10 82       	st	Z, r1
    1f4c:	11 82       	std	Z+1, r1	; 0x01
    1f4e:	12 82       	std	Z+2, r1	; 0x02
    1f50:	13 82       	std	Z+3, r1	; 0x03
	u8 temperature[8];

	LCD_INIT();
    1f52:	0e 94 59 09 	call	0x12b2	; 0x12b2 <LCD_INIT>
	ADC_INIT();
    1f56:	0e 94 47 06 	call	0xc8e	; 0xc8e <ADC_INIT>
	Dio_SetPinDirection(GroupA, PIN3, OUTPUT);
    1f5a:	80 e0       	ldi	r24, 0x00	; 0
    1f5c:	63 e0       	ldi	r22, 0x03	; 3
    1f5e:	41 e0       	ldi	r20, 0x01	; 1
    1f60:	0e 94 da 06 	call	0xdb4	; 0xdb4 <Dio_SetPinDirection>

	RowAndColume_SET(ROW1, COLUME0);
    1f64:	81 e0       	ldi	r24, 0x01	; 1
    1f66:	60 e0       	ldi	r22, 0x00	; 0
    1f68:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <RowAndColume_SET>
	LCD_WORD("temperature:");
    1f6c:	80 e6       	ldi	r24, 0x60	; 96
    1f6e:	90 e0       	ldi	r25, 0x00	; 0
    1f70:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <LCD_WORD>

	while (1) {

		Digital_vlue = ADC_Read();
    1f74:	0e 94 a2 06 	call	0xd44	; 0xd44 <ADC_Read>
    1f78:	fe 01       	movw	r30, r28
    1f7a:	e9 59       	subi	r30, 0x99	; 153
    1f7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f7e:	cc 01       	movw	r24, r24
    1f80:	a0 e0       	ldi	r26, 0x00	; 0
    1f82:	b0 e0       	ldi	r27, 0x00	; 0
    1f84:	80 83       	st	Z, r24
    1f86:	91 83       	std	Z+1, r25	; 0x01
    1f88:	a2 83       	std	Z+2, r26	; 0x02
    1f8a:	b3 83       	std	Z+3, r27	; 0x03

		Analog_value = ((Digital_vlue * 5 * 100) / 1023);
    1f8c:	fe 01       	movw	r30, r28
    1f8e:	e9 59       	subi	r30, 0x99	; 153
    1f90:	ff 4f       	sbci	r31, 0xFF	; 255
    1f92:	80 81       	ld	r24, Z
    1f94:	91 81       	ldd	r25, Z+1	; 0x01
    1f96:	a2 81       	ldd	r26, Z+2	; 0x02
    1f98:	b3 81       	ldd	r27, Z+3	; 0x03
    1f9a:	24 ef       	ldi	r18, 0xF4	; 244
    1f9c:	31 e0       	ldi	r19, 0x01	; 1
    1f9e:	40 e0       	ldi	r20, 0x00	; 0
    1fa0:	50 e0       	ldi	r21, 0x00	; 0
    1fa2:	bc 01       	movw	r22, r24
    1fa4:	cd 01       	movw	r24, r26
    1fa6:	0e 94 34 14 	call	0x2868	; 0x2868 <__mulsi3>
    1faa:	dc 01       	movw	r26, r24
    1fac:	cb 01       	movw	r24, r22
    1fae:	8e 01       	movw	r16, r28
    1fb0:	0d 59       	subi	r16, 0x9D	; 157
    1fb2:	1f 4f       	sbci	r17, 0xFF	; 255
    1fb4:	2f ef       	ldi	r18, 0xFF	; 255
    1fb6:	33 e0       	ldi	r19, 0x03	; 3
    1fb8:	40 e0       	ldi	r20, 0x00	; 0
    1fba:	50 e0       	ldi	r21, 0x00	; 0
    1fbc:	bc 01       	movw	r22, r24
    1fbe:	cd 01       	movw	r24, r26
    1fc0:	0e 94 53 14 	call	0x28a6	; 0x28a6 <__udivmodsi4>
    1fc4:	da 01       	movw	r26, r20
    1fc6:	c9 01       	movw	r24, r18
    1fc8:	f8 01       	movw	r30, r16
    1fca:	80 83       	st	Z, r24
    1fcc:	91 83       	std	Z+1, r25	; 0x01
    1fce:	a2 83       	std	Z+2, r26	; 0x02
    1fd0:	b3 83       	std	Z+3, r27	; 0x03

		itoa(Analog_value, temperature, 10);
    1fd2:	fe 01       	movw	r30, r28
    1fd4:	ed 59       	subi	r30, 0x9D	; 157
    1fd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd8:	80 81       	ld	r24, Z
    1fda:	91 81       	ldd	r25, Z+1	; 0x01
    1fdc:	9e 01       	movw	r18, r28
    1fde:	25 59       	subi	r18, 0x95	; 149
    1fe0:	3f 4f       	sbci	r19, 0xFF	; 255
    1fe2:	b9 01       	movw	r22, r18
    1fe4:	4a e0       	ldi	r20, 0x0A	; 10
    1fe6:	50 e0       	ldi	r21, 0x00	; 0
    1fe8:	0e 94 ac 14 	call	0x2958	; 0x2958 <itoa>

		RowAndColume_SET(ROW1, COLUME13);
    1fec:	81 e0       	ldi	r24, 0x01	; 1
    1fee:	6d e0       	ldi	r22, 0x0D	; 13
    1ff0:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <RowAndColume_SET>
		LCD_WORD(temperature);
    1ff4:	ce 01       	movw	r24, r28
    1ff6:	85 59       	subi	r24, 0x95	; 149
    1ff8:	9f 4f       	sbci	r25, 0xFF	; 255
    1ffa:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <LCD_WORD>
    1ffe:	fe 01       	movw	r30, r28
    2000:	e1 5a       	subi	r30, 0xA1	; 161
    2002:	ff 4f       	sbci	r31, 0xFF	; 255
    2004:	80 e0       	ldi	r24, 0x00	; 0
    2006:	90 e0       	ldi	r25, 0x00	; 0
    2008:	aa ef       	ldi	r26, 0xFA	; 250
    200a:	b3 e4       	ldi	r27, 0x43	; 67
    200c:	80 83       	st	Z, r24
    200e:	91 83       	std	Z+1, r25	; 0x01
    2010:	a2 83       	std	Z+2, r26	; 0x02
    2012:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2014:	8e 01       	movw	r16, r28
    2016:	05 5a       	subi	r16, 0xA5	; 165
    2018:	1f 4f       	sbci	r17, 0xFF	; 255
    201a:	fe 01       	movw	r30, r28
    201c:	e1 5a       	subi	r30, 0xA1	; 161
    201e:	ff 4f       	sbci	r31, 0xFF	; 255
    2020:	60 81       	ld	r22, Z
    2022:	71 81       	ldd	r23, Z+1	; 0x01
    2024:	82 81       	ldd	r24, Z+2	; 0x02
    2026:	93 81       	ldd	r25, Z+3	; 0x03
    2028:	20 e0       	ldi	r18, 0x00	; 0
    202a:	30 e0       	ldi	r19, 0x00	; 0
    202c:	4a e7       	ldi	r20, 0x7A	; 122
    202e:	55 e4       	ldi	r21, 0x45	; 69
    2030:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2034:	dc 01       	movw	r26, r24
    2036:	cb 01       	movw	r24, r22
    2038:	f8 01       	movw	r30, r16
    203a:	80 83       	st	Z, r24
    203c:	91 83       	std	Z+1, r25	; 0x01
    203e:	a2 83       	std	Z+2, r26	; 0x02
    2040:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2042:	fe 01       	movw	r30, r28
    2044:	e5 5a       	subi	r30, 0xA5	; 165
    2046:	ff 4f       	sbci	r31, 0xFF	; 255
    2048:	60 81       	ld	r22, Z
    204a:	71 81       	ldd	r23, Z+1	; 0x01
    204c:	82 81       	ldd	r24, Z+2	; 0x02
    204e:	93 81       	ldd	r25, Z+3	; 0x03
    2050:	20 e0       	ldi	r18, 0x00	; 0
    2052:	30 e0       	ldi	r19, 0x00	; 0
    2054:	40 e8       	ldi	r20, 0x80	; 128
    2056:	5f e3       	ldi	r21, 0x3F	; 63
    2058:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    205c:	88 23       	and	r24, r24
    205e:	44 f4       	brge	.+16     	; 0x2070 <main+0x154>
		__ticks = 1;
    2060:	fe 01       	movw	r30, r28
    2062:	e7 5a       	subi	r30, 0xA7	; 167
    2064:	ff 4f       	sbci	r31, 0xFF	; 255
    2066:	81 e0       	ldi	r24, 0x01	; 1
    2068:	90 e0       	ldi	r25, 0x00	; 0
    206a:	91 83       	std	Z+1, r25	; 0x01
    206c:	80 83       	st	Z, r24
    206e:	64 c0       	rjmp	.+200    	; 0x2138 <main+0x21c>
	else if (__tmp > 65535)
    2070:	fe 01       	movw	r30, r28
    2072:	e5 5a       	subi	r30, 0xA5	; 165
    2074:	ff 4f       	sbci	r31, 0xFF	; 255
    2076:	60 81       	ld	r22, Z
    2078:	71 81       	ldd	r23, Z+1	; 0x01
    207a:	82 81       	ldd	r24, Z+2	; 0x02
    207c:	93 81       	ldd	r25, Z+3	; 0x03
    207e:	20 e0       	ldi	r18, 0x00	; 0
    2080:	3f ef       	ldi	r19, 0xFF	; 255
    2082:	4f e7       	ldi	r20, 0x7F	; 127
    2084:	57 e4       	ldi	r21, 0x47	; 71
    2086:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    208a:	18 16       	cp	r1, r24
    208c:	0c f0       	brlt	.+2      	; 0x2090 <main+0x174>
    208e:	43 c0       	rjmp	.+134    	; 0x2116 <main+0x1fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2090:	fe 01       	movw	r30, r28
    2092:	e1 5a       	subi	r30, 0xA1	; 161
    2094:	ff 4f       	sbci	r31, 0xFF	; 255
    2096:	60 81       	ld	r22, Z
    2098:	71 81       	ldd	r23, Z+1	; 0x01
    209a:	82 81       	ldd	r24, Z+2	; 0x02
    209c:	93 81       	ldd	r25, Z+3	; 0x03
    209e:	20 e0       	ldi	r18, 0x00	; 0
    20a0:	30 e0       	ldi	r19, 0x00	; 0
    20a2:	40 e2       	ldi	r20, 0x20	; 32
    20a4:	51 e4       	ldi	r21, 0x41	; 65
    20a6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20aa:	dc 01       	movw	r26, r24
    20ac:	cb 01       	movw	r24, r22
    20ae:	8e 01       	movw	r16, r28
    20b0:	07 5a       	subi	r16, 0xA7	; 167
    20b2:	1f 4f       	sbci	r17, 0xFF	; 255
    20b4:	bc 01       	movw	r22, r24
    20b6:	cd 01       	movw	r24, r26
    20b8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20bc:	dc 01       	movw	r26, r24
    20be:	cb 01       	movw	r24, r22
    20c0:	f8 01       	movw	r30, r16
    20c2:	91 83       	std	Z+1, r25	; 0x01
    20c4:	80 83       	st	Z, r24
    20c6:	1f c0       	rjmp	.+62     	; 0x2106 <main+0x1ea>
    20c8:	fe 01       	movw	r30, r28
    20ca:	e9 5a       	subi	r30, 0xA9	; 169
    20cc:	ff 4f       	sbci	r31, 0xFF	; 255
    20ce:	80 e9       	ldi	r24, 0x90	; 144
    20d0:	91 e0       	ldi	r25, 0x01	; 1
    20d2:	91 83       	std	Z+1, r25	; 0x01
    20d4:	80 83       	st	Z, r24
    20d6:	fe 01       	movw	r30, r28
    20d8:	e9 5a       	subi	r30, 0xA9	; 169
    20da:	ff 4f       	sbci	r31, 0xFF	; 255
    20dc:	80 81       	ld	r24, Z
    20de:	91 81       	ldd	r25, Z+1	; 0x01
    20e0:	01 97       	sbiw	r24, 0x01	; 1
    20e2:	f1 f7       	brne	.-4      	; 0x20e0 <main+0x1c4>
    20e4:	fe 01       	movw	r30, r28
    20e6:	e9 5a       	subi	r30, 0xA9	; 169
    20e8:	ff 4f       	sbci	r31, 0xFF	; 255
    20ea:	91 83       	std	Z+1, r25	; 0x01
    20ec:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20ee:	de 01       	movw	r26, r28
    20f0:	a7 5a       	subi	r26, 0xA7	; 167
    20f2:	bf 4f       	sbci	r27, 0xFF	; 255
    20f4:	fe 01       	movw	r30, r28
    20f6:	e7 5a       	subi	r30, 0xA7	; 167
    20f8:	ff 4f       	sbci	r31, 0xFF	; 255
    20fa:	80 81       	ld	r24, Z
    20fc:	91 81       	ldd	r25, Z+1	; 0x01
    20fe:	01 97       	sbiw	r24, 0x01	; 1
    2100:	11 96       	adiw	r26, 0x01	; 1
    2102:	9c 93       	st	X, r25
    2104:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2106:	fe 01       	movw	r30, r28
    2108:	e7 5a       	subi	r30, 0xA7	; 167
    210a:	ff 4f       	sbci	r31, 0xFF	; 255
    210c:	80 81       	ld	r24, Z
    210e:	91 81       	ldd	r25, Z+1	; 0x01
    2110:	00 97       	sbiw	r24, 0x00	; 0
    2112:	d1 f6       	brne	.-76     	; 0x20c8 <main+0x1ac>
    2114:	27 c0       	rjmp	.+78     	; 0x2164 <main+0x248>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2116:	8e 01       	movw	r16, r28
    2118:	07 5a       	subi	r16, 0xA7	; 167
    211a:	1f 4f       	sbci	r17, 0xFF	; 255
    211c:	fe 01       	movw	r30, r28
    211e:	e5 5a       	subi	r30, 0xA5	; 165
    2120:	ff 4f       	sbci	r31, 0xFF	; 255
    2122:	60 81       	ld	r22, Z
    2124:	71 81       	ldd	r23, Z+1	; 0x01
    2126:	82 81       	ldd	r24, Z+2	; 0x02
    2128:	93 81       	ldd	r25, Z+3	; 0x03
    212a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    212e:	dc 01       	movw	r26, r24
    2130:	cb 01       	movw	r24, r22
    2132:	f8 01       	movw	r30, r16
    2134:	91 83       	std	Z+1, r25	; 0x01
    2136:	80 83       	st	Z, r24
    2138:	de 01       	movw	r26, r28
    213a:	ab 5a       	subi	r26, 0xAB	; 171
    213c:	bf 4f       	sbci	r27, 0xFF	; 255
    213e:	fe 01       	movw	r30, r28
    2140:	e7 5a       	subi	r30, 0xA7	; 167
    2142:	ff 4f       	sbci	r31, 0xFF	; 255
    2144:	80 81       	ld	r24, Z
    2146:	91 81       	ldd	r25, Z+1	; 0x01
    2148:	8d 93       	st	X+, r24
    214a:	9c 93       	st	X, r25
    214c:	fe 01       	movw	r30, r28
    214e:	eb 5a       	subi	r30, 0xAB	; 171
    2150:	ff 4f       	sbci	r31, 0xFF	; 255
    2152:	80 81       	ld	r24, Z
    2154:	91 81       	ldd	r25, Z+1	; 0x01
    2156:	01 97       	sbiw	r24, 0x01	; 1
    2158:	f1 f7       	brne	.-4      	; 0x2156 <main+0x23a>
    215a:	fe 01       	movw	r30, r28
    215c:	eb 5a       	subi	r30, 0xAB	; 171
    215e:	ff 4f       	sbci	r31, 0xFF	; 255
    2160:	91 83       	std	Z+1, r25	; 0x01
    2162:	80 83       	st	Z, r24
		_delay_ms(500);

		if ((Analog_value > 29) && (Analog_value < 31)) {
    2164:	fe 01       	movw	r30, r28
    2166:	ed 59       	subi	r30, 0x9D	; 157
    2168:	ff 4f       	sbci	r31, 0xFF	; 255
    216a:	80 81       	ld	r24, Z
    216c:	91 81       	ldd	r25, Z+1	; 0x01
    216e:	a2 81       	ldd	r26, Z+2	; 0x02
    2170:	b3 81       	ldd	r27, Z+3	; 0x03
    2172:	8e 31       	cpi	r24, 0x1E	; 30
    2174:	91 05       	cpc	r25, r1
    2176:	a1 05       	cpc	r26, r1
    2178:	b1 05       	cpc	r27, r1
    217a:	08 f4       	brcc	.+2      	; 0x217e <main+0x262>
    217c:	50 c1       	rjmp	.+672    	; 0x241e <main+0x502>
    217e:	fe 01       	movw	r30, r28
    2180:	ed 59       	subi	r30, 0x9D	; 157
    2182:	ff 4f       	sbci	r31, 0xFF	; 255
    2184:	80 81       	ld	r24, Z
    2186:	91 81       	ldd	r25, Z+1	; 0x01
    2188:	a2 81       	ldd	r26, Z+2	; 0x02
    218a:	b3 81       	ldd	r27, Z+3	; 0x03
    218c:	8f 31       	cpi	r24, 0x1F	; 31
    218e:	91 05       	cpc	r25, r1
    2190:	a1 05       	cpc	r26, r1
    2192:	b1 05       	cpc	r27, r1
    2194:	08 f0       	brcs	.+2      	; 0x2198 <main+0x27c>
    2196:	43 c1       	rjmp	.+646    	; 0x241e <main+0x502>
			Dio_SetPinValue(GroupA, PIN3, HIGH);
    2198:	80 e0       	ldi	r24, 0x00	; 0
    219a:	63 e0       	ldi	r22, 0x03	; 3
    219c:	41 e0       	ldi	r20, 0x01	; 1
    219e:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <Dio_SetPinValue>
    21a2:	fe 01       	movw	r30, r28
    21a4:	ef 5a       	subi	r30, 0xAF	; 175
    21a6:	ff 4f       	sbci	r31, 0xFF	; 255
    21a8:	80 e0       	ldi	r24, 0x00	; 0
    21aa:	90 e0       	ldi	r25, 0x00	; 0
    21ac:	aa ef       	ldi	r26, 0xFA	; 250
    21ae:	b3 e4       	ldi	r27, 0x43	; 67
    21b0:	80 83       	st	Z, r24
    21b2:	91 83       	std	Z+1, r25	; 0x01
    21b4:	a2 83       	std	Z+2, r26	; 0x02
    21b6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21b8:	8e 01       	movw	r16, r28
    21ba:	03 5b       	subi	r16, 0xB3	; 179
    21bc:	1f 4f       	sbci	r17, 0xFF	; 255
    21be:	fe 01       	movw	r30, r28
    21c0:	ef 5a       	subi	r30, 0xAF	; 175
    21c2:	ff 4f       	sbci	r31, 0xFF	; 255
    21c4:	60 81       	ld	r22, Z
    21c6:	71 81       	ldd	r23, Z+1	; 0x01
    21c8:	82 81       	ldd	r24, Z+2	; 0x02
    21ca:	93 81       	ldd	r25, Z+3	; 0x03
    21cc:	20 e0       	ldi	r18, 0x00	; 0
    21ce:	30 e0       	ldi	r19, 0x00	; 0
    21d0:	4a e7       	ldi	r20, 0x7A	; 122
    21d2:	55 e4       	ldi	r21, 0x45	; 69
    21d4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21d8:	dc 01       	movw	r26, r24
    21da:	cb 01       	movw	r24, r22
    21dc:	f8 01       	movw	r30, r16
    21de:	80 83       	st	Z, r24
    21e0:	91 83       	std	Z+1, r25	; 0x01
    21e2:	a2 83       	std	Z+2, r26	; 0x02
    21e4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    21e6:	fe 01       	movw	r30, r28
    21e8:	e3 5b       	subi	r30, 0xB3	; 179
    21ea:	ff 4f       	sbci	r31, 0xFF	; 255
    21ec:	60 81       	ld	r22, Z
    21ee:	71 81       	ldd	r23, Z+1	; 0x01
    21f0:	82 81       	ldd	r24, Z+2	; 0x02
    21f2:	93 81       	ldd	r25, Z+3	; 0x03
    21f4:	20 e0       	ldi	r18, 0x00	; 0
    21f6:	30 e0       	ldi	r19, 0x00	; 0
    21f8:	40 e8       	ldi	r20, 0x80	; 128
    21fa:	5f e3       	ldi	r21, 0x3F	; 63
    21fc:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2200:	88 23       	and	r24, r24
    2202:	44 f4       	brge	.+16     	; 0x2214 <main+0x2f8>
		__ticks = 1;
    2204:	fe 01       	movw	r30, r28
    2206:	e5 5b       	subi	r30, 0xB5	; 181
    2208:	ff 4f       	sbci	r31, 0xFF	; 255
    220a:	81 e0       	ldi	r24, 0x01	; 1
    220c:	90 e0       	ldi	r25, 0x00	; 0
    220e:	91 83       	std	Z+1, r25	; 0x01
    2210:	80 83       	st	Z, r24
    2212:	64 c0       	rjmp	.+200    	; 0x22dc <main+0x3c0>
	else if (__tmp > 65535)
    2214:	fe 01       	movw	r30, r28
    2216:	e3 5b       	subi	r30, 0xB3	; 179
    2218:	ff 4f       	sbci	r31, 0xFF	; 255
    221a:	60 81       	ld	r22, Z
    221c:	71 81       	ldd	r23, Z+1	; 0x01
    221e:	82 81       	ldd	r24, Z+2	; 0x02
    2220:	93 81       	ldd	r25, Z+3	; 0x03
    2222:	20 e0       	ldi	r18, 0x00	; 0
    2224:	3f ef       	ldi	r19, 0xFF	; 255
    2226:	4f e7       	ldi	r20, 0x7F	; 127
    2228:	57 e4       	ldi	r21, 0x47	; 71
    222a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    222e:	18 16       	cp	r1, r24
    2230:	0c f0       	brlt	.+2      	; 0x2234 <main+0x318>
    2232:	43 c0       	rjmp	.+134    	; 0x22ba <main+0x39e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2234:	fe 01       	movw	r30, r28
    2236:	ef 5a       	subi	r30, 0xAF	; 175
    2238:	ff 4f       	sbci	r31, 0xFF	; 255
    223a:	60 81       	ld	r22, Z
    223c:	71 81       	ldd	r23, Z+1	; 0x01
    223e:	82 81       	ldd	r24, Z+2	; 0x02
    2240:	93 81       	ldd	r25, Z+3	; 0x03
    2242:	20 e0       	ldi	r18, 0x00	; 0
    2244:	30 e0       	ldi	r19, 0x00	; 0
    2246:	40 e2       	ldi	r20, 0x20	; 32
    2248:	51 e4       	ldi	r21, 0x41	; 65
    224a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    224e:	dc 01       	movw	r26, r24
    2250:	cb 01       	movw	r24, r22
    2252:	8e 01       	movw	r16, r28
    2254:	05 5b       	subi	r16, 0xB5	; 181
    2256:	1f 4f       	sbci	r17, 0xFF	; 255
    2258:	bc 01       	movw	r22, r24
    225a:	cd 01       	movw	r24, r26
    225c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2260:	dc 01       	movw	r26, r24
    2262:	cb 01       	movw	r24, r22
    2264:	f8 01       	movw	r30, r16
    2266:	91 83       	std	Z+1, r25	; 0x01
    2268:	80 83       	st	Z, r24
    226a:	1f c0       	rjmp	.+62     	; 0x22aa <main+0x38e>
    226c:	fe 01       	movw	r30, r28
    226e:	e7 5b       	subi	r30, 0xB7	; 183
    2270:	ff 4f       	sbci	r31, 0xFF	; 255
    2272:	80 e9       	ldi	r24, 0x90	; 144
    2274:	91 e0       	ldi	r25, 0x01	; 1
    2276:	91 83       	std	Z+1, r25	; 0x01
    2278:	80 83       	st	Z, r24
    227a:	fe 01       	movw	r30, r28
    227c:	e7 5b       	subi	r30, 0xB7	; 183
    227e:	ff 4f       	sbci	r31, 0xFF	; 255
    2280:	80 81       	ld	r24, Z
    2282:	91 81       	ldd	r25, Z+1	; 0x01
    2284:	01 97       	sbiw	r24, 0x01	; 1
    2286:	f1 f7       	brne	.-4      	; 0x2284 <main+0x368>
    2288:	fe 01       	movw	r30, r28
    228a:	e7 5b       	subi	r30, 0xB7	; 183
    228c:	ff 4f       	sbci	r31, 0xFF	; 255
    228e:	91 83       	std	Z+1, r25	; 0x01
    2290:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2292:	de 01       	movw	r26, r28
    2294:	a5 5b       	subi	r26, 0xB5	; 181
    2296:	bf 4f       	sbci	r27, 0xFF	; 255
    2298:	fe 01       	movw	r30, r28
    229a:	e5 5b       	subi	r30, 0xB5	; 181
    229c:	ff 4f       	sbci	r31, 0xFF	; 255
    229e:	80 81       	ld	r24, Z
    22a0:	91 81       	ldd	r25, Z+1	; 0x01
    22a2:	01 97       	sbiw	r24, 0x01	; 1
    22a4:	11 96       	adiw	r26, 0x01	; 1
    22a6:	9c 93       	st	X, r25
    22a8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22aa:	fe 01       	movw	r30, r28
    22ac:	e5 5b       	subi	r30, 0xB5	; 181
    22ae:	ff 4f       	sbci	r31, 0xFF	; 255
    22b0:	80 81       	ld	r24, Z
    22b2:	91 81       	ldd	r25, Z+1	; 0x01
    22b4:	00 97       	sbiw	r24, 0x00	; 0
    22b6:	d1 f6       	brne	.-76     	; 0x226c <main+0x350>
    22b8:	27 c0       	rjmp	.+78     	; 0x2308 <main+0x3ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22ba:	8e 01       	movw	r16, r28
    22bc:	05 5b       	subi	r16, 0xB5	; 181
    22be:	1f 4f       	sbci	r17, 0xFF	; 255
    22c0:	fe 01       	movw	r30, r28
    22c2:	e3 5b       	subi	r30, 0xB3	; 179
    22c4:	ff 4f       	sbci	r31, 0xFF	; 255
    22c6:	60 81       	ld	r22, Z
    22c8:	71 81       	ldd	r23, Z+1	; 0x01
    22ca:	82 81       	ldd	r24, Z+2	; 0x02
    22cc:	93 81       	ldd	r25, Z+3	; 0x03
    22ce:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22d2:	dc 01       	movw	r26, r24
    22d4:	cb 01       	movw	r24, r22
    22d6:	f8 01       	movw	r30, r16
    22d8:	91 83       	std	Z+1, r25	; 0x01
    22da:	80 83       	st	Z, r24
    22dc:	de 01       	movw	r26, r28
    22de:	a9 5b       	subi	r26, 0xB9	; 185
    22e0:	bf 4f       	sbci	r27, 0xFF	; 255
    22e2:	fe 01       	movw	r30, r28
    22e4:	e5 5b       	subi	r30, 0xB5	; 181
    22e6:	ff 4f       	sbci	r31, 0xFF	; 255
    22e8:	80 81       	ld	r24, Z
    22ea:	91 81       	ldd	r25, Z+1	; 0x01
    22ec:	8d 93       	st	X+, r24
    22ee:	9c 93       	st	X, r25
    22f0:	fe 01       	movw	r30, r28
    22f2:	e9 5b       	subi	r30, 0xB9	; 185
    22f4:	ff 4f       	sbci	r31, 0xFF	; 255
    22f6:	80 81       	ld	r24, Z
    22f8:	91 81       	ldd	r25, Z+1	; 0x01
    22fa:	01 97       	sbiw	r24, 0x01	; 1
    22fc:	f1 f7       	brne	.-4      	; 0x22fa <main+0x3de>
    22fe:	fe 01       	movw	r30, r28
    2300:	e9 5b       	subi	r30, 0xB9	; 185
    2302:	ff 4f       	sbci	r31, 0xFF	; 255
    2304:	91 83       	std	Z+1, r25	; 0x01
    2306:	80 83       	st	Z, r24
			_delay_ms(500);
			Dio_SetPinValue(GroupA, PIN3, LOW);
    2308:	80 e0       	ldi	r24, 0x00	; 0
    230a:	63 e0       	ldi	r22, 0x03	; 3
    230c:	40 e0       	ldi	r20, 0x00	; 0
    230e:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <Dio_SetPinValue>
    2312:	fe 01       	movw	r30, r28
    2314:	ed 5b       	subi	r30, 0xBD	; 189
    2316:	ff 4f       	sbci	r31, 0xFF	; 255
    2318:	80 e0       	ldi	r24, 0x00	; 0
    231a:	90 e0       	ldi	r25, 0x00	; 0
    231c:	aa ef       	ldi	r26, 0xFA	; 250
    231e:	b3 e4       	ldi	r27, 0x43	; 67
    2320:	80 83       	st	Z, r24
    2322:	91 83       	std	Z+1, r25	; 0x01
    2324:	a2 83       	std	Z+2, r26	; 0x02
    2326:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2328:	8e 01       	movw	r16, r28
    232a:	01 5c       	subi	r16, 0xC1	; 193
    232c:	1f 4f       	sbci	r17, 0xFF	; 255
    232e:	fe 01       	movw	r30, r28
    2330:	ed 5b       	subi	r30, 0xBD	; 189
    2332:	ff 4f       	sbci	r31, 0xFF	; 255
    2334:	60 81       	ld	r22, Z
    2336:	71 81       	ldd	r23, Z+1	; 0x01
    2338:	82 81       	ldd	r24, Z+2	; 0x02
    233a:	93 81       	ldd	r25, Z+3	; 0x03
    233c:	20 e0       	ldi	r18, 0x00	; 0
    233e:	30 e0       	ldi	r19, 0x00	; 0
    2340:	4a e7       	ldi	r20, 0x7A	; 122
    2342:	55 e4       	ldi	r21, 0x45	; 69
    2344:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2348:	dc 01       	movw	r26, r24
    234a:	cb 01       	movw	r24, r22
    234c:	f8 01       	movw	r30, r16
    234e:	80 83       	st	Z, r24
    2350:	91 83       	std	Z+1, r25	; 0x01
    2352:	a2 83       	std	Z+2, r26	; 0x02
    2354:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2356:	fe 01       	movw	r30, r28
    2358:	ff 96       	adiw	r30, 0x3f	; 63
    235a:	60 81       	ld	r22, Z
    235c:	71 81       	ldd	r23, Z+1	; 0x01
    235e:	82 81       	ldd	r24, Z+2	; 0x02
    2360:	93 81       	ldd	r25, Z+3	; 0x03
    2362:	20 e0       	ldi	r18, 0x00	; 0
    2364:	30 e0       	ldi	r19, 0x00	; 0
    2366:	40 e8       	ldi	r20, 0x80	; 128
    2368:	5f e3       	ldi	r21, 0x3F	; 63
    236a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    236e:	88 23       	and	r24, r24
    2370:	2c f4       	brge	.+10     	; 0x237c <main+0x460>
		__ticks = 1;
    2372:	81 e0       	ldi	r24, 0x01	; 1
    2374:	90 e0       	ldi	r25, 0x00	; 0
    2376:	9e af       	std	Y+62, r25	; 0x3e
    2378:	8d af       	std	Y+61, r24	; 0x3d
    237a:	46 c0       	rjmp	.+140    	; 0x2408 <main+0x4ec>
	else if (__tmp > 65535)
    237c:	fe 01       	movw	r30, r28
    237e:	ff 96       	adiw	r30, 0x3f	; 63
    2380:	60 81       	ld	r22, Z
    2382:	71 81       	ldd	r23, Z+1	; 0x01
    2384:	82 81       	ldd	r24, Z+2	; 0x02
    2386:	93 81       	ldd	r25, Z+3	; 0x03
    2388:	20 e0       	ldi	r18, 0x00	; 0
    238a:	3f ef       	ldi	r19, 0xFF	; 255
    238c:	4f e7       	ldi	r20, 0x7F	; 127
    238e:	57 e4       	ldi	r21, 0x47	; 71
    2390:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2394:	18 16       	cp	r1, r24
    2396:	64 f5       	brge	.+88     	; 0x23f0 <main+0x4d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2398:	fe 01       	movw	r30, r28
    239a:	ed 5b       	subi	r30, 0xBD	; 189
    239c:	ff 4f       	sbci	r31, 0xFF	; 255
    239e:	60 81       	ld	r22, Z
    23a0:	71 81       	ldd	r23, Z+1	; 0x01
    23a2:	82 81       	ldd	r24, Z+2	; 0x02
    23a4:	93 81       	ldd	r25, Z+3	; 0x03
    23a6:	20 e0       	ldi	r18, 0x00	; 0
    23a8:	30 e0       	ldi	r19, 0x00	; 0
    23aa:	40 e2       	ldi	r20, 0x20	; 32
    23ac:	51 e4       	ldi	r21, 0x41	; 65
    23ae:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23b2:	dc 01       	movw	r26, r24
    23b4:	cb 01       	movw	r24, r22
    23b6:	bc 01       	movw	r22, r24
    23b8:	cd 01       	movw	r24, r26
    23ba:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23be:	dc 01       	movw	r26, r24
    23c0:	cb 01       	movw	r24, r22
    23c2:	9e af       	std	Y+62, r25	; 0x3e
    23c4:	8d af       	std	Y+61, r24	; 0x3d
    23c6:	0f c0       	rjmp	.+30     	; 0x23e6 <main+0x4ca>
    23c8:	80 e9       	ldi	r24, 0x90	; 144
    23ca:	91 e0       	ldi	r25, 0x01	; 1
    23cc:	9c af       	std	Y+60, r25	; 0x3c
    23ce:	8b af       	std	Y+59, r24	; 0x3b
    23d0:	8b ad       	ldd	r24, Y+59	; 0x3b
    23d2:	9c ad       	ldd	r25, Y+60	; 0x3c
    23d4:	01 97       	sbiw	r24, 0x01	; 1
    23d6:	f1 f7       	brne	.-4      	; 0x23d4 <main+0x4b8>
    23d8:	9c af       	std	Y+60, r25	; 0x3c
    23da:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23dc:	8d ad       	ldd	r24, Y+61	; 0x3d
    23de:	9e ad       	ldd	r25, Y+62	; 0x3e
    23e0:	01 97       	sbiw	r24, 0x01	; 1
    23e2:	9e af       	std	Y+62, r25	; 0x3e
    23e4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23e6:	8d ad       	ldd	r24, Y+61	; 0x3d
    23e8:	9e ad       	ldd	r25, Y+62	; 0x3e
    23ea:	00 97       	sbiw	r24, 0x00	; 0
    23ec:	69 f7       	brne	.-38     	; 0x23c8 <main+0x4ac>
    23ee:	c2 cd       	rjmp	.-1148   	; 0x1f74 <main+0x58>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23f0:	fe 01       	movw	r30, r28
    23f2:	ff 96       	adiw	r30, 0x3f	; 63
    23f4:	60 81       	ld	r22, Z
    23f6:	71 81       	ldd	r23, Z+1	; 0x01
    23f8:	82 81       	ldd	r24, Z+2	; 0x02
    23fa:	93 81       	ldd	r25, Z+3	; 0x03
    23fc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2400:	dc 01       	movw	r26, r24
    2402:	cb 01       	movw	r24, r22
    2404:	9e af       	std	Y+62, r25	; 0x3e
    2406:	8d af       	std	Y+61, r24	; 0x3d
    2408:	8d ad       	ldd	r24, Y+61	; 0x3d
    240a:	9e ad       	ldd	r25, Y+62	; 0x3e
    240c:	9a af       	std	Y+58, r25	; 0x3a
    240e:	89 af       	std	Y+57, r24	; 0x39
    2410:	89 ad       	ldd	r24, Y+57	; 0x39
    2412:	9a ad       	ldd	r25, Y+58	; 0x3a
    2414:	01 97       	sbiw	r24, 0x01	; 1
    2416:	f1 f7       	brne	.-4      	; 0x2414 <main+0x4f8>
    2418:	9a af       	std	Y+58, r25	; 0x3a
    241a:	89 af       	std	Y+57, r24	; 0x39
    241c:	ab cd       	rjmp	.-1194   	; 0x1f74 <main+0x58>
			_delay_ms(500);
		} else if ((Analog_value > 31) && (Analog_value < 33)) {
    241e:	fe 01       	movw	r30, r28
    2420:	ed 59       	subi	r30, 0x9D	; 157
    2422:	ff 4f       	sbci	r31, 0xFF	; 255
    2424:	80 81       	ld	r24, Z
    2426:	91 81       	ldd	r25, Z+1	; 0x01
    2428:	a2 81       	ldd	r26, Z+2	; 0x02
    242a:	b3 81       	ldd	r27, Z+3	; 0x03
    242c:	80 32       	cpi	r24, 0x20	; 32
    242e:	91 05       	cpc	r25, r1
    2430:	a1 05       	cpc	r26, r1
    2432:	b1 05       	cpc	r27, r1
    2434:	08 f4       	brcc	.+2      	; 0x2438 <main+0x51c>
    2436:	fc c0       	rjmp	.+504    	; 0x2630 <main+0x714>
    2438:	fe 01       	movw	r30, r28
    243a:	ed 59       	subi	r30, 0x9D	; 157
    243c:	ff 4f       	sbci	r31, 0xFF	; 255
    243e:	80 81       	ld	r24, Z
    2440:	91 81       	ldd	r25, Z+1	; 0x01
    2442:	a2 81       	ldd	r26, Z+2	; 0x02
    2444:	b3 81       	ldd	r27, Z+3	; 0x03
    2446:	81 32       	cpi	r24, 0x21	; 33
    2448:	91 05       	cpc	r25, r1
    244a:	a1 05       	cpc	r26, r1
    244c:	b1 05       	cpc	r27, r1
    244e:	08 f0       	brcs	.+2      	; 0x2452 <main+0x536>
    2450:	ef c0       	rjmp	.+478    	; 0x2630 <main+0x714>
			Dio_SetPinValue(GroupA, PIN3, HIGH);
    2452:	80 e0       	ldi	r24, 0x00	; 0
    2454:	63 e0       	ldi	r22, 0x03	; 3
    2456:	41 e0       	ldi	r20, 0x01	; 1
    2458:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <Dio_SetPinValue>
    245c:	80 e0       	ldi	r24, 0x00	; 0
    245e:	90 e0       	ldi	r25, 0x00	; 0
    2460:	aa e7       	ldi	r26, 0x7A	; 122
    2462:	b3 e4       	ldi	r27, 0x43	; 67
    2464:	8d ab       	std	Y+53, r24	; 0x35
    2466:	9e ab       	std	Y+54, r25	; 0x36
    2468:	af ab       	std	Y+55, r26	; 0x37
    246a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    246c:	6d a9       	ldd	r22, Y+53	; 0x35
    246e:	7e a9       	ldd	r23, Y+54	; 0x36
    2470:	8f a9       	ldd	r24, Y+55	; 0x37
    2472:	98 ad       	ldd	r25, Y+56	; 0x38
    2474:	20 e0       	ldi	r18, 0x00	; 0
    2476:	30 e0       	ldi	r19, 0x00	; 0
    2478:	4a e7       	ldi	r20, 0x7A	; 122
    247a:	55 e4       	ldi	r21, 0x45	; 69
    247c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2480:	dc 01       	movw	r26, r24
    2482:	cb 01       	movw	r24, r22
    2484:	89 ab       	std	Y+49, r24	; 0x31
    2486:	9a ab       	std	Y+50, r25	; 0x32
    2488:	ab ab       	std	Y+51, r26	; 0x33
    248a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    248c:	69 a9       	ldd	r22, Y+49	; 0x31
    248e:	7a a9       	ldd	r23, Y+50	; 0x32
    2490:	8b a9       	ldd	r24, Y+51	; 0x33
    2492:	9c a9       	ldd	r25, Y+52	; 0x34
    2494:	20 e0       	ldi	r18, 0x00	; 0
    2496:	30 e0       	ldi	r19, 0x00	; 0
    2498:	40 e8       	ldi	r20, 0x80	; 128
    249a:	5f e3       	ldi	r21, 0x3F	; 63
    249c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    24a0:	88 23       	and	r24, r24
    24a2:	2c f4       	brge	.+10     	; 0x24ae <main+0x592>
		__ticks = 1;
    24a4:	81 e0       	ldi	r24, 0x01	; 1
    24a6:	90 e0       	ldi	r25, 0x00	; 0
    24a8:	98 ab       	std	Y+48, r25	; 0x30
    24aa:	8f a7       	std	Y+47, r24	; 0x2f
    24ac:	3f c0       	rjmp	.+126    	; 0x252c <main+0x610>
	else if (__tmp > 65535)
    24ae:	69 a9       	ldd	r22, Y+49	; 0x31
    24b0:	7a a9       	ldd	r23, Y+50	; 0x32
    24b2:	8b a9       	ldd	r24, Y+51	; 0x33
    24b4:	9c a9       	ldd	r25, Y+52	; 0x34
    24b6:	20 e0       	ldi	r18, 0x00	; 0
    24b8:	3f ef       	ldi	r19, 0xFF	; 255
    24ba:	4f e7       	ldi	r20, 0x7F	; 127
    24bc:	57 e4       	ldi	r21, 0x47	; 71
    24be:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    24c2:	18 16       	cp	r1, r24
    24c4:	4c f5       	brge	.+82     	; 0x2518 <main+0x5fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24c6:	6d a9       	ldd	r22, Y+53	; 0x35
    24c8:	7e a9       	ldd	r23, Y+54	; 0x36
    24ca:	8f a9       	ldd	r24, Y+55	; 0x37
    24cc:	98 ad       	ldd	r25, Y+56	; 0x38
    24ce:	20 e0       	ldi	r18, 0x00	; 0
    24d0:	30 e0       	ldi	r19, 0x00	; 0
    24d2:	40 e2       	ldi	r20, 0x20	; 32
    24d4:	51 e4       	ldi	r21, 0x41	; 65
    24d6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24da:	dc 01       	movw	r26, r24
    24dc:	cb 01       	movw	r24, r22
    24de:	bc 01       	movw	r22, r24
    24e0:	cd 01       	movw	r24, r26
    24e2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    24e6:	dc 01       	movw	r26, r24
    24e8:	cb 01       	movw	r24, r22
    24ea:	98 ab       	std	Y+48, r25	; 0x30
    24ec:	8f a7       	std	Y+47, r24	; 0x2f
    24ee:	0f c0       	rjmp	.+30     	; 0x250e <main+0x5f2>
    24f0:	80 e9       	ldi	r24, 0x90	; 144
    24f2:	91 e0       	ldi	r25, 0x01	; 1
    24f4:	9e a7       	std	Y+46, r25	; 0x2e
    24f6:	8d a7       	std	Y+45, r24	; 0x2d
    24f8:	8d a5       	ldd	r24, Y+45	; 0x2d
    24fa:	9e a5       	ldd	r25, Y+46	; 0x2e
    24fc:	01 97       	sbiw	r24, 0x01	; 1
    24fe:	f1 f7       	brne	.-4      	; 0x24fc <main+0x5e0>
    2500:	9e a7       	std	Y+46, r25	; 0x2e
    2502:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2504:	8f a5       	ldd	r24, Y+47	; 0x2f
    2506:	98 a9       	ldd	r25, Y+48	; 0x30
    2508:	01 97       	sbiw	r24, 0x01	; 1
    250a:	98 ab       	std	Y+48, r25	; 0x30
    250c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    250e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2510:	98 a9       	ldd	r25, Y+48	; 0x30
    2512:	00 97       	sbiw	r24, 0x00	; 0
    2514:	69 f7       	brne	.-38     	; 0x24f0 <main+0x5d4>
    2516:	14 c0       	rjmp	.+40     	; 0x2540 <main+0x624>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2518:	69 a9       	ldd	r22, Y+49	; 0x31
    251a:	7a a9       	ldd	r23, Y+50	; 0x32
    251c:	8b a9       	ldd	r24, Y+51	; 0x33
    251e:	9c a9       	ldd	r25, Y+52	; 0x34
    2520:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2524:	dc 01       	movw	r26, r24
    2526:	cb 01       	movw	r24, r22
    2528:	98 ab       	std	Y+48, r25	; 0x30
    252a:	8f a7       	std	Y+47, r24	; 0x2f
    252c:	8f a5       	ldd	r24, Y+47	; 0x2f
    252e:	98 a9       	ldd	r25, Y+48	; 0x30
    2530:	9c a7       	std	Y+44, r25	; 0x2c
    2532:	8b a7       	std	Y+43, r24	; 0x2b
    2534:	8b a5       	ldd	r24, Y+43	; 0x2b
    2536:	9c a5       	ldd	r25, Y+44	; 0x2c
    2538:	01 97       	sbiw	r24, 0x01	; 1
    253a:	f1 f7       	brne	.-4      	; 0x2538 <main+0x61c>
    253c:	9c a7       	std	Y+44, r25	; 0x2c
    253e:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(250);
			Dio_SetPinValue(GroupA, PIN3, LOW);
    2540:	80 e0       	ldi	r24, 0x00	; 0
    2542:	63 e0       	ldi	r22, 0x03	; 3
    2544:	40 e0       	ldi	r20, 0x00	; 0
    2546:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <Dio_SetPinValue>
    254a:	80 e0       	ldi	r24, 0x00	; 0
    254c:	90 e0       	ldi	r25, 0x00	; 0
    254e:	aa e7       	ldi	r26, 0x7A	; 122
    2550:	b3 e4       	ldi	r27, 0x43	; 67
    2552:	8f a3       	std	Y+39, r24	; 0x27
    2554:	98 a7       	std	Y+40, r25	; 0x28
    2556:	a9 a7       	std	Y+41, r26	; 0x29
    2558:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    255a:	6f a1       	ldd	r22, Y+39	; 0x27
    255c:	78 a5       	ldd	r23, Y+40	; 0x28
    255e:	89 a5       	ldd	r24, Y+41	; 0x29
    2560:	9a a5       	ldd	r25, Y+42	; 0x2a
    2562:	20 e0       	ldi	r18, 0x00	; 0
    2564:	30 e0       	ldi	r19, 0x00	; 0
    2566:	4a e7       	ldi	r20, 0x7A	; 122
    2568:	55 e4       	ldi	r21, 0x45	; 69
    256a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    256e:	dc 01       	movw	r26, r24
    2570:	cb 01       	movw	r24, r22
    2572:	8b a3       	std	Y+35, r24	; 0x23
    2574:	9c a3       	std	Y+36, r25	; 0x24
    2576:	ad a3       	std	Y+37, r26	; 0x25
    2578:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    257a:	6b a1       	ldd	r22, Y+35	; 0x23
    257c:	7c a1       	ldd	r23, Y+36	; 0x24
    257e:	8d a1       	ldd	r24, Y+37	; 0x25
    2580:	9e a1       	ldd	r25, Y+38	; 0x26
    2582:	20 e0       	ldi	r18, 0x00	; 0
    2584:	30 e0       	ldi	r19, 0x00	; 0
    2586:	40 e8       	ldi	r20, 0x80	; 128
    2588:	5f e3       	ldi	r21, 0x3F	; 63
    258a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    258e:	88 23       	and	r24, r24
    2590:	2c f4       	brge	.+10     	; 0x259c <main+0x680>
		__ticks = 1;
    2592:	81 e0       	ldi	r24, 0x01	; 1
    2594:	90 e0       	ldi	r25, 0x00	; 0
    2596:	9a a3       	std	Y+34, r25	; 0x22
    2598:	89 a3       	std	Y+33, r24	; 0x21
    259a:	3f c0       	rjmp	.+126    	; 0x261a <main+0x6fe>
	else if (__tmp > 65535)
    259c:	6b a1       	ldd	r22, Y+35	; 0x23
    259e:	7c a1       	ldd	r23, Y+36	; 0x24
    25a0:	8d a1       	ldd	r24, Y+37	; 0x25
    25a2:	9e a1       	ldd	r25, Y+38	; 0x26
    25a4:	20 e0       	ldi	r18, 0x00	; 0
    25a6:	3f ef       	ldi	r19, 0xFF	; 255
    25a8:	4f e7       	ldi	r20, 0x7F	; 127
    25aa:	57 e4       	ldi	r21, 0x47	; 71
    25ac:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    25b0:	18 16       	cp	r1, r24
    25b2:	4c f5       	brge	.+82     	; 0x2606 <main+0x6ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25b4:	6f a1       	ldd	r22, Y+39	; 0x27
    25b6:	78 a5       	ldd	r23, Y+40	; 0x28
    25b8:	89 a5       	ldd	r24, Y+41	; 0x29
    25ba:	9a a5       	ldd	r25, Y+42	; 0x2a
    25bc:	20 e0       	ldi	r18, 0x00	; 0
    25be:	30 e0       	ldi	r19, 0x00	; 0
    25c0:	40 e2       	ldi	r20, 0x20	; 32
    25c2:	51 e4       	ldi	r21, 0x41	; 65
    25c4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25c8:	dc 01       	movw	r26, r24
    25ca:	cb 01       	movw	r24, r22
    25cc:	bc 01       	movw	r22, r24
    25ce:	cd 01       	movw	r24, r26
    25d0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25d4:	dc 01       	movw	r26, r24
    25d6:	cb 01       	movw	r24, r22
    25d8:	9a a3       	std	Y+34, r25	; 0x22
    25da:	89 a3       	std	Y+33, r24	; 0x21
    25dc:	0f c0       	rjmp	.+30     	; 0x25fc <main+0x6e0>
    25de:	80 e9       	ldi	r24, 0x90	; 144
    25e0:	91 e0       	ldi	r25, 0x01	; 1
    25e2:	98 a3       	std	Y+32, r25	; 0x20
    25e4:	8f 8f       	std	Y+31, r24	; 0x1f
    25e6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    25e8:	98 a1       	ldd	r25, Y+32	; 0x20
    25ea:	01 97       	sbiw	r24, 0x01	; 1
    25ec:	f1 f7       	brne	.-4      	; 0x25ea <main+0x6ce>
    25ee:	98 a3       	std	Y+32, r25	; 0x20
    25f0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25f2:	89 a1       	ldd	r24, Y+33	; 0x21
    25f4:	9a a1       	ldd	r25, Y+34	; 0x22
    25f6:	01 97       	sbiw	r24, 0x01	; 1
    25f8:	9a a3       	std	Y+34, r25	; 0x22
    25fa:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25fc:	89 a1       	ldd	r24, Y+33	; 0x21
    25fe:	9a a1       	ldd	r25, Y+34	; 0x22
    2600:	00 97       	sbiw	r24, 0x00	; 0
    2602:	69 f7       	brne	.-38     	; 0x25de <main+0x6c2>
    2604:	b7 cc       	rjmp	.-1682   	; 0x1f74 <main+0x58>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2606:	6b a1       	ldd	r22, Y+35	; 0x23
    2608:	7c a1       	ldd	r23, Y+36	; 0x24
    260a:	8d a1       	ldd	r24, Y+37	; 0x25
    260c:	9e a1       	ldd	r25, Y+38	; 0x26
    260e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2612:	dc 01       	movw	r26, r24
    2614:	cb 01       	movw	r24, r22
    2616:	9a a3       	std	Y+34, r25	; 0x22
    2618:	89 a3       	std	Y+33, r24	; 0x21
    261a:	89 a1       	ldd	r24, Y+33	; 0x21
    261c:	9a a1       	ldd	r25, Y+34	; 0x22
    261e:	9e 8f       	std	Y+30, r25	; 0x1e
    2620:	8d 8f       	std	Y+29, r24	; 0x1d
    2622:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2624:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2626:	01 97       	sbiw	r24, 0x01	; 1
    2628:	f1 f7       	brne	.-4      	; 0x2626 <main+0x70a>
    262a:	9e 8f       	std	Y+30, r25	; 0x1e
    262c:	8d 8f       	std	Y+29, r24	; 0x1d
    262e:	a2 cc       	rjmp	.-1724   	; 0x1f74 <main+0x58>
			_delay_ms(250);
		} else if ((Analog_value > 33) && (Analog_value < 35)) {
    2630:	fe 01       	movw	r30, r28
    2632:	ed 59       	subi	r30, 0x9D	; 157
    2634:	ff 4f       	sbci	r31, 0xFF	; 255
    2636:	80 81       	ld	r24, Z
    2638:	91 81       	ldd	r25, Z+1	; 0x01
    263a:	a2 81       	ldd	r26, Z+2	; 0x02
    263c:	b3 81       	ldd	r27, Z+3	; 0x03
    263e:	82 32       	cpi	r24, 0x22	; 34
    2640:	91 05       	cpc	r25, r1
    2642:	a1 05       	cpc	r26, r1
    2644:	b1 05       	cpc	r27, r1
    2646:	08 f4       	brcc	.+2      	; 0x264a <main+0x72e>
    2648:	fc c0       	rjmp	.+504    	; 0x2842 <main+0x926>
    264a:	fe 01       	movw	r30, r28
    264c:	ed 59       	subi	r30, 0x9D	; 157
    264e:	ff 4f       	sbci	r31, 0xFF	; 255
    2650:	80 81       	ld	r24, Z
    2652:	91 81       	ldd	r25, Z+1	; 0x01
    2654:	a2 81       	ldd	r26, Z+2	; 0x02
    2656:	b3 81       	ldd	r27, Z+3	; 0x03
    2658:	83 32       	cpi	r24, 0x23	; 35
    265a:	91 05       	cpc	r25, r1
    265c:	a1 05       	cpc	r26, r1
    265e:	b1 05       	cpc	r27, r1
    2660:	08 f0       	brcs	.+2      	; 0x2664 <main+0x748>
    2662:	ef c0       	rjmp	.+478    	; 0x2842 <main+0x926>
			Dio_SetPinValue(GroupA, PIN3, HIGH);
    2664:	80 e0       	ldi	r24, 0x00	; 0
    2666:	63 e0       	ldi	r22, 0x03	; 3
    2668:	41 e0       	ldi	r20, 0x01	; 1
    266a:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <Dio_SetPinValue>
    266e:	80 e0       	ldi	r24, 0x00	; 0
    2670:	90 e0       	ldi	r25, 0x00	; 0
    2672:	a8 ec       	ldi	r26, 0xC8	; 200
    2674:	b2 e4       	ldi	r27, 0x42	; 66
    2676:	89 8f       	std	Y+25, r24	; 0x19
    2678:	9a 8f       	std	Y+26, r25	; 0x1a
    267a:	ab 8f       	std	Y+27, r26	; 0x1b
    267c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    267e:	69 8d       	ldd	r22, Y+25	; 0x19
    2680:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2682:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2684:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2686:	20 e0       	ldi	r18, 0x00	; 0
    2688:	30 e0       	ldi	r19, 0x00	; 0
    268a:	4a e7       	ldi	r20, 0x7A	; 122
    268c:	55 e4       	ldi	r21, 0x45	; 69
    268e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2692:	dc 01       	movw	r26, r24
    2694:	cb 01       	movw	r24, r22
    2696:	8d 8b       	std	Y+21, r24	; 0x15
    2698:	9e 8b       	std	Y+22, r25	; 0x16
    269a:	af 8b       	std	Y+23, r26	; 0x17
    269c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    269e:	6d 89       	ldd	r22, Y+21	; 0x15
    26a0:	7e 89       	ldd	r23, Y+22	; 0x16
    26a2:	8f 89       	ldd	r24, Y+23	; 0x17
    26a4:	98 8d       	ldd	r25, Y+24	; 0x18
    26a6:	20 e0       	ldi	r18, 0x00	; 0
    26a8:	30 e0       	ldi	r19, 0x00	; 0
    26aa:	40 e8       	ldi	r20, 0x80	; 128
    26ac:	5f e3       	ldi	r21, 0x3F	; 63
    26ae:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    26b2:	88 23       	and	r24, r24
    26b4:	2c f4       	brge	.+10     	; 0x26c0 <main+0x7a4>
		__ticks = 1;
    26b6:	81 e0       	ldi	r24, 0x01	; 1
    26b8:	90 e0       	ldi	r25, 0x00	; 0
    26ba:	9c 8b       	std	Y+20, r25	; 0x14
    26bc:	8b 8b       	std	Y+19, r24	; 0x13
    26be:	3f c0       	rjmp	.+126    	; 0x273e <main+0x822>
	else if (__tmp > 65535)
    26c0:	6d 89       	ldd	r22, Y+21	; 0x15
    26c2:	7e 89       	ldd	r23, Y+22	; 0x16
    26c4:	8f 89       	ldd	r24, Y+23	; 0x17
    26c6:	98 8d       	ldd	r25, Y+24	; 0x18
    26c8:	20 e0       	ldi	r18, 0x00	; 0
    26ca:	3f ef       	ldi	r19, 0xFF	; 255
    26cc:	4f e7       	ldi	r20, 0x7F	; 127
    26ce:	57 e4       	ldi	r21, 0x47	; 71
    26d0:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    26d4:	18 16       	cp	r1, r24
    26d6:	4c f5       	brge	.+82     	; 0x272a <main+0x80e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26d8:	69 8d       	ldd	r22, Y+25	; 0x19
    26da:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26dc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26de:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26e0:	20 e0       	ldi	r18, 0x00	; 0
    26e2:	30 e0       	ldi	r19, 0x00	; 0
    26e4:	40 e2       	ldi	r20, 0x20	; 32
    26e6:	51 e4       	ldi	r21, 0x41	; 65
    26e8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26ec:	dc 01       	movw	r26, r24
    26ee:	cb 01       	movw	r24, r22
    26f0:	bc 01       	movw	r22, r24
    26f2:	cd 01       	movw	r24, r26
    26f4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26f8:	dc 01       	movw	r26, r24
    26fa:	cb 01       	movw	r24, r22
    26fc:	9c 8b       	std	Y+20, r25	; 0x14
    26fe:	8b 8b       	std	Y+19, r24	; 0x13
    2700:	0f c0       	rjmp	.+30     	; 0x2720 <main+0x804>
    2702:	80 e9       	ldi	r24, 0x90	; 144
    2704:	91 e0       	ldi	r25, 0x01	; 1
    2706:	9a 8b       	std	Y+18, r25	; 0x12
    2708:	89 8b       	std	Y+17, r24	; 0x11
    270a:	89 89       	ldd	r24, Y+17	; 0x11
    270c:	9a 89       	ldd	r25, Y+18	; 0x12
    270e:	01 97       	sbiw	r24, 0x01	; 1
    2710:	f1 f7       	brne	.-4      	; 0x270e <main+0x7f2>
    2712:	9a 8b       	std	Y+18, r25	; 0x12
    2714:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2716:	8b 89       	ldd	r24, Y+19	; 0x13
    2718:	9c 89       	ldd	r25, Y+20	; 0x14
    271a:	01 97       	sbiw	r24, 0x01	; 1
    271c:	9c 8b       	std	Y+20, r25	; 0x14
    271e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2720:	8b 89       	ldd	r24, Y+19	; 0x13
    2722:	9c 89       	ldd	r25, Y+20	; 0x14
    2724:	00 97       	sbiw	r24, 0x00	; 0
    2726:	69 f7       	brne	.-38     	; 0x2702 <main+0x7e6>
    2728:	14 c0       	rjmp	.+40     	; 0x2752 <main+0x836>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    272a:	6d 89       	ldd	r22, Y+21	; 0x15
    272c:	7e 89       	ldd	r23, Y+22	; 0x16
    272e:	8f 89       	ldd	r24, Y+23	; 0x17
    2730:	98 8d       	ldd	r25, Y+24	; 0x18
    2732:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2736:	dc 01       	movw	r26, r24
    2738:	cb 01       	movw	r24, r22
    273a:	9c 8b       	std	Y+20, r25	; 0x14
    273c:	8b 8b       	std	Y+19, r24	; 0x13
    273e:	8b 89       	ldd	r24, Y+19	; 0x13
    2740:	9c 89       	ldd	r25, Y+20	; 0x14
    2742:	98 8b       	std	Y+16, r25	; 0x10
    2744:	8f 87       	std	Y+15, r24	; 0x0f
    2746:	8f 85       	ldd	r24, Y+15	; 0x0f
    2748:	98 89       	ldd	r25, Y+16	; 0x10
    274a:	01 97       	sbiw	r24, 0x01	; 1
    274c:	f1 f7       	brne	.-4      	; 0x274a <main+0x82e>
    274e:	98 8b       	std	Y+16, r25	; 0x10
    2750:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(100);
			Dio_SetPinValue(GroupA, PIN3, LOW);
    2752:	80 e0       	ldi	r24, 0x00	; 0
    2754:	63 e0       	ldi	r22, 0x03	; 3
    2756:	40 e0       	ldi	r20, 0x00	; 0
    2758:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <Dio_SetPinValue>
    275c:	80 e0       	ldi	r24, 0x00	; 0
    275e:	90 e0       	ldi	r25, 0x00	; 0
    2760:	a8 ec       	ldi	r26, 0xC8	; 200
    2762:	b2 e4       	ldi	r27, 0x42	; 66
    2764:	8b 87       	std	Y+11, r24	; 0x0b
    2766:	9c 87       	std	Y+12, r25	; 0x0c
    2768:	ad 87       	std	Y+13, r26	; 0x0d
    276a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    276c:	6b 85       	ldd	r22, Y+11	; 0x0b
    276e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2770:	8d 85       	ldd	r24, Y+13	; 0x0d
    2772:	9e 85       	ldd	r25, Y+14	; 0x0e
    2774:	20 e0       	ldi	r18, 0x00	; 0
    2776:	30 e0       	ldi	r19, 0x00	; 0
    2778:	4a e7       	ldi	r20, 0x7A	; 122
    277a:	55 e4       	ldi	r21, 0x45	; 69
    277c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2780:	dc 01       	movw	r26, r24
    2782:	cb 01       	movw	r24, r22
    2784:	8f 83       	std	Y+7, r24	; 0x07
    2786:	98 87       	std	Y+8, r25	; 0x08
    2788:	a9 87       	std	Y+9, r26	; 0x09
    278a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    278c:	6f 81       	ldd	r22, Y+7	; 0x07
    278e:	78 85       	ldd	r23, Y+8	; 0x08
    2790:	89 85       	ldd	r24, Y+9	; 0x09
    2792:	9a 85       	ldd	r25, Y+10	; 0x0a
    2794:	20 e0       	ldi	r18, 0x00	; 0
    2796:	30 e0       	ldi	r19, 0x00	; 0
    2798:	40 e8       	ldi	r20, 0x80	; 128
    279a:	5f e3       	ldi	r21, 0x3F	; 63
    279c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    27a0:	88 23       	and	r24, r24
    27a2:	2c f4       	brge	.+10     	; 0x27ae <main+0x892>
		__ticks = 1;
    27a4:	81 e0       	ldi	r24, 0x01	; 1
    27a6:	90 e0       	ldi	r25, 0x00	; 0
    27a8:	9e 83       	std	Y+6, r25	; 0x06
    27aa:	8d 83       	std	Y+5, r24	; 0x05
    27ac:	3f c0       	rjmp	.+126    	; 0x282c <main+0x910>
	else if (__tmp > 65535)
    27ae:	6f 81       	ldd	r22, Y+7	; 0x07
    27b0:	78 85       	ldd	r23, Y+8	; 0x08
    27b2:	89 85       	ldd	r24, Y+9	; 0x09
    27b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    27b6:	20 e0       	ldi	r18, 0x00	; 0
    27b8:	3f ef       	ldi	r19, 0xFF	; 255
    27ba:	4f e7       	ldi	r20, 0x7F	; 127
    27bc:	57 e4       	ldi	r21, 0x47	; 71
    27be:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    27c2:	18 16       	cp	r1, r24
    27c4:	4c f5       	brge	.+82     	; 0x2818 <main+0x8fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    27c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    27ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    27cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    27ce:	20 e0       	ldi	r18, 0x00	; 0
    27d0:	30 e0       	ldi	r19, 0x00	; 0
    27d2:	40 e2       	ldi	r20, 0x20	; 32
    27d4:	51 e4       	ldi	r21, 0x41	; 65
    27d6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27da:	dc 01       	movw	r26, r24
    27dc:	cb 01       	movw	r24, r22
    27de:	bc 01       	movw	r22, r24
    27e0:	cd 01       	movw	r24, r26
    27e2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27e6:	dc 01       	movw	r26, r24
    27e8:	cb 01       	movw	r24, r22
    27ea:	9e 83       	std	Y+6, r25	; 0x06
    27ec:	8d 83       	std	Y+5, r24	; 0x05
    27ee:	0f c0       	rjmp	.+30     	; 0x280e <main+0x8f2>
    27f0:	80 e9       	ldi	r24, 0x90	; 144
    27f2:	91 e0       	ldi	r25, 0x01	; 1
    27f4:	9c 83       	std	Y+4, r25	; 0x04
    27f6:	8b 83       	std	Y+3, r24	; 0x03
    27f8:	8b 81       	ldd	r24, Y+3	; 0x03
    27fa:	9c 81       	ldd	r25, Y+4	; 0x04
    27fc:	01 97       	sbiw	r24, 0x01	; 1
    27fe:	f1 f7       	brne	.-4      	; 0x27fc <main+0x8e0>
    2800:	9c 83       	std	Y+4, r25	; 0x04
    2802:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2804:	8d 81       	ldd	r24, Y+5	; 0x05
    2806:	9e 81       	ldd	r25, Y+6	; 0x06
    2808:	01 97       	sbiw	r24, 0x01	; 1
    280a:	9e 83       	std	Y+6, r25	; 0x06
    280c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    280e:	8d 81       	ldd	r24, Y+5	; 0x05
    2810:	9e 81       	ldd	r25, Y+6	; 0x06
    2812:	00 97       	sbiw	r24, 0x00	; 0
    2814:	69 f7       	brne	.-38     	; 0x27f0 <main+0x8d4>
    2816:	ae cb       	rjmp	.-2212   	; 0x1f74 <main+0x58>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2818:	6f 81       	ldd	r22, Y+7	; 0x07
    281a:	78 85       	ldd	r23, Y+8	; 0x08
    281c:	89 85       	ldd	r24, Y+9	; 0x09
    281e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2820:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2824:	dc 01       	movw	r26, r24
    2826:	cb 01       	movw	r24, r22
    2828:	9e 83       	std	Y+6, r25	; 0x06
    282a:	8d 83       	std	Y+5, r24	; 0x05
    282c:	8d 81       	ldd	r24, Y+5	; 0x05
    282e:	9e 81       	ldd	r25, Y+6	; 0x06
    2830:	9a 83       	std	Y+2, r25	; 0x02
    2832:	89 83       	std	Y+1, r24	; 0x01
    2834:	89 81       	ldd	r24, Y+1	; 0x01
    2836:	9a 81       	ldd	r25, Y+2	; 0x02
    2838:	01 97       	sbiw	r24, 0x01	; 1
    283a:	f1 f7       	brne	.-4      	; 0x2838 <main+0x91c>
    283c:	9a 83       	std	Y+2, r25	; 0x02
    283e:	89 83       	std	Y+1, r24	; 0x01
    2840:	99 cb       	rjmp	.-2254   	; 0x1f74 <main+0x58>
			_delay_ms(100);
		} else if ((Analog_value > 35)) {
    2842:	fe 01       	movw	r30, r28
    2844:	ed 59       	subi	r30, 0x9D	; 157
    2846:	ff 4f       	sbci	r31, 0xFF	; 255
    2848:	80 81       	ld	r24, Z
    284a:	91 81       	ldd	r25, Z+1	; 0x01
    284c:	a2 81       	ldd	r26, Z+2	; 0x02
    284e:	b3 81       	ldd	r27, Z+3	; 0x03
    2850:	84 32       	cpi	r24, 0x24	; 36
    2852:	91 05       	cpc	r25, r1
    2854:	a1 05       	cpc	r26, r1
    2856:	b1 05       	cpc	r27, r1
    2858:	08 f4       	brcc	.+2      	; 0x285c <main+0x940>
    285a:	8c cb       	rjmp	.-2280   	; 0x1f74 <main+0x58>
			Dio_SetPinValue(GroupA, PIN3, HIGH);
    285c:	80 e0       	ldi	r24, 0x00	; 0
    285e:	63 e0       	ldi	r22, 0x03	; 3
    2860:	41 e0       	ldi	r20, 0x01	; 1
    2862:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <Dio_SetPinValue>
    2866:	86 cb       	rjmp	.-2292   	; 0x1f74 <main+0x58>

00002868 <__mulsi3>:
    2868:	62 9f       	mul	r22, r18
    286a:	d0 01       	movw	r26, r0
    286c:	73 9f       	mul	r23, r19
    286e:	f0 01       	movw	r30, r0
    2870:	82 9f       	mul	r24, r18
    2872:	e0 0d       	add	r30, r0
    2874:	f1 1d       	adc	r31, r1
    2876:	64 9f       	mul	r22, r20
    2878:	e0 0d       	add	r30, r0
    287a:	f1 1d       	adc	r31, r1
    287c:	92 9f       	mul	r25, r18
    287e:	f0 0d       	add	r31, r0
    2880:	83 9f       	mul	r24, r19
    2882:	f0 0d       	add	r31, r0
    2884:	74 9f       	mul	r23, r20
    2886:	f0 0d       	add	r31, r0
    2888:	65 9f       	mul	r22, r21
    288a:	f0 0d       	add	r31, r0
    288c:	99 27       	eor	r25, r25
    288e:	72 9f       	mul	r23, r18
    2890:	b0 0d       	add	r27, r0
    2892:	e1 1d       	adc	r30, r1
    2894:	f9 1f       	adc	r31, r25
    2896:	63 9f       	mul	r22, r19
    2898:	b0 0d       	add	r27, r0
    289a:	e1 1d       	adc	r30, r1
    289c:	f9 1f       	adc	r31, r25
    289e:	bd 01       	movw	r22, r26
    28a0:	cf 01       	movw	r24, r30
    28a2:	11 24       	eor	r1, r1
    28a4:	08 95       	ret

000028a6 <__udivmodsi4>:
    28a6:	a1 e2       	ldi	r26, 0x21	; 33
    28a8:	1a 2e       	mov	r1, r26
    28aa:	aa 1b       	sub	r26, r26
    28ac:	bb 1b       	sub	r27, r27
    28ae:	fd 01       	movw	r30, r26
    28b0:	0d c0       	rjmp	.+26     	; 0x28cc <__udivmodsi4_ep>

000028b2 <__udivmodsi4_loop>:
    28b2:	aa 1f       	adc	r26, r26
    28b4:	bb 1f       	adc	r27, r27
    28b6:	ee 1f       	adc	r30, r30
    28b8:	ff 1f       	adc	r31, r31
    28ba:	a2 17       	cp	r26, r18
    28bc:	b3 07       	cpc	r27, r19
    28be:	e4 07       	cpc	r30, r20
    28c0:	f5 07       	cpc	r31, r21
    28c2:	20 f0       	brcs	.+8      	; 0x28cc <__udivmodsi4_ep>
    28c4:	a2 1b       	sub	r26, r18
    28c6:	b3 0b       	sbc	r27, r19
    28c8:	e4 0b       	sbc	r30, r20
    28ca:	f5 0b       	sbc	r31, r21

000028cc <__udivmodsi4_ep>:
    28cc:	66 1f       	adc	r22, r22
    28ce:	77 1f       	adc	r23, r23
    28d0:	88 1f       	adc	r24, r24
    28d2:	99 1f       	adc	r25, r25
    28d4:	1a 94       	dec	r1
    28d6:	69 f7       	brne	.-38     	; 0x28b2 <__udivmodsi4_loop>
    28d8:	60 95       	com	r22
    28da:	70 95       	com	r23
    28dc:	80 95       	com	r24
    28de:	90 95       	com	r25
    28e0:	9b 01       	movw	r18, r22
    28e2:	ac 01       	movw	r20, r24
    28e4:	bd 01       	movw	r22, r26
    28e6:	cf 01       	movw	r24, r30
    28e8:	08 95       	ret

000028ea <__prologue_saves__>:
    28ea:	2f 92       	push	r2
    28ec:	3f 92       	push	r3
    28ee:	4f 92       	push	r4
    28f0:	5f 92       	push	r5
    28f2:	6f 92       	push	r6
    28f4:	7f 92       	push	r7
    28f6:	8f 92       	push	r8
    28f8:	9f 92       	push	r9
    28fa:	af 92       	push	r10
    28fc:	bf 92       	push	r11
    28fe:	cf 92       	push	r12
    2900:	df 92       	push	r13
    2902:	ef 92       	push	r14
    2904:	ff 92       	push	r15
    2906:	0f 93       	push	r16
    2908:	1f 93       	push	r17
    290a:	cf 93       	push	r28
    290c:	df 93       	push	r29
    290e:	cd b7       	in	r28, 0x3d	; 61
    2910:	de b7       	in	r29, 0x3e	; 62
    2912:	ca 1b       	sub	r28, r26
    2914:	db 0b       	sbc	r29, r27
    2916:	0f b6       	in	r0, 0x3f	; 63
    2918:	f8 94       	cli
    291a:	de bf       	out	0x3e, r29	; 62
    291c:	0f be       	out	0x3f, r0	; 63
    291e:	cd bf       	out	0x3d, r28	; 61
    2920:	09 94       	ijmp

00002922 <__epilogue_restores__>:
    2922:	2a 88       	ldd	r2, Y+18	; 0x12
    2924:	39 88       	ldd	r3, Y+17	; 0x11
    2926:	48 88       	ldd	r4, Y+16	; 0x10
    2928:	5f 84       	ldd	r5, Y+15	; 0x0f
    292a:	6e 84       	ldd	r6, Y+14	; 0x0e
    292c:	7d 84       	ldd	r7, Y+13	; 0x0d
    292e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2930:	9b 84       	ldd	r9, Y+11	; 0x0b
    2932:	aa 84       	ldd	r10, Y+10	; 0x0a
    2934:	b9 84       	ldd	r11, Y+9	; 0x09
    2936:	c8 84       	ldd	r12, Y+8	; 0x08
    2938:	df 80       	ldd	r13, Y+7	; 0x07
    293a:	ee 80       	ldd	r14, Y+6	; 0x06
    293c:	fd 80       	ldd	r15, Y+5	; 0x05
    293e:	0c 81       	ldd	r16, Y+4	; 0x04
    2940:	1b 81       	ldd	r17, Y+3	; 0x03
    2942:	aa 81       	ldd	r26, Y+2	; 0x02
    2944:	b9 81       	ldd	r27, Y+1	; 0x01
    2946:	ce 0f       	add	r28, r30
    2948:	d1 1d       	adc	r29, r1
    294a:	0f b6       	in	r0, 0x3f	; 63
    294c:	f8 94       	cli
    294e:	de bf       	out	0x3e, r29	; 62
    2950:	0f be       	out	0x3f, r0	; 63
    2952:	cd bf       	out	0x3d, r28	; 61
    2954:	ed 01       	movw	r28, r26
    2956:	08 95       	ret

00002958 <itoa>:
    2958:	fb 01       	movw	r30, r22
    295a:	9f 01       	movw	r18, r30
    295c:	e8 94       	clt
    295e:	42 30       	cpi	r20, 0x02	; 2
    2960:	c4 f0       	brlt	.+48     	; 0x2992 <itoa+0x3a>
    2962:	45 32       	cpi	r20, 0x25	; 37
    2964:	b4 f4       	brge	.+44     	; 0x2992 <itoa+0x3a>
    2966:	4a 30       	cpi	r20, 0x0A	; 10
    2968:	29 f4       	brne	.+10     	; 0x2974 <itoa+0x1c>
    296a:	97 fb       	bst	r25, 7
    296c:	1e f4       	brtc	.+6      	; 0x2974 <itoa+0x1c>
    296e:	90 95       	com	r25
    2970:	81 95       	neg	r24
    2972:	9f 4f       	sbci	r25, 0xFF	; 255
    2974:	64 2f       	mov	r22, r20
    2976:	77 27       	eor	r23, r23
    2978:	0e 94 dd 14 	call	0x29ba	; 0x29ba <__udivmodhi4>
    297c:	80 5d       	subi	r24, 0xD0	; 208
    297e:	8a 33       	cpi	r24, 0x3A	; 58
    2980:	0c f0       	brlt	.+2      	; 0x2984 <itoa+0x2c>
    2982:	89 5d       	subi	r24, 0xD9	; 217
    2984:	81 93       	st	Z+, r24
    2986:	cb 01       	movw	r24, r22
    2988:	00 97       	sbiw	r24, 0x00	; 0
    298a:	a1 f7       	brne	.-24     	; 0x2974 <itoa+0x1c>
    298c:	16 f4       	brtc	.+4      	; 0x2992 <itoa+0x3a>
    298e:	5d e2       	ldi	r21, 0x2D	; 45
    2990:	51 93       	st	Z+, r21
    2992:	10 82       	st	Z, r1
    2994:	c9 01       	movw	r24, r18
    2996:	0c 94 cd 14 	jmp	0x299a	; 0x299a <strrev>

0000299a <strrev>:
    299a:	dc 01       	movw	r26, r24
    299c:	fc 01       	movw	r30, r24
    299e:	67 2f       	mov	r22, r23
    29a0:	71 91       	ld	r23, Z+
    29a2:	77 23       	and	r23, r23
    29a4:	e1 f7       	brne	.-8      	; 0x299e <strrev+0x4>
    29a6:	32 97       	sbiw	r30, 0x02	; 2
    29a8:	04 c0       	rjmp	.+8      	; 0x29b2 <strrev+0x18>
    29aa:	7c 91       	ld	r23, X
    29ac:	6d 93       	st	X+, r22
    29ae:	70 83       	st	Z, r23
    29b0:	62 91       	ld	r22, -Z
    29b2:	ae 17       	cp	r26, r30
    29b4:	bf 07       	cpc	r27, r31
    29b6:	c8 f3       	brcs	.-14     	; 0x29aa <strrev+0x10>
    29b8:	08 95       	ret

000029ba <__udivmodhi4>:
    29ba:	aa 1b       	sub	r26, r26
    29bc:	bb 1b       	sub	r27, r27
    29be:	51 e1       	ldi	r21, 0x11	; 17
    29c0:	07 c0       	rjmp	.+14     	; 0x29d0 <__udivmodhi4_ep>

000029c2 <__udivmodhi4_loop>:
    29c2:	aa 1f       	adc	r26, r26
    29c4:	bb 1f       	adc	r27, r27
    29c6:	a6 17       	cp	r26, r22
    29c8:	b7 07       	cpc	r27, r23
    29ca:	10 f0       	brcs	.+4      	; 0x29d0 <__udivmodhi4_ep>
    29cc:	a6 1b       	sub	r26, r22
    29ce:	b7 0b       	sbc	r27, r23

000029d0 <__udivmodhi4_ep>:
    29d0:	88 1f       	adc	r24, r24
    29d2:	99 1f       	adc	r25, r25
    29d4:	5a 95       	dec	r21
    29d6:	a9 f7       	brne	.-22     	; 0x29c2 <__udivmodhi4_loop>
    29d8:	80 95       	com	r24
    29da:	90 95       	com	r25
    29dc:	bc 01       	movw	r22, r24
    29de:	cd 01       	movw	r24, r26
    29e0:	08 95       	ret

000029e2 <_exit>:
    29e2:	f8 94       	cli

000029e4 <__stop_program>:
    29e4:	ff cf       	rjmp	.-2      	; 0x29e4 <__stop_program>
